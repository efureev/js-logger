{"version":3,"file":"index.js","names":["ConsoleDriver","output","console","debug","msg","perform","info","log","error","trace","type","lines","buildStrings","formatMessage","fmt","fmtStr","fmtArgs","getBlocks","forEach","block","str","args","formatBlock","push","getText","strStyle","style","getStyle","keyStyle"],"sources":["../../../../src/drivers/ConsoleDriver/index.ts"],"sourcesContent":["import Message from '../../Message'\nimport MessageBlock from '../../MessageBlock'\nimport { LoggerDriver } from '../LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  private output = console\n\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    this.output[type](...lines)\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n"],"mappings":"AASA,MAAMA,aAAN,CAA4C;EAClCC,MAAM,GAAGC,OAAH;;EAEdC,KAAK,CAACC,GAAD,EAAqB;IACxB,KAAKC,OAAL,CAAaD,GAAb,EAAkB,OAAlB;EACD;;EAEDE,IAAI,CAACF,GAAD,EAAqB;IACvB,KAAKC,OAAL,CAAaD,GAAb,EAAkB,MAAlB;EACD;;EAEDG,GAAG,CAACH,GAAD,EAAqB;IACtB,KAAKC,OAAL,CAAaD,GAAb,EAAkB,KAAlB;EACD;;EAEDI,KAAK,CAACJ,GAAD,EAAqB;IACxB,KAAKC,OAAL,CAAaD,GAAb,EAAkB,OAAlB;EACD;;EAEDK,KAAK,CAACL,GAAD,EAAqB;IACxB,KAAKC,OAAL,CAAaD,GAAb,EAAkB,OAAlB;EACD;;EAESC,OAAO,CAACD,GAAD,EAAeM,IAAf,EAA6B;IAC5C,MAAMC,KAAK,GAAGX,aAAa,CAACY,YAAd,CAA2BZ,aAAa,CAACa,aAAd,CAA4BT,GAA5B,CAA3B,CAAd,CAD4C,CAG5C;;IACA,KAAKH,MAAL,CAAYS,IAAZ,EAAkB,GAAGC,KAArB;EACD;;EAE4B,OAAZC,YAAY,CAACE,GAAD,EAAoC;IAC/D,OAAO,CAACA,GAAG,CAACC,MAAL,EAAa,GAAGD,GAAG,CAACE,OAApB,CAAP;EACD;;EAE6B,OAAbH,aAAa,CAACT,GAAD,EAA8B;IAC1D,IAAIW,MAAc,GAAG,EAArB;IACA,MAAMC,OAAsB,GAAG,EAA/B;IAEAZ,GAAG,CAACa,SAAJ,GAAgBC,OAAhB,CAAwBC,KAAK,IAAI;MAC/B,MAAM;QAAEJ,MAAM,EAAEK,GAAV;QAAeJ,OAAO,EAAEK;MAAxB,IAAiCrB,aAAa,CAACsB,WAAd,CAA0BH,KAA1B,CAAvC;MACAJ,MAAM,IAAIK,GAAV;MACAJ,OAAO,CAACO,IAAR,CAAa,GAAGF,IAAhB;IACD,CAJD;IAMA,OAAO;MAAEN,MAAF;MAAUC;IAAV,CAAP;EACD;;EAE2B,OAAXM,WAAW,CAACH,KAAD,EAAqC;IAC/D,IAAIJ,MAAc,GAAI,KAAII,KAAK,CAACK,OAAN,EAAgB,EAA1C;IACA,MAAMR,OAAsB,GAAG,EAA/B;IACA,IAAIS,QAAQ,GAAG,EAAf;IAEA,MAAMC,KAAK,GAAGP,KAAK,CAACQ,QAAN,EAAd;;IACA,KAAK,MAAMC,QAAX,IAAuBF,KAAvB,EAA8B;MAC5BD,QAAQ,IAAK,GAAEG,QAAS,IAAGF,KAAK,CAACE,QAAD,CAAW,GAA3C;IACD;;IACDZ,OAAO,CAACO,IAAR,CAAaE,QAAb;IAEA,OAAO;MAAEV,MAAF;MAAUC;IAAV,CAAP;EACD;;AA3DyC;;AA8D5C,eAAehB,aAAf"}