{"version":3,"file":"index.js","names":["ConsoleDriver","ConsoleBuffer","print","printFragmented","constructor","debugFn","output","dir","buffer","perform","msg","type","buildStrings","formatMessage","warn","result","performFragmented","_returnResult","length","fragments","split","slice","styles","error","log","forEach","fragment","idx","clearBuffer"],"sources":["../../../../src/drivers/ConsoleBufferDriver/index.ts"],"sourcesContent":["import ConsoleDriver from '../ConsoleDriver'\nimport Message from '../../Message'\n\nexport interface ConsoleBufferConfig {\n  print?: boolean\n  printFragmented?: boolean\n  debugFn?: Function\n}\n\nexport default class ConsoleBuffer extends ConsoleDriver {\n  private readonly print: boolean = false\n  private readonly printFragmented: boolean = false\n  private readonly debugFn: Function\n\n  constructor({ print, printFragmented, debugFn }: ConsoleBufferConfig = {}) {\n    super()\n    this.print = print || false\n    this.printFragmented = printFragmented || false\n    this.debugFn = debugFn || this.output.dir\n  }\n\n  public buffer: string[] = []\n\n  protected perform(msg: Message, type: string): string[] | void {\n    this.buffer = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n    if (this.print) {\n      this.output.warn('--[debug] start')\n\n      const result = super.perform(msg, type)\n\n      this.debugFn(this.buffer)\n      if (this.printFragmented) {\n        this.performFragmented()\n      }\n      this.output.warn('--[debug] finish')\n      if (this._returnResult) {\n        return result\n      }\n    }\n  }\n\n  private performFragmented() {\n    if (!this.buffer.length) {\n      return\n    }\n\n    const fragments = this.buffer[0].split('%c').slice(1)\n    const styles = this.buffer.slice(1)\n\n    if (fragments.length != styles.length) {\n      this.output.error('data inconsistency error: fragments: %d, styles: %d', fragments.length, styles.length)\n      this.output.log('fragments', fragments)\n      this.output.log('styles', styles)\n    }\n\n    fragments.forEach((fragment, idx) => {\n      this.output.log(`${fragment}: ${styles[idx]}`)\n      this.output.log(`%c${fragment}`, styles[idx])\n    })\n  }\n\n  public clearBuffer() {\n    this.buffer = []\n  }\n}\n"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,kBAA1B;AASA,eAAe,MAAMC,aAAN,SAA4BD,aAA5B,CAA0C;EACtCE,KAAK,GAAY,KAAZ;EACLC,eAAe,GAAY,KAAZ;;EAGhCC,WAAW,CAAC;IAAEF,KAAF;IAASC,eAAT;IAA0BE;EAA1B,IAA2D,EAA5D,EAAgE;IACzE;IACA,KAAKH,KAAL,GAAaA,KAAK,IAAI,KAAtB;IACA,KAAKC,eAAL,GAAuBA,eAAe,IAAI,KAA1C;IACA,KAAKE,OAAL,GAAeA,OAAO,IAAI,KAAKC,MAAL,CAAYC,GAAtC;EACD;;EAEMC,MAAM,GAAa,EAAb;;EAEHC,OAAO,CAACC,GAAD,EAAeC,IAAf,EAA8C;IAC7D,KAAKH,MAAL,GAAcR,aAAa,CAACY,YAAd,CAA2BZ,aAAa,CAACa,aAAd,CAA4BH,GAA5B,CAA3B,CAAd;;IACA,IAAI,KAAKR,KAAT,EAAgB;MACd,KAAKI,MAAL,CAAYQ,IAAZ,CAAiB,iBAAjB;MAEA,MAAMC,MAAM,GAAG,MAAMN,OAAN,CAAcC,GAAd,EAAmBC,IAAnB,CAAf;MAEA,KAAKN,OAAL,CAAa,KAAKG,MAAlB;;MACA,IAAI,KAAKL,eAAT,EAA0B;QACxB,KAAKa,iBAAL;MACD;;MACD,KAAKV,MAAL,CAAYQ,IAAZ,CAAiB,kBAAjB;;MACA,IAAI,KAAKG,aAAT,EAAwB;QACtB,OAAOF,MAAP;MACD;IACF;EACF;;EAEOC,iBAAiB,GAAG;IAC1B,IAAI,CAAC,KAAKR,MAAL,CAAYU,MAAjB,EAAyB;MACvB;IACD;;IAED,MAAMC,SAAS,GAAG,KAAKX,MAAL,CAAY,CAAZ,EAAeY,KAAf,CAAqB,IAArB,EAA2BC,KAA3B,CAAiC,CAAjC,CAAlB;IACA,MAAMC,MAAM,GAAG,KAAKd,MAAL,CAAYa,KAAZ,CAAkB,CAAlB,CAAf;;IAEA,IAAIF,SAAS,CAACD,MAAV,IAAoBI,MAAM,CAACJ,MAA/B,EAAuC;MACrC,KAAKZ,MAAL,CAAYiB,KAAZ,CAAkB,qDAAlB,EAAyEJ,SAAS,CAACD,MAAnF,EAA2FI,MAAM,CAACJ,MAAlG;MACA,KAAKZ,MAAL,CAAYkB,GAAZ,CAAgB,WAAhB,EAA6BL,SAA7B;MACA,KAAKb,MAAL,CAAYkB,GAAZ,CAAgB,QAAhB,EAA0BF,MAA1B;IACD;;IAEDH,SAAS,CAACM,OAAV,CAAkB,CAACC,QAAD,EAAWC,GAAX,KAAmB;MACnC,KAAKrB,MAAL,CAAYkB,GAAZ,CAAiB,GAAEE,QAAS,KAAIJ,MAAM,CAACK,GAAD,CAAM,EAA5C;MACA,KAAKrB,MAAL,CAAYkB,GAAZ,CAAiB,KAAIE,QAAS,EAA9B,EAAiCJ,MAAM,CAACK,GAAD,CAAvC;IACD,CAHD;EAID;;EAEMC,WAAW,GAAG;IACnB,KAAKpB,MAAL,GAAc,EAAd;EACD;;AAtDsD"}