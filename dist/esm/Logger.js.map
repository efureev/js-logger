{"version":3,"sources":["../../src/Logger.ts"],"names":["LEVEL_DEBUG","LEVEL_ERROR","LEVEL_INFO","LEVEL_TRACE","Message","MessageBlock","Logger","logLevel","constructor","config","driver","level","setLevel","getDriver","shouldLog","msgLevel","log","msgText","prefix","offset","buildMessage","info","msg","debug","error","trace","panel","panelText","bgColor","color","baseText","instance","pushBlock","background","offsetLeft","borderRadius","padding","block","offsetRight"],"mappings":"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","sourcesContent":["import { LoggerDriver } from './drivers/LoggerDriver'\nimport { LEVEL_DEBUG, LEVEL_ERROR, LEVEL_INFO, LEVEL_TRACE } from './LogLevel'\nimport Message from './Message'\nimport MessageBlock from './MessageBlock'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  level?: number\n}\n\nclass Logger {\n  private readonly driver: LoggerDriver\n  private logLevel: number = LEVEL_ERROR\n\n  constructor(config: LoggerConfig) {\n    this.driver = config.driver\n    if (config.level) {\n      this.logLevel = config.level\n    }\n  }\n\n  setLevel(level: number): void {\n    this.logLevel = level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  private shouldLog(msgLevel: number) {\n    return this.logLevel <= msgLevel // @todo: bit operations\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(LEVEL_INFO)) {\n      return\n    }\n\n    const msg = Logger.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_DEBUG)) {\n      return\n    }\n\n    this.driver.debug(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_ERROR)) {\n      return\n    }\n\n    this.driver.error(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_TRACE)) {\n      return\n    }\n\n    this.driver.trace(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor = '#FFF', color = '#333', offset = 0 } = {},\n    baseText?: string | MessageBlock\n  ) {\n    const msg = Message.instance().pushBlock(\n      MessageBlock.instance(panelText)\n        .background(bgColor)\n        .color(color)\n        .offsetLeft(offset)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText).offsetLeft(1) : null\n    )\n\n    this.driver.log(msg)\n  }\n\n  private static buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message()\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText))\n\n    return msg\n  }\n}\n\nexport default Logger\n"],"file":"Logger.js"}