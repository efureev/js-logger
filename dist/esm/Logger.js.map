{"version":3,"file":"Logger.js","names":["ConsoleBufferDriver","DEBUG","ERROR","INFO","LOG_ALL","stringToLevel","TRACE","Message","MessageBlock","isEmptyObject","isObject","isString","Logger","logLevel","constructor","driver","colors","level","setLogLevel","addLogLevel","excludeLogLevel","getDriver","setDriver","enableDebug","printFragmented","debugFn","originDriver","print","disableDebug","undefined","returnResult","getColors","shouldLog","log","msgText","prefix","offset","buildMessage","info","msg","debug","error","Error","stack","lines","split","groupCollapsed","listLogFn","forEach","line","performLines","groupEnd","trace","panel","panelText","bgColor","color","Object","create","baseText","instance","pushBlock","background","offsetLeft","borderRadius","padding","panels","blockConfigs","length","blocks","blockConfig","push","block","offsetRight"],"sources":["../../src/Logger.ts"],"sourcesContent":["import { LoggerDriver } from './drivers/LoggerDriver'\nimport ConsoleBufferDriver from './drivers/ConsoleBufferDriver'\nimport type { LevelType } from './LogLevel'\nimport { DEBUG, ERROR, INFO, LOG_ALL, StringLevelType, stringToLevel, TRACE } from './LogLevel'\nimport Message from './Message'\nimport type { MessageBlockConfig } from './MessageBlock'\nimport MessageBlock from './MessageBlock'\nimport { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\nimport { isEmptyObject, isObject, isString } from './utils'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  colors: ColorCollection\n  level?: StringLevelType\n}\n\ninterface PanelOptions {\n  bgColor?: ColorValue | string\n  color?: ColorValue | string\n  offset?: number\n}\n\nexport type BlockPanel = string | MessageBlockConfig | MessageBlock\n\nclass Logger {\n  private driver: LoggerDriver\n  private originDriver?: LoggerDriver\n  private readonly colors: ColorCollection\n\n  private logLevel: LevelType = LOG_ALL\n\n  constructor({ driver, colors, level }: LoggerConfig) {\n    this.driver = driver\n    this.colors = colors\n\n    if (level) {\n      if (typeof level === 'string') {\n        this.logLevel = stringToLevel(level)\n      } else {\n        this.logLevel = level\n      }\n    }\n  }\n\n  setLogLevel(level: LevelType): void {\n    this.logLevel = level\n  }\n\n  addLogLevel(level: LevelType): void {\n    this.logLevel |= level\n  }\n\n  excludeLogLevel(level: LevelType): void {\n    this.logLevel ^= level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  public setDriver(driver: LoggerDriver): this {\n    this.driver = driver\n\n    return this\n  }\n\n  public enableDebug({ printFragmented, debugFn }: { printFragmented?: boolean; debugFn?: Function } = {}): this {\n    this.originDriver = this.driver\n    this.driver = new ConsoleBufferDriver({ print: true, printFragmented, debugFn })\n\n    return this\n  }\n\n  public disableDebug(): this {\n    if (this.originDriver) {\n      this.setDriver(this.originDriver)\n      this.originDriver = undefined\n    }\n\n    return this\n  }\n\n  public returnResult(): this {\n    this.driver.returnResult()\n\n    return this\n  }\n\n  public getColors(): ColorCollection {\n    return this.colors\n  }\n\n  private shouldLog(level: StringLevelType): boolean {\n    if (typeof level === 'string') {\n      level = stringToLevel(level)\n    }\n\n    return (this.logLevel & level) !== 0\n  }\n\n  log(msgText: Message | BlockPanel, prefix?: BlockPanel, offset = 0): string[] | void {\n    return this.driver.log(this.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: Message | BlockPanel, prefix?: BlockPanel, offset = 0): string[] | void {\n    if (!this.shouldLog(INFO)) {\n      return\n    }\n\n    const msg = this.buildMessage(msgText, prefix, offset)\n\n    return this.driver.info(msg)\n  }\n\n  debug(msgText: Message | BlockPanel, prefix?: BlockPanel, offset = 0): string[] | void {\n    if (!this.shouldLog(DEBUG)) {\n      return\n    }\n\n    return this.driver.debug(this.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: Message | BlockPanel, prefix?: BlockPanel, error?: Error, offset = 0): string[] | void {\n    if (!this.shouldLog(ERROR)) {\n      return\n    }\n\n    if (error instanceof Error && error.stack && isString(error.stack)) {\n      const lines = error.stack.split('\\n')\n      this.groupCollapsed(this.buildMessage(msgText, prefix, offset), lines)\n      return\n    }\n\n    return this.driver.error(this.buildMessage(msgText, prefix, offset))\n  }\n\n  groupCollapsed(msgText: Message | BlockPanel, lines: string[] = [], listLogFn: string = 'log'): void {\n    this.driver.groupCollapsed(this.buildMessage(msgText))\n\n    lines.forEach(line => {\n      this.driver.performLines([line], listLogFn)\n    })\n\n    this.driver.groupEnd()\n  }\n\n  trace(msgText: Message | BlockPanel, prefix?: BlockPanel, offset = 0): string[] | void {\n    if (!this.shouldLog(TRACE)) {\n      return\n    }\n\n    return this.driver.trace(this.buildMessage(msgText, prefix, offset))\n  }\n\n  /**\n   * @deprecated\n   * @use panels\n   */\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor, color, offset }: PanelOptions = Object.create(null),\n    baseText?: string | MessageBlock,\n    logLevel?: StringLevelType\n  ): string[] | void {\n    if (logLevel && !this.shouldLog(logLevel)) {\n      return\n    }\n\n    const msg = Message.instance(undefined, this.colors).pushBlock(\n      MessageBlock.instance(panelText, { colors: this.colors })\n        .background(bgColor || 'white')\n        .color(color || 'gray')\n        .offsetLeft(offset || 0)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText, { colors: this.colors }).offsetLeft(1) : null\n    )\n\n    return this.driver.log(msg)\n  }\n\n  panels(logLevel?: StringLevelType, ...blockConfigs: BlockPanel[]): string[] | void {\n    if (!blockConfigs.length || (logLevel && !this.shouldLog(logLevel))) {\n      return\n    }\n\n    const blocks: MessageBlock[] = []\n    blockConfigs.forEach(blockConfig => {\n      if ((isString(blockConfig) && blockConfig !== '') || (isObject(blockConfig) && !isEmptyObject(blockConfig))) {\n        blocks.push(MessageBlock.instance(blockConfig, { colors: this.colors }))\n      }\n    })\n\n    if (!blocks.length) {\n      return\n    }\n\n    const msg = Message.instance().pushBlock(...blocks)\n\n    return this.driver.log(msg)\n  }\n\n  private buildMessage(msgText: Message | BlockPanel, prefix?: BlockPanel, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message(undefined, this.colors)\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix, { colors: this.colors }).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText, { colors: this.colors }))\n\n    return msg\n  }\n}\n\nexport default Logger\n"],"mappings":"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"}