{"version":3,"file":"Logger.js","names":["ConsoleBufferDriver","DEBUG","ERROR","INFO","LOG_ALL","stringToLevel","TRACE","Message","MessageBlock","Logger","logLevel","constructor","driver","colors","level","setLogLevel","addLogLevel","excludeLogLevel","getDriver","setDriver","enableDebug","printFragmented","debugFn","originDriver","print","disableDebug","undefined","getColors","shouldLog","log","msgText","prefix","offset","buildMessage","info","msg","debug","error","trace","panel","panelText","bgColor","color","Object","create","baseText","instance","pushBlock","background","offsetLeft","borderRadius","padding","panels","blockConfigs","length","blocks","forEach","blockConfig","push","block","offsetRight"],"sources":["../../src/Logger.ts"],"sourcesContent":["import { LoggerDriver } from './drivers/LoggerDriver'\nimport ConsoleBufferDriver from './drivers/ConsoleBufferDriver'\nimport type { LevelType } from './LogLevel'\nimport { DEBUG, ERROR, INFO, LOG_ALL, StringLevelType, stringToLevel, TRACE } from './LogLevel'\nimport Message from './Message'\nimport type { MessageBlockConfig } from './MessageBlock'\nimport MessageBlock from './MessageBlock'\nimport { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  colors: ColorCollection\n  level?: StringLevelType\n}\n\ninterface PanelOptions {\n  bgColor?: ColorValue | string\n  color?: ColorValue | string\n  offset?: number\n}\n\ntype BlockPanel = string | MessageBlockConfig | MessageBlock\n\nclass Logger {\n  private driver: LoggerDriver\n  private originDriver?: LoggerDriver\n  private readonly colors: ColorCollection\n\n  private logLevel: LevelType = LOG_ALL\n\n  constructor({ driver, colors, level }: LoggerConfig) {\n    this.driver = driver\n    this.colors = colors\n\n    if (level) {\n      if (typeof level === 'string') {\n        this.logLevel = stringToLevel(level)\n      } else {\n        this.logLevel = level\n      }\n    }\n  }\n\n  setLogLevel(level: LevelType): void {\n    this.logLevel = level\n  }\n\n  addLogLevel(level: LevelType): void {\n    this.logLevel |= level\n  }\n\n  excludeLogLevel(level: LevelType): void {\n    this.logLevel ^= level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  public setDriver(driver: LoggerDriver): this {\n    this.driver = driver\n\n    return this\n  }\n\n  public enableDebug({ printFragmented, debugFn }: { printFragmented?: boolean; debugFn?: Function } = {}): this {\n    this.originDriver = this.driver\n    this.driver = new ConsoleBufferDriver({ print: true, printFragmented, debugFn })\n\n    return this\n  }\n\n  public disableDebug(): this {\n    if (this.originDriver) {\n      this.setDriver(this.originDriver)\n      this.originDriver = undefined\n    }\n\n    return this\n  }\n\n  public getColors(): ColorCollection {\n    return this.colors\n  }\n\n  private shouldLog(level: StringLevelType): boolean {\n    if (typeof level === 'string') {\n      level = stringToLevel(level)\n    }\n\n    return (this.logLevel & level) !== 0\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(this.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(INFO)) {\n      return\n    }\n\n    const msg = this.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(DEBUG)) {\n      return\n    }\n\n    this.driver.debug(this.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(ERROR)) {\n      return\n    }\n\n    this.driver.error(this.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(TRACE)) {\n      return\n    }\n\n    this.driver.trace(this.buildMessage(msgText, prefix, offset))\n  }\n\n  /**\n   * @deprecated\n   * @use panels\n   */\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor, color, offset }: PanelOptions = Object.create(null),\n    baseText?: string | MessageBlock,\n    logLevel?: StringLevelType\n  ) {\n    if (logLevel && !this.shouldLog(logLevel)) {\n      return\n    }\n\n    const msg = Message.instance(undefined, this.colors).pushBlock(\n      MessageBlock.instance(panelText, { colors: this.colors })\n        .background(bgColor || 'white')\n        .color(color || 'gray')\n        .offsetLeft(offset || 0)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText, { colors: this.colors }).offsetLeft(1) : null\n    )\n\n    this.driver.log(msg)\n  }\n\n  panels(logLevel?: StringLevelType, ...blockConfigs: BlockPanel[]) {\n    if (!blockConfigs.length || (logLevel && !this.shouldLog(logLevel))) {\n      return\n    }\n\n    const blocks: MessageBlock[] = []\n    blockConfigs.forEach(blockConfig => {\n      blocks.push(MessageBlock.instance(blockConfig, { colors: this.colors }))\n    })\n\n    const msg = Message.instance().pushBlock(...blocks)\n\n    this.driver.log(msg)\n  }\n\n  private buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message(undefined, this.colors)\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix, { colors: this.colors }).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText, { colors: this.colors }))\n\n    return msg\n  }\n}\n\nexport default Logger\n"],"mappings":"AACA,OAAOA,mBAAP,MAAgC,+BAAhC;AAEA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,OAA7B,EAAuDC,aAAvD,EAAsEC,KAAtE,QAAmF,YAAnF;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;;AAkBA,MAAMC,MAAN,CAAa;EAKHC,QAAQ,GAAcN,OAAd;;EAEhBO,WAAW,CAAC;IAAEC,MAAF;IAAUC,MAAV;IAAkBC;EAAlB,CAAD,EAA0C;IACnD,KAAKF,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;;IAEA,IAAIC,KAAJ,EAAW;MACT,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;QAC7B,KAAKJ,QAAL,GAAgBL,aAAa,CAACS,KAAD,CAA7B;MACD,CAFD,MAEO;QACL,KAAKJ,QAAL,GAAgBI,KAAhB;MACD;IACF;EACF;;EAEDC,WAAW,CAACD,KAAD,EAAyB;IAClC,KAAKJ,QAAL,GAAgBI,KAAhB;EACD;;EAEDE,WAAW,CAACF,KAAD,EAAyB;IAClC,KAAKJ,QAAL,IAAiBI,KAAjB;EACD;;EAEDG,eAAe,CAACH,KAAD,EAAyB;IACtC,KAAKJ,QAAL,IAAiBI,KAAjB;EACD;;EAEMI,SAAS,GAAiB;IAC/B,OAAO,KAAKN,MAAZ;EACD;;EAEMO,SAAS,CAACP,MAAD,EAA6B;IAC3C,KAAKA,MAAL,GAAcA,MAAd;IAEA,OAAO,IAAP;EACD;;EAEMQ,WAAW,CAAC;IAAEC,eAAF;IAAmBC;EAAnB,IAAkF,EAAnF,EAA6F;IAC7G,KAAKC,YAAL,GAAoB,KAAKX,MAAzB;IACA,KAAKA,MAAL,GAAc,IAAIZ,mBAAJ,CAAwB;MAAEwB,KAAK,EAAE,IAAT;MAAeH,eAAf;MAAgCC;IAAhC,CAAxB,CAAd;IAEA,OAAO,IAAP;EACD;;EAEMG,YAAY,GAAS;IAC1B,IAAI,KAAKF,YAAT,EAAuB;MACrB,KAAKJ,SAAL,CAAe,KAAKI,YAApB;MACA,KAAKA,YAAL,GAAoBG,SAApB;IACD;;IAED,OAAO,IAAP;EACD;;EAEMC,SAAS,GAAoB;IAClC,OAAO,KAAKd,MAAZ;EACD;;EAEOe,SAAS,CAACd,KAAD,EAAkC;IACjD,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7BA,KAAK,GAAGT,aAAa,CAACS,KAAD,CAArB;IACD;;IAED,OAAO,CAAC,KAAKJ,QAAL,GAAgBI,KAAjB,MAA4B,CAAnC;EACD;;EAEDe,GAAG,CAACC,OAAD,EAA2CC,MAA3C,EAA4DC,MAAM,GAAG,CAArE,EAA8E;IAC/E,KAAKpB,MAAL,CAAYiB,GAAZ,CAAgB,KAAKI,YAAL,CAAkBH,OAAlB,EAA2BC,MAA3B,EAAmCC,MAAnC,CAAhB;EACD;;EAEDE,IAAI,CAACJ,OAAD,EAA2CC,MAA3C,EAA4DC,MAAM,GAAG,CAArE,EAA8E;IAChF,IAAI,CAAC,KAAKJ,SAAL,CAAezB,IAAf,CAAL,EAA2B;MACzB;IACD;;IAED,MAAMgC,GAAG,GAAG,KAAKF,YAAL,CAAkBH,OAAlB,EAA2BC,MAA3B,EAAmCC,MAAnC,CAAZ;IAEA,KAAKpB,MAAL,CAAYsB,IAAZ,CAAiBC,GAAjB;EACD;;EAEDC,KAAK,CAACN,OAAD,EAA2CC,MAA3C,EAA4DC,MAAM,GAAG,CAArE,EAAwE;IAC3E,IAAI,CAAC,KAAKJ,SAAL,CAAe3B,KAAf,CAAL,EAA4B;MAC1B;IACD;;IAED,KAAKW,MAAL,CAAYwB,KAAZ,CAAkB,KAAKH,YAAL,CAAkBH,OAAlB,EAA2BC,MAA3B,EAAmCC,MAAnC,CAAlB;EACD;;EAEDK,KAAK,CAACP,OAAD,EAA2CC,MAA3C,EAA4DC,MAAM,GAAG,CAArE,EAAwE;IAC3E,IAAI,CAAC,KAAKJ,SAAL,CAAe1B,KAAf,CAAL,EAA4B;MAC1B;IACD;;IAED,KAAKU,MAAL,CAAYyB,KAAZ,CAAkB,KAAKJ,YAAL,CAAkBH,OAAlB,EAA2BC,MAA3B,EAAmCC,MAAnC,CAAlB;EACD;;EAEDM,KAAK,CAACR,OAAD,EAA2CC,MAA3C,EAA4DC,MAAM,GAAG,CAArE,EAAwE;IAC3E,IAAI,CAAC,KAAKJ,SAAL,CAAetB,KAAf,CAAL,EAA4B;MAC1B;IACD;;IAED,KAAKM,MAAL,CAAY0B,KAAZ,CAAkB,KAAKL,YAAL,CAAkBH,OAAlB,EAA2BC,MAA3B,EAAmCC,MAAnC,CAAlB;EACD;EAED;AACF;AACA;AACA;;;EACEO,KAAK,CACHC,SADG,EAEH;IAAEC,OAAF;IAAWC,KAAX;IAAkBV;EAAlB,IAA2CW,MAAM,CAACC,MAAP,CAAc,IAAd,CAFxC,EAGHC,QAHG,EAIHnC,QAJG,EAKH;IACA,IAAIA,QAAQ,IAAI,CAAC,KAAKkB,SAAL,CAAelB,QAAf,CAAjB,EAA2C;MACzC;IACD;;IAED,MAAMyB,GAAG,GAAG5B,OAAO,CAACuC,QAAR,CAAiBpB,SAAjB,EAA4B,KAAKb,MAAjC,EAAyCkC,SAAzC,CACVvC,YAAY,CAACsC,QAAb,CAAsBN,SAAtB,EAAiC;MAAE3B,MAAM,EAAE,KAAKA;IAAf,CAAjC,EACGmC,UADH,CACcP,OAAO,IAAI,OADzB,EAEGC,KAFH,CAESA,KAAK,IAAI,MAFlB,EAGGO,UAHH,CAGcjB,MAAM,IAAI,CAHxB,EAIGkB,YAJH,CAIgB,CAJhB,EAKGC,OALH,CAKW,CALX,EAKc,CALd,CADU,EAQVN,QAAQ,GAAGrC,YAAY,CAACsC,QAAb,CAAsBD,QAAtB,EAAgC;MAAEhC,MAAM,EAAE,KAAKA;IAAf,CAAhC,EAAyDoC,UAAzD,CAAoE,CAApE,CAAH,GAA4E,IAR1E,CAAZ;IAWA,KAAKrC,MAAL,CAAYiB,GAAZ,CAAgBM,GAAhB;EACD;;EAEDiB,MAAM,CAAC1C,QAAD,EAA6B,GAAG2C,YAAhC,EAA4D;IAChE,IAAI,CAACA,YAAY,CAACC,MAAd,IAAyB5C,QAAQ,IAAI,CAAC,KAAKkB,SAAL,CAAelB,QAAf,CAA1C,EAAqE;MACnE;IACD;;IAED,MAAM6C,MAAsB,GAAG,EAA/B;IACAF,YAAY,CAACG,OAAb,CAAqBC,WAAW,IAAI;MAClCF,MAAM,CAACG,IAAP,CAAYlD,YAAY,CAACsC,QAAb,CAAsBW,WAAtB,EAAmC;QAAE5C,MAAM,EAAE,KAAKA;MAAf,CAAnC,CAAZ;IACD,CAFD;IAIA,MAAMsB,GAAG,GAAG5B,OAAO,CAACuC,QAAR,GAAmBC,SAAnB,CAA6B,GAAGQ,MAAhC,CAAZ;IAEA,KAAK3C,MAAL,CAAYiB,GAAZ,CAAgBM,GAAhB;EACD;;EAEOF,YAAY,CAACH,OAAD,EAA2CC,MAA3C,EAA4DC,MAAc,GAAG,CAA7E,EAAyF;IAC3G,IAAIF,OAAO,YAAYvB,OAAvB,EAAgC;MAC9B,OAAOuB,OAAP;IACD;;IAED,MAAMK,GAAG,GAAG,IAAI5B,OAAJ,CAAYmB,SAAZ,EAAuB,KAAKb,MAA5B,CAAZ;;IAEA,IAAIkB,MAAJ,EAAY;MACV,MAAM4B,KAAK,GAAGnD,YAAY,CAACsC,QAAb,CAAsBf,MAAtB,EAA8B;QAAElB,MAAM,EAAE,KAAKA;MAAf,CAA9B,EAAuD+C,WAAvD,CAAmE,CAAnE,CAAd;;MAEA,IAAI5B,MAAJ,EAAY;QACV2B,KAAK,CAACV,UAAN,CAAiBjB,MAAjB;MACD;;MAEDG,GAAG,CAACY,SAAJ,CAAcY,KAAd;IACD;;IAEDxB,GAAG,CAACY,SAAJ,CAAcvC,YAAY,CAACsC,QAAb,CAAsBhB,OAAtB,EAA+B;MAAEjB,MAAM,EAAE,KAAKA;IAAf,CAA/B,CAAd;IAEA,OAAOsB,GAAP;EACD;;AA3KU;;AA8Kb,eAAe1B,MAAf"}