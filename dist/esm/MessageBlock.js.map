{"version":3,"sources":["../../src/MessageBlock.ts"],"names":["isEmptyObject","MessageBlock","style","Object","constructor","text","_text","push","key","value","color","background","marginLeft","paddingLeft","getText","getStyle","hasStyle","clearStyle","toJSON","JSON","stringify","instance","block"],"mappings":"AAAA,SAASA,aAAT,QAA8B,SAA9B;;AASA,MAAMC,YAAN,CAAmB;AAETC,EAAAA,KAAK,GAAsB,IAAIC,MAAJ,CAAW,IAAX,CAAtB;;AAEbC,EAAAA,WAAW,CAACC,IAAD,EAAe;AACxB,SAAKC,KAAL,GAAaD,IAAb,CADwB,CAExB;AACD;;AAEDE,EAAAA,IAAI,CAACC,GAAD,EAAcC,KAAd,EAAmC;AACrC,SAAKP,KAAL,CAAWM,GAAX,IAAkBC,KAAlB;AAEA,WAAO,IAAP;AACD;;AAEDC,EAAAA,KAAK,CAACD,KAAD,EAAsB;AACzB,WAAO,KAAKF,IAAL,CAAU,OAAV,EAAmBE,KAAnB,CAAP;AACD;;AAEDE,EAAAA,UAAU,CAACF,KAAD,EAAsB;AAC9B,WAAO,KAAKF,IAAL,CAAU,YAAV,EAAwBE,KAAxB,CAAP;AACD;;AAEDG,EAAAA,UAAU,CAACH,KAAD,EAAsB;AAC9B,WAAO,KAAKF,IAAL,CAAU,aAAV,EAA0B,GAAEE,KAAM,IAAlC,CAAP;AACD;;AAEDI,EAAAA,WAAW,CAACJ,KAAD,EAAsB;AAC/B,WAAO,KAAKG,UAAL,CAAgBH,KAAK,GAAG,EAAxB,CAAP;AACD;;AAEDJ,EAAAA,IAAI,CAACI,KAAD,EAAsB;AACxB,SAAKH,KAAL,GAAaG,KAAb;AAEA,WAAO,IAAP;AACD;;AAEDK,EAAAA,OAAO,GAAW;AAChB,WAAO,KAAKR,KAAZ;AACD;;AAEDS,EAAAA,QAAQ,GAAsB;AAC5B,WAAO,KAAKb,KAAZ;AACD;;AAEDc,EAAAA,QAAQ,GAAY;AAClB,WAAO,CAAChB,aAAa,CAAC,KAAKE,KAAN,CAArB;AACD;;AAEDe,EAAAA,UAAU,GAAS;AACjB,SAAKf,KAAL,GAAa,IAAIC,MAAJ,CAAW,IAAX,CAAb;AAEA,WAAO,IAAP;AACD;;AAEDe,EAAAA,MAAM,GAAW;AACf,WAAOC,IAAI,CAACC,SAAL,CAAe;AACpBd,MAAAA,KAAK,EAAE,KAAKA,KADQ;AAEpBJ,MAAAA,KAAK,EAAE,KAAKA;AAFQ,KAAf,CAAP;AAID;;AAEc,SAARmB,QAAQ,CAACC,KAAD,EAA6C;AAC1D,WAAOA,KAAK,YAAYrB,YAAjB,GAAgCqB,KAAhC,GAAwC,IAAIrB,YAAJ,CAAiBqB,KAAjB,CAA/C;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA7FmB;;AAmGnB,eAAerB,YAAf","sourcesContent":["import { isEmptyObject } from './utils'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: string\n  background?: string\n}\n\nclass MessageBlock {\n  private _text: string\n  private style: MessageBlockStyle = new Object(null)\n\n  constructor(text: string) {\n    this._text = text\n    // this.parse(block)\n  }\n\n  push(key: string, value: string): this {\n    this.style[key] = value\n\n    return this\n  }\n\n  color(value: string): this {\n    return this.push('color', value)\n  }\n\n  background(value: string): this {\n    return this.push('background', value)\n  }\n\n  marginLeft(value: number): this {\n    return this.push('margin-left', `${value}px`)\n  }\n\n  paddingLeft(value: number): this {\n    return this.marginLeft(value * 10)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = new Object(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(block: MessageBlock | string): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block)\n  }\n\n  /*  getStyleString(): string {\n      let str = ''\n\n      for (const key in this.style) {\n        const v = this.style[key]\n\n        str += `${key}:${v};`\n      }\n\n      return str\n    }*/\n\n  /*\n    parse(block) {\n      if (isString(block)) {\n        this.text = block\n        return\n      }\n\n      if (isObject(block)) {\n        if (!block.text) {\n          throw new Error('Invalid MessageBlock config')\n        }\n\n        this.text = block.text\n        // this.style = block.type || null\n        return\n      }\n\n      throw new Error('Invalid MessageBlock config')\n    }*/\n}\n\nexport default MessageBlock\n"],"file":"MessageBlock.js"}