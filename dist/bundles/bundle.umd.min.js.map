{"version":3,"file":"bundle.umd.min.js","sources":["../../src/drivers/ConsoleDriver/index.ts","../../src/drivers/ConsoleBufferDriver/index.ts","../../src/LogLevel.ts","../../src/utils.ts","../../src/MessageBlock.ts","../../src/Message.ts","../../src/Logger.ts","../../src/Color.ts","../../src/ColorCollection.ts","../../src/shorcuts.ts"],"sourcesContent":["import Message from '../../Message'\nimport MessageBlock from '../../MessageBlock'\nimport { LoggerDriver } from '../LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  protected output = console\n\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    this.output[type](...lines)\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import ConsoleDriver from '../ConsoleDriver'\nimport Message from '../../Message'\n\nexport interface ConsoleBufferConfig {\n  print?: boolean\n  printFragmented?: boolean\n  debugFn?: Function\n}\n\nexport default class ConsoleBuffer extends ConsoleDriver {\n  private readonly print: boolean = false\n  private readonly printFragmented: boolean = false\n  private readonly debugFn: Function\n\n  constructor({ print, printFragmented, debugFn }: ConsoleBufferConfig = {}) {\n    super()\n    this.print = print || false\n    this.printFragmented = printFragmented || false\n    this.debugFn = debugFn || this.output.dir\n  }\n\n  public buffer: string[] = []\n\n  protected perform(msg: Message, type: string) {\n    this.buffer = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n    if (this.print) {\n      this.output.warn('--[debug] start')\n      super.perform(msg, type)\n      this.debugFn(this.buffer)\n      if (this.printFragmented) {\n        this.performFragmented()\n      }\n      this.output.warn('--[debug] finish')\n    }\n  }\n\n  private performFragmented() {\n    if (!this.buffer.length) {\n      return\n    }\n\n    const fragments = this.buffer[0].split('%c').slice(1)\n    const styles = this.buffer.slice(1)\n\n    if (fragments.length != styles.length) {\n      this.output.error('data inconsistency error: fragments: %d, styles: %d', fragments.length, styles.length)\n      this.output.log('fragments', fragments)\n      this.output.log('styles', styles)\n    }\n\n    fragments.forEach((fragment, idx) => {\n      this.output.log(`${fragment}: ${styles[idx]}`)\n      this.output.log(`%c${fragment}`, styles[idx])\n    })\n  }\n\n  public clearBuffer() {\n    this.buffer = []\n  }\n}\n","export type LevelType = number\nexport type StringLevelType = LevelType | string\n\nexport const ERROR: LevelType = 1\nexport const INFO: LevelType = 2\nexport const DEBUG: LevelType = 4\nexport const TRACE: LevelType = 8\n\nexport const LEVEL_ERROR: LevelType = ERROR\nexport const LEVEL_INFO: LevelType = LEVEL_ERROR | INFO\nexport const LEVEL_DEBUG: LevelType = LEVEL_INFO | DEBUG\nexport const LEVEL_TRACE: LevelType = LEVEL_DEBUG | TRACE\nexport const LOG_ALL: LevelType = LEVEL_TRACE\n\nexport const ERROR_STR = 'error'\nexport const INFO_STR = 'info'\nexport const DEBUG_STR = 'debug'\nexport const TRACE_STR = 'trace'\n\nexport const LEVEL_INFO_STR = 'levelInfo'\nexport const LEVEL_DEBUG_STR = 'levelDebug'\n\nexport function stringToLevel(value: string): LevelType {\n  switch (value) {\n    case ERROR_STR:\n      return ERROR\n    case INFO_STR:\n      return INFO\n    case DEBUG_STR:\n      return DEBUG\n    case TRACE_STR:\n      return TRACE\n\n    case LEVEL_INFO_STR:\n      return LEVEL_INFO\n    case LEVEL_DEBUG_STR:\n      return LEVEL_DEBUG\n  }\n\n  return LOG_ALL\n}\n\nexport default {\n  ERROR,\n  INFO,\n  DEBUG,\n  TRACE,\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n  LOG_ALL,\n}\n","// export const isString = (str: any) => typeof str !== 'string'\n\nimport { BlockPanel } from './Logger'\n\nexport const isEmptyObject = (object: object | BlockPanel) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n\nexport const isString = (value: any) => typeof value === 'string'\n\nexport const isObject: (v: any) => boolean =\n  Object.prototype.toString.call(null) === '[object Object]'\n    ? function (value: any): boolean {\n        // check ownerDocument here as well to exclude DOM nodes\n        return (\n          value != null &&\n          Object.prototype.toString.call(value) === '[object Object]' &&\n          value.ownerDocument === undefined\n        )\n      }\n    : function (value: any): boolean {\n        return Object.prototype.toString.call(value) === '[object Object]'\n      }\n","import { isEmptyObject } from './utils'\nimport type { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: ColorValue\n  background?: ColorValue\n}\n\ninterface MessageBlockOptions {\n  colors?: ColorCollection\n}\n\nexport interface MessageBlockConfig {\n  text: string\n  bgColor?: ColorValue | string\n  bold?: boolean\n  borderRadius?: number\n  color?: ColorValue | string\n  fontSize?: number\n  italic?: boolean\n  lineHeight?: number\n  offsetLeft?: number\n  offsetRight?: number\n  marginTop?: number\n  marginBottom?: number\n  padding?: number | [number, number]\n}\n\nclass MessageBlock {\n  private _text?: string\n  private readonly colors?: ColorCollection\n  private style: MessageBlockStyle = Object.create(null)\n\n  constructor(text: string | MessageBlockConfig, { colors }: MessageBlockOptions = Object.create(null)) {\n    this.colors = colors\n    if (text === undefined) {\n      throw Error('Invalid `text` argument for MessageBlock')\n    }\n\n    if (typeof text === 'string') {\n      this._text = text\n    } else {\n      this.fillFromConfig(text)\n    }\n  }\n\n  push(key: string, value?: string, check: boolean = false): this {\n    if (value !== undefined && (!check || !this.has('color'))) {\n      this.style[key] = value\n    }\n\n    return this\n  }\n\n  has(key: string): boolean {\n    return this.style[key] !== undefined\n  }\n\n  color(value?: string, check: boolean = false): this {\n    return this.push('color', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  background(value?: string, check: boolean = false): this {\n    return this.push('background', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  marginLeft(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-left', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginRight(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-right', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginTop(value: number, check: boolean = false): this {\n    return this.push('margin-top', `${value}px`, check)\n  }\n\n  marginBottom(value: number, check: boolean = false): this {\n    return this.push('margin-bottom', `${value}px`, check)\n  }\n\n  margin(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('margin', value, check)\n  }\n\n  padding(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('padding', value, check)\n  }\n\n  offsetLeft(value: number, check: boolean = false): this {\n    return this.marginLeft(value * 10, check)\n  }\n\n  offsetRight(value: number, check: boolean = false): this {\n    return this.marginRight(value * 10, check)\n  }\n\n  borderRadius(value: number, check: boolean = false): this {\n    return this.push('border-radius', `${value}px`, check)\n  }\n\n  border(width: number, style: string, color: ColorValue, check: boolean = false): this {\n    return this.push('border', `${width}px ${style} ${color}`, check)\n  }\n\n  size(value: number, check: boolean = false): this {\n    return this.push('font-size', `${value}px`, check)\n  }\n\n  bold(check: boolean = false): this {\n    return this.push('font-weight', 'bold', check)\n  }\n\n  italic(check: boolean = false): this {\n    return this.push('font-style', 'italic', check)\n  }\n\n  lineHeight(value: number, check: boolean = false): this {\n    return this.push('line-height', `${value}px`, check)\n  }\n\n  width(value?: number, check: boolean = false): this {\n    return value ? this.push('width', `${value}px`, check) : this\n  }\n\n  height(value?: number, check: boolean = false): this {\n    return value ? this.push('height', `${value}px`, check) : this\n  }\n\n  image(url: string, width?: number, height?: number): this {\n    return this.push('background-image', `url(${url}}`).push('background-size', `cover`).width(width).height(height)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text || ''\n  }\n\n  fillFromConfig(config: MessageBlockConfig) {\n    this.text(config.text).background(config.bgColor).color(config.color)\n\n    config.offsetLeft && this.offsetLeft(config.offsetLeft)\n    config.offsetRight && this.offsetRight(config.offsetRight)\n    config.borderRadius && this.borderRadius(config.borderRadius)\n    config.bold && this.bold()\n    config.italic && this.italic()\n    config.fontSize && this.size(config.fontSize)\n    config.lineHeight && this.lineHeight(config.lineHeight)\n    config.marginBottom && this.marginBottom(config.marginBottom)\n    config.marginTop && this.marginTop(config.marginTop)\n\n    if (config.padding) {\n      if (Array.isArray(config.padding)) {\n        this.padding(config.padding[0], config.padding[1])\n      } else {\n        this.padding(config.padding)\n      }\n    }\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = Object.create(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(\n    block: MessageBlock | MessageBlockConfig | string,\n    options: MessageBlockOptions = Object.create(null)\n  ): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block, options)\n  }\n}\n\nexport default MessageBlock\n","import MessageBlock from './MessageBlock'\nimport ColorCollection from './ColorCollection'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string, colors?: ColorCollection) {\n    this.parse(text, colors)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(...args: (MessageBlock | null)[]): this {\n    args.forEach(block => {\n      if (block instanceof MessageBlock) {\n        this.blocks.push(block)\n      }\n    })\n\n    return this\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock, colors?: ColorCollection): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text, { colors }))\n    }\n  }\n\n  static instance(block?: Message | MessageBlock | string, colors?: ColorCollection): Message {\n    return block instanceof Message ? block : new Message(block, colors)\n  }\n}\n\nexport default Message\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport ConsoleBufferDriver from './drivers/ConsoleBufferDriver'\nimport type { LevelType } from './LogLevel'\nimport { DEBUG, ERROR, INFO, LOG_ALL, StringLevelType, stringToLevel, TRACE } from './LogLevel'\nimport Message from './Message'\nimport type { MessageBlockConfig } from './MessageBlock'\nimport MessageBlock from './MessageBlock'\nimport { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\nimport { isEmptyObject, isObject, isString } from './utils'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  colors: ColorCollection\n  level?: StringLevelType\n}\n\ninterface PanelOptions {\n  bgColor?: ColorValue | string\n  color?: ColorValue | string\n  offset?: number\n}\n\nexport type BlockPanel = string | MessageBlockConfig | MessageBlock\n\nclass Logger {\n  private driver: LoggerDriver\n  private originDriver?: LoggerDriver\n  private readonly colors: ColorCollection\n\n  private logLevel: LevelType = LOG_ALL\n\n  constructor({ driver, colors, level }: LoggerConfig) {\n    this.driver = driver\n    this.colors = colors\n\n    if (level) {\n      if (typeof level === 'string') {\n        this.logLevel = stringToLevel(level)\n      } else {\n        this.logLevel = level\n      }\n    }\n  }\n\n  setLogLevel(level: LevelType): void {\n    this.logLevel = level\n  }\n\n  addLogLevel(level: LevelType): void {\n    this.logLevel |= level\n  }\n\n  excludeLogLevel(level: LevelType): void {\n    this.logLevel ^= level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  public setDriver(driver: LoggerDriver): this {\n    this.driver = driver\n\n    return this\n  }\n\n  public enableDebug({ printFragmented, debugFn }: { printFragmented?: boolean; debugFn?: Function } = {}): this {\n    this.originDriver = this.driver\n    this.driver = new ConsoleBufferDriver({ print: true, printFragmented, debugFn })\n\n    return this\n  }\n\n  public disableDebug(): this {\n    if (this.originDriver) {\n      this.setDriver(this.originDriver)\n      this.originDriver = undefined\n    }\n\n    return this\n  }\n\n  public getColors(): ColorCollection {\n    return this.colors\n  }\n\n  private shouldLog(level: StringLevelType): boolean {\n    if (typeof level === 'string') {\n      level = stringToLevel(level)\n    }\n\n    return (this.logLevel & level) !== 0\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(this.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(INFO)) {\n      return\n    }\n\n    const msg = this.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(DEBUG)) {\n      return\n    }\n\n    this.driver.debug(this.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(ERROR)) {\n      return\n    }\n\n    this.driver.error(this.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(TRACE)) {\n      return\n    }\n\n    this.driver.trace(this.buildMessage(msgText, prefix, offset))\n  }\n\n  /**\n   * @deprecated\n   * @use panels\n   */\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor, color, offset }: PanelOptions = Object.create(null),\n    baseText?: string | MessageBlock,\n    logLevel?: StringLevelType\n  ) {\n    if (logLevel && !this.shouldLog(logLevel)) {\n      return\n    }\n\n    const msg = Message.instance(undefined, this.colors).pushBlock(\n      MessageBlock.instance(panelText, { colors: this.colors })\n        .background(bgColor || 'white')\n        .color(color || 'gray')\n        .offsetLeft(offset || 0)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText, { colors: this.colors }).offsetLeft(1) : null\n    )\n\n    this.driver.log(msg)\n  }\n\n  panels(logLevel?: StringLevelType, ...blockConfigs: BlockPanel[]) {\n    if (!blockConfigs.length || (logLevel && !this.shouldLog(logLevel))) {\n      return\n    }\n\n    const blocks: MessageBlock[] = []\n    blockConfigs.forEach(blockConfig => {\n      if ((isString(blockConfig) && blockConfig !== '') || (isObject(blockConfig) && !isEmptyObject(blockConfig))) {\n        blocks.push(MessageBlock.instance(blockConfig, { colors: this.colors }))\n      }\n    })\n\n    if (!blocks.length) {\n      return\n    }\n\n    const msg = Message.instance().pushBlock(...blocks)\n\n    this.driver.log(msg)\n  }\n\n  private buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message(undefined, this.colors)\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix, { colors: this.colors }).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText, { colors: this.colors }))\n\n    return msg\n  }\n}\n\nexport default Logger\n","/*\nimport { Enumerate } from './helper-types'\n\ntype RGBDigit = Enumerate<256>\n\ntype RGB = `rgb(${RGBDigit}, ${RGBDigit}, ${number})`;\ntype RGBA = `rgba(${RGBDigit}, ${RGBDigit}, ${number}, ${number})`;\n\ntype HexDigit =\n  '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F';\n\ntype MinHexDigitColor = `${HexDigit}${HexDigit}${HexDigit}`;\ntype ShortHexColor = `#${MinHexDigitColor}`;\ntype LongHexColor = `${ShortHexColor}${MinHexDigitColor}`;\ntype HexColor = LongHexColor | ShortHexColor;\n*/\n\ntype RGB = `rgb(${number}, ${number}, ${number})`\ntype RGBA = `rgba(${number}, ${number}, ${number}, ${number})`\ntype HexColor = `#${string}`\n\nexport type ColorValue = HexColor | RGB | RGBA\ntype ColorsType = Record<string, ColorValue>\n\nconst colors: ColorsType = {\n  black: '#000000',\n  gray: '#1B2B34',\n  grayLight: '#334048',\n  red: '#ff000f',\n  redLight: '#EC5f67',\n  orange: '#F99157',\n  yellow: '#FAC863',\n  green: '#14be00',\n  greenLight: '#99C794',\n  teal: '#5FB3B3',\n  blue: '#6699CC',\n  purple: '#C594C5',\n  brown: '#AB7967',\n  white: '#FFFFFF',\n}\n\nexport default colors\n","import { ColorValue } from './Color'\n\ntype ListCollectionType = Record<string, ColorValue>\n\nexport default class ColorCollection {\n  list: ListCollectionType = {}\n\n  constructor(list?: ListCollectionType) {\n    if (list) {\n      this.setCollection(list)\n    }\n  }\n\n  set(name: string, value: ColorValue): this {\n    this.list[name] = value\n\n    return this\n  }\n\n  setCollection(colors: ListCollectionType): this {\n    Object.keys(colors).forEach(name => {\n      this.set(name, colors[name])\n    })\n\n    return this\n  }\n\n  get(name?: string): ColorValue | undefined {\n    return name ? this.list[name] : undefined\n  }\n\n  remove(name: string): this {\n    delete this.list[name]\n\n    return this\n  }\n}\n","import type { LevelType } from './LogLevel'\nimport { LOG_ALL } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\nimport ColorCollection from './ColorCollection'\nimport colors from './Color'\n\nconst BrowserLogger = (level: LevelType | string = LOG_ALL) =>\n  new Logger({\n    driver: new ConsoleDriver(),\n    colors: new ColorCollection(colors),\n    level: level,\n  })\n\nexport { BrowserLogger }\n"],"names":["ConsoleDriver","console","value","msg","this","perform","type","_this$output","lines","buildStrings","formatMessage","output","apply","_toConsumableArray","fmt","fmtStr","fmtArgs","getBlocks","forEach","block","_ConsoleDriver$format","formatBlock","str","args","push","getText","strStyle","style","getStyle","keyStyle","concat","ConsoleBuffer","_this","_ref","arguments","length","undefined","print","printFragmented","debugFn","_classCallCheck","_defineProperty","_assertThisInitialized","_super","call","dir","buffer","warn","_get","performFragmented","_this2","fragments","split","slice","styles","error","log","fragment","idx","ERROR_STR","INFO_STR","DEBUG_STR","TRACE_STR","LEVEL_INFO_STR","LEVEL_DEBUG_STR","stringToLevel","LEVEL_ERROR","LEVEL_INFO","LEVEL_DEBUG","isEmptyObject","object","_objectDestructuringEmpty","isString","isObject","Object","prototype","toString","ownerDocument","MessageBlock","text","create","colors","Error","_text","fillFromConfig","key","check","has","get","vValue","hValue","marginLeft","marginRight","width","color","url","height","config","background","bgColor","offsetLeft","offsetRight","borderRadius","bold","italic","fontSize","size","lineHeight","marginBottom","marginTop","padding","Array","isArray","JSON","stringify","options","Message","parse","blocks","_len","_key","pushBlock","instance","Logger","driver","level","logLevel","_ref2","originDriver","ConsoleBufferDriver","setDriver","msgText","prefix","offset","buildMessage","shouldLog","info","debug","trace","panelText","_ref3","baseText","_Message$instance","blockConfigs","blockConfig","black","gray","grayLight","red","redLight","orange","yellow","green","greenLight","teal","blue","purple","brown","white","ColorCollection","list","setCollection","name","keys","set"],"mappings":"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"}