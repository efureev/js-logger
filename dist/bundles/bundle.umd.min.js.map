{"version":3,"file":"bundle.umd.min.js","sources":["../../src/LogLevel.ts","../../src/MessageBlock.ts","../../src/utils.ts","../../src/Message.ts","../../src/Logger.ts","../../src/drivers/ConsoleDriver.ts","../../src/shorcuts.ts"],"sourcesContent":["export const LEVEL_ERROR: number = 1 << 0\nexport const LEVEL_INFO: number = 1 << 1\nexport const LEVEL_DEBUG: number = 1 << 2\nexport const LEVEL_TRACE: number = 1 << 3\n\nexport default {\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n}\n","import { isEmptyObject } from './utils'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: string\n  background?: string\n}\n\nclass MessageBlock {\n  private _text: string\n  private style: MessageBlockStyle = new Object(null)\n\n  constructor(text: string) {\n    this._text = text\n    // this.parse(block)\n  }\n\n  push(key: string, value: string): this {\n    this.style[key] = value\n\n    return this\n  }\n\n  color(value: string): this {\n    return this.push('color', value)\n  }\n\n  background(value: string): this {\n    return this.push('background', value)\n  }\n\n  marginLeft(value: number): this {\n    return this.push('margin-left', `${value}px`)\n  }\n\n  paddingLeft(value: number): this {\n    return this.marginLeft(value * 10)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = new Object(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(block: MessageBlock | string): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block)\n  }\n\n  /*  getStyleString(): string {\n      let str = ''\n\n      for (const key in this.style) {\n        const v = this.style[key]\n\n        str += `${key}:${v};`\n      }\n\n      return str\n    }*/\n\n  /*\n    parse(block) {\n      if (isString(block)) {\n        this.text = block\n        return\n      }\n\n      if (isObject(block)) {\n        if (!block.text) {\n          throw new Error('Invalid MessageBlock config')\n        }\n\n        this.text = block.text\n        // this.style = block.type || null\n        return\n      }\n\n      throw new Error('Invalid MessageBlock config')\n    }*/\n}\n\nexport default MessageBlock\n","export const isString = (str: any) => typeof str !== 'string'\n\nexport const isEmptyObject = (object: object) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n","import MessageBlock from './MessageBlock'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string) {\n    this.parse(text)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(block: MessageBlock): void {\n    this.blocks.push(block)\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text))\n    }\n  }\n\n  static instance(block: Message | MessageBlock | string): Message {\n    return block instanceof Message ? block : new Message(block)\n  }\n}\n\nexport default Message\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport { LEVEL_DEBUG, LEVEL_ERROR, LEVEL_INFO, LEVEL_TRACE } from './LogLevel'\nimport Message from './Message'\nimport MessageBlock from './MessageBlock'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  level?: number\n}\n\nclass Logger {\n  private readonly driver: LoggerDriver\n  private logLevel: number = LEVEL_ERROR\n\n  constructor(config: LoggerConfig) {\n    this.driver = config.driver\n    if (config.level) {\n      this.logLevel = config.level\n    }\n  }\n\n  setLevel(level: number): void {\n    this.logLevel = level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  private shouldLog(msgLevel: number) {\n    return this.logLevel <= msgLevel // @todo: bit operations\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(LEVEL_INFO)) {\n      return\n    }\n\n    const msg = Logger.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_DEBUG)) {\n      return\n    }\n\n    this.driver.debug(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_ERROR)) {\n      return\n    }\n\n    this.driver.error(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_TRACE)) {\n      return\n    }\n\n    this.driver.trace(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  private static buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message()\n\n    if (prefix) {\n      const block = new MessageBlock(prefix)\n      if (offset) {\n        block.paddingLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText))\n\n    return msg\n  }\n}\n\nexport default Logger\n","/*\nexport const STYLE_INFO = 'color: white; background:blue; padding: 2px 5px;'\nexport const STYLE_PURPLE = 'color: white; background:purple; padding: 2px 5px;'\n\nexport const map = {\n  info: STYLE_INFO,\n  purple: STYLE_PURPLE,\n}\n*/\n\nimport Message from '../Message'\nimport MessageBlock from '../MessageBlock'\nimport { LoggerDriver } from './LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    console[type](...lines)\n    // console[msg.type ?? type](res[0], ...res[1])\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    if (block.hasStyle()) {\n      fmtStr += '%c'\n\n      const style = block.getStyle()\n      let strStyle = ''\n      for (const keyStyle in style) {\n        strStyle += `${keyStyle}:${style[keyStyle]};`\n      }\n      fmtArgs.push(strStyle)\n    }\n\n    fmtStr += '%s'\n    fmtArgs.push(block.getText())\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import { LEVEL_ERROR } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\n\nconst BrowserLogger = (level: number = LEVEL_ERROR) => new Logger({ level: level, driver: new ConsoleDriver() })\n\nexport {\n  BrowserLogger,\n}\n"],"names":["MessageBlock","text","Object","_text","key","value","style","this","push","marginLeft","object","isEmptyObject","JSON","stringify","block","Message","Array","parse","blocks","length","pushBlock","instance","Logger","config","driver","level","logLevel","msgLevel","msgText","prefix","offset","log","buildMessage","shouldLog","msg","info","debug","error","trace","paddingLeft","ConsoleDriver","perform","type","lines","buildStrings","formatMessage","console","fmt","fmtStr","fmtArgs","getBlocks","forEach","formatBlock","str","args","hasStyle","getStyle","strStyle","keyStyle","getText"],"mappings":"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"}