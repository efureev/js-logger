{"version":3,"file":"bundle.umd.min.js","sources":["../../src/LogLevel.ts","../../src/MessageBlock.ts","../../src/utils.ts","../../src/Message.ts","../../src/Logger.ts","../../src/Color.ts","../../src/drivers/ConsoleDriver/index.ts","../../src/ColorCollection.ts","../../src/shorcuts.ts"],"sourcesContent":["export type LevelType = number\n\nexport const ERROR: LevelType = 1\nexport const INFO: LevelType = 2\nexport const DEBUG: LevelType = 4\nexport const TRACE: LevelType = 8\n\nexport const LEVEL_ERROR: LevelType = ERROR\nexport const LEVEL_INFO: LevelType = LEVEL_ERROR | INFO\nexport const LEVEL_DEBUG: LevelType = LEVEL_INFO | DEBUG\nexport const LEVEL_TRACE: LevelType = LEVEL_DEBUG | TRACE\nexport const LOG_ALL: LevelType = LEVEL_TRACE\n\nexport default {\n  ERROR,\n  INFO,\n  DEBUG,\n  TRACE,\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n  LOG_ALL,\n}\n","import { isEmptyObject } from './utils'\nimport type { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: ColorValue\n  background?: ColorValue\n}\n\ninterface MessageBlockOptions {\n  colors?: ColorCollection\n}\n\nclass MessageBlock {\n  private colors?: ColorCollection\n  private _text: string\n  private style: MessageBlockStyle = new Object(null)\n\n  constructor(text: string, { colors }: MessageBlockOptions = {}) {\n    this.colors = colors\n    this._text = text\n  }\n\n  push(key: string, value?: string, check: boolean = false): this {\n    if (value !== undefined && (!check || !this.has('color'))) {\n      this.style[key] = value\n    }\n\n    return this\n  }\n\n  has(key: string): boolean {\n    return this.style[key] !== undefined\n  }\n\n  color(value?: string, check: boolean = false): this {\n    return this.push('color', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  background(value?: string, check: boolean = false): this {\n    return this.push('background', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  marginLeft(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-left', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginRight(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-right', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginTop(value: number, check: boolean = false): this {\n    return this.push('margin-top', `${value}px`, check)\n  }\n\n  marginBottom(value: number, check: boolean = false): this {\n    return this.push('margin-bottom', `${value}px`, check)\n  }\n\n  margin(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('margin', value, check)\n  }\n\n  padding(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('padding', value, check)\n  }\n\n  offsetLeft(value: number, check: boolean = false): this {\n    return this.marginLeft(value * 10, check)\n  }\n\n  offsetRight(value: number, check: boolean = false): this {\n    return this.marginRight(value * 10, check)\n  }\n\n  borderRadius(value: number, check: boolean = false): this {\n    return this.push('border-radius', `${value}px`, check)\n  }\n\n  border(width: number, style: string, color: ColorValue, check: boolean = false): this {\n    return this.push('border', `${width}px ${style} ${color}`, check)\n  }\n\n  size(value: number, check: boolean = false): this {\n    return this.push('font-size', `${value}px`, check)\n  }\n\n  bold(check: boolean = false): this {\n    return this.push('font-weight', 'bold', check)\n  }\n\n  italic(check: boolean = false): this {\n    return this.push('font-style', 'italic', check)\n  }\n\n  lineHeight(value: number, check: boolean = false): this {\n    return this.push('line-height', `${value}px`, check)\n  }\n\n  width(value?: number, check: boolean = false): this {\n    return value ? this.push('width', `${value}px`, check) : this\n  }\n\n  height(value?: number, check: boolean = false): this {\n    return value ? this.push('height', `${value}px`, check) : this\n  }\n\n  image(url: string, width?: number, height?: number): this {\n    return this.push('background-image', `url(${url}}`).push('background-size', `cover`).width(width).height(height)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = new Object(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(block: MessageBlock | string, options: MessageBlockOptions = {}): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block, options)\n  }\n}\n\nexport default MessageBlock\n","// export const isString = (str: any) => typeof str !== 'string'\n\nexport const isEmptyObject = (object: object) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n","import MessageBlock from './MessageBlock'\nimport ColorCollection from './ColorCollection'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string, colors?: ColorCollection) {\n    this.parse(text, colors)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(...args: (MessageBlock | null)[]): this {\n    args.forEach(block => {\n      if (block instanceof MessageBlock) {\n        this.blocks.push(block)\n      }\n    })\n\n    return this\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock, colors?: ColorCollection): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text, { colors }))\n    }\n  }\n\n  static instance(block?: Message | MessageBlock | string, colors?: ColorCollection): Message {\n    return block instanceof Message ? block : new Message(block, colors)\n  }\n}\n\nexport default Message\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport type { LevelType } from './LogLevel'\nimport { DEBUG, ERROR, INFO, LOG_ALL, TRACE } from './LogLevel'\nimport Message from './Message'\nimport MessageBlock from './MessageBlock'\nimport { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  colors: ColorCollection\n  level?: LevelType\n}\n\ninterface PanelOptions {\n  bgColor?: ColorValue\n  color?: ColorValue\n  offset?: number\n}\n\nclass Logger {\n  private readonly driver: LoggerDriver\n  private readonly colors: ColorCollection\n\n  private logLevel: LevelType = LOG_ALL\n\n  constructor({ driver, colors, level }: LoggerConfig) {\n    this.driver = driver\n    this.colors = colors\n\n    if (level) {\n      this.logLevel = level\n    }\n  }\n\n  setLevel(level: LevelType): void {\n    this.logLevel = level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  public getColors(): ColorCollection {\n    return this.colors\n  }\n\n  private shouldLog(msgLevel: number): boolean {\n    return (this.logLevel & msgLevel) !== 0\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(this.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(INFO)) {\n      return\n    }\n\n    const msg = this.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(DEBUG)) {\n      return\n    }\n\n    this.driver.debug(this.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(ERROR)) {\n      return\n    }\n\n    this.driver.error(this.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(TRACE)) {\n      return\n    }\n\n    this.driver.trace(this.buildMessage(msgText, prefix, offset))\n  }\n\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor, color, offset }: PanelOptions = {},\n    baseText?: string | MessageBlock\n  ) {\n    const msg = Message.instance(undefined, this.colors).pushBlock(\n      MessageBlock.instance(panelText, { colors: this.colors })\n        .background(bgColor || 'white')\n        .color(color || 'gray')\n        .offsetLeft(offset || 0)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText, { colors: this.colors }).offsetLeft(1) : null\n    )\n\n    this.driver.log(msg)\n  }\n\n  private buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message(undefined, this.colors)\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix, { colors: this.colors }).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText, { colors: this.colors }))\n\n    return msg\n  }\n}\n\nexport default Logger\n","/*\nimport { Enumerate } from './helper-types'\n\ntype RGBDigit = Enumerate<256>\n\ntype RGB = `rgb(${RGBDigit}, ${RGBDigit}, ${number})`;\ntype RGBA = `rgba(${RGBDigit}, ${RGBDigit}, ${number}, ${number})`;\n\ntype HexDigit =\n  '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F';\n\ntype MinHexDigitColor = `${HexDigit}${HexDigit}${HexDigit}`;\ntype ShortHexColor = `#${MinHexDigitColor}`;\ntype LongHexColor = `${ShortHexColor}${MinHexDigitColor}`;\ntype HexColor = LongHexColor | ShortHexColor;\n*/\n\ntype RGB = `rgb(${number}, ${number}, ${number})`\ntype RGBA = `rgba(${number}, ${number}, ${number}, ${number})`\ntype HexColor = `#${string}`\n\nexport type ColorValue = HexColor | RGB | RGBA\ntype ColorsType = Record<string, ColorValue>\n\nconst colors: ColorsType = {\n  black: '#000000',\n  gray: '#1B2B34',\n  red: '#EC5f67',\n  orange: '#F99157',\n  yellow: '#FAC863',\n  green: '#99C794',\n  teal: '#5FB3B3',\n  blue: '#6699CC',\n  purple: '#C594C5',\n  brown: '#AB7967',\n  white: '#FFFFFF',\n}\n\nexport default colors\n","import Message from '../../Message'\nimport MessageBlock from '../../MessageBlock'\nimport { LoggerDriver } from '../LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    console[type](...lines)\n    // console[msg.type ?? type](res[0], ...res[1])\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import { ColorValue } from './Color'\n\ntype ListCollectionType = Record<string, ColorValue>\n\nexport default class ColorCollection {\n  list: ListCollectionType = {}\n\n  constructor(list?: ListCollectionType) {\n    if (list) {\n      this.setCollection(list)\n    }\n  }\n\n  set(name: string, value: ColorValue): this {\n    this.list[name] = value\n\n    return this\n  }\n\n  setCollection(colors: ListCollectionType): this {\n    Object.keys(colors).forEach(name => {\n      this.set(name, colors[name])\n    })\n\n    return this\n  }\n\n  get(name?: string): ColorValue | undefined {\n    return name ? this.list[name] : undefined\n  }\n\n  remove(name: string): this {\n    delete this.list[name]\n\n    return this\n  }\n}\n","import type { LevelType } from './LogLevel'\nimport { LOG_ALL } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\nimport ColorCollection from './ColorCollection'\nimport colors from './Color'\n\nconst BrowserLogger = (level: LevelType = LOG_ALL) =>\n  new Logger({\n    driver: new ConsoleDriver(),\n    colors: new ColorCollection(colors),\n    level: level,\n  })\n\nexport { BrowserLogger }\n"],"names":["ERROR","MessageBlock","text","_ref","arguments","length","undefined","colors","_classCallCheck","this","_defineProperty","Object","_text","key","value","check","has","style","push","get","vValue","hValue","concat","marginLeft","marginRight","width","color","url","height","object","_objectDestructuringEmpty","isEmptyObject","JSON","stringify","block","options","Message","Array","parse","blocks","_this","_len","args","_key","forEach","pushBlock","instance","Logger","driver","level","LEVEL_DEBUG","logLevel","msgLevel","msgText","prefix","offset","log","buildMessage","shouldLog","msg","info","debug","error","trace","panelText","_ref2","bgColor","baseText","background","offsetLeft","borderRadius","padding","offsetRight","black","gray","red","orange","yellow","green","teal","blue","purple","brown","white","ConsoleDriver","perform","type","_console","lines","buildStrings","formatMessage","console","fmt","fmtStr","fmtArgs","getBlocks","_ConsoleDriver$format","formatBlock","str","apply","_toConsumableArray","getText","strStyle","getStyle","keyStyle","ColorCollection","list","setCollection","name","keys","set","LEVEL_INFO","LEVEL_ERROR"],"mappings":"giDAEaA,ICaPC,aAKJ,SAAAA,EAAYC,GAAoD,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,CAAI,EAApCG,IAAAA,OAAoCC,EAAAC,KAAAR,GAAAS,EAAAD,KAAA,QAF7B,IAAIE,OAAO,OAG5CF,KAAKF,OAASA,EACdE,KAAKG,MAAQV,CACd,+BAED,SAAKW,EAAaC,GAA8C,IAA9BC,0DAKhC,YAJcT,IAAVQ,GAAyBC,GAAUN,KAAKO,IAAI,WAC9CP,KAAKQ,MAAMJ,GAAOC,GAGbL,IACR,cAEDK,MAAA,SAAID,GACF,YAA2BP,IAApBG,KAAKQ,MAAMJ,EACnB,gBAEDC,MAAA,SAAMA,GAA8C,IAA9BC,0DACpB,OAAON,KAAKS,KAAK,QAAUT,KAAKF,QAAUE,KAAKF,OAAOY,IAAIL,IAAWA,EAAOC,EAC7E,qBAEDD,MAAA,SAAWA,GAA8C,IAA9BC,0DACzB,OAAON,KAAKS,KAAK,aAAeT,KAAKF,QAAUE,KAAKF,OAAOY,IAAIL,IAAWA,EAAOC,EAClF,qBAEDD,MAAA,SAAWA,GAA6C,IAA9BC,0DACxB,OAAa,GAATD,EACKL,KAAKS,KAAK,wBAAkBJ,EAA5B,MAAuCC,GAEzCN,IACR,sBAEDK,MAAA,SAAYA,GAA6C,IAA9BC,0DACzB,OAAa,GAATD,EACKL,KAAKS,KAAK,yBAAmBJ,EAA7B,MAAwCC,GAE1CN,IACR,oBAEDK,MAAA,SAAUA,GAA6C,IAA9BC,0DACvB,OAAON,KAAKS,KAAK,uBAAiBJ,EAA3B,MAAsCC,EAC9C,uBAEDD,MAAA,SAAaA,GAA6C,IAA9BC,0DAC1B,OAAON,KAAKS,KAAK,0BAAoBJ,EAA9B,MAAyCC,EACjD,uBAED,SAAOK,EAAgBC,GAA+C,IAA9BN,0DAClCD,EAAmB,IAAXM,EAAe,GAAQA,GAAAA,OAAAA,EAAnC,MAIA,YAHed,IAAXe,IACFP,GAAK,IAAAQ,OAAQD,EAAb,OAEKZ,KAAKS,KAAK,SAAUJ,EAAOC,EACnC,wBAED,SAAQK,EAAgBC,GAA+C,IAA9BN,0DACnCD,EAAmB,IAAXM,EAAe,GAAQA,GAAAA,OAAAA,EAAnC,MAIA,YAHed,IAAXe,IACFP,GAAK,IAAAQ,OAAQD,EAAb,OAEKZ,KAAKS,KAAK,UAAWJ,EAAOC,EACpC,qBAEDD,MAAA,SAAWA,GAA6C,IAA9BC,0DACxB,OAAON,KAAKc,WAAmB,GAART,EAAYC,EACpC,sBAEDD,MAAA,SAAYA,GAA6C,IAA9BC,0DACzB,OAAON,KAAKe,YAAoB,GAARV,EAAYC,EACrC,uBAEDD,MAAA,SAAaA,GAA6C,IAA9BC,0DAC1B,OAAON,KAAKS,KAAK,0BAAoBJ,EAA9B,MAAyCC,EACjD,iBAEDD,MAAA,SAAOW,EAAeR,EAAeS,GAAiD,IAA9BX,0DACtD,OAAON,KAAKS,KAAK,SAAaO,GAAAA,OAAAA,EAAWR,OAAAA,OAAAA,EAASS,KAAAA,OAAAA,GAASX,EAC5D,eAEDD,MAAA,SAAKA,GAA6C,IAA9BC,0DAClB,OAAON,KAAKS,KAAK,sBAAgBJ,EAA1B,MAAqCC,EAC7C,qBAED,WAAmC,IAA9BA,0DACH,OAAON,KAAKS,KAAK,cAAe,OAAQH,EACzC,uBAED,WAAqC,IAA9BA,0DACL,OAAON,KAAKS,KAAK,aAAc,SAAUH,EAC1C,qBAEDD,MAAA,SAAWA,GAA6C,IAA9BC,0DACxB,OAAON,KAAKS,KAAK,wBAAkBJ,EAA5B,MAAuCC,EAC/C,gBAEDD,MAAA,SAAMA,GAA8C,IAA9BC,0DACpB,OAAOD,EAAQL,KAAKS,KAAK,QAAYJ,GAAAA,OAAAA,EAAWC,MAAAA,GAASN,IAC1D,iBAEDK,MAAA,SAAOA,GAA8C,IAA9BC,0DACrB,OAAOD,EAAQL,KAAKS,KAAK,SAAaJ,GAAAA,OAAAA,EAAWC,MAAAA,GAASN,IAC3D,gBAEDK,MAAA,SAAMa,EAAaF,EAAgBG,GACjC,OAAOnB,KAAKS,KAAK,mBAA2BS,OAAAA,OAAAA,QAAQT,KAAK,kBAAlD,SAA8EO,MAAMA,GAAOG,OAAOA,EAC1G,eAEDd,MAAA,SAAKA,GAGH,OAFAL,KAAKG,MAAQE,EAENL,IACR,wBAED,WACE,OAAOA,KAAKG,KACb,yBAED,WACE,OAAOH,KAAKQ,KACb,yBAED,WACE,OC5IyB,SAACY,GAE5B,IAAA,IAAA1B,KAAW0B,EAAQ,OAAnBC,EAAA3B,IAA0B,EAE1B,OAAO,CACR,CDuIW4B,CAActB,KAAKQ,MAC5B,2BAED,WAGE,OAFAR,KAAKQ,MAAQ,IAAIN,OAAO,MAEjBF,IACR,uBAED,WACE,OAAOuB,KAAKC,UAAU,CACpBrB,MAAOH,KAAKG,MACZK,MAAOR,KAAKQ,OAEf,qBAEDH,MAAA,SAAgBoB,GAA+E,IAAjDC,yDAA+B,CAAA,EAC3E,OAAOD,aAAiBjC,EAAeiC,EAAQ,IAAIjC,EAAaiC,EAAOC,EACxE,UE7JGC,aAGJ,SAAYlC,EAAAA,EAA8BK,GAA0BC,EAAAC,KAAA2B,GAAA1B,EAF9BD,KAAA,SAAA,IAAI4B,OAGxC5B,KAAK6B,MAAMpC,EAAMK,EAClB,oCAED,WACE,OAAOE,KAAK8B,MACb,0BAED,WAAkD,IAAA,IAAAC,EAAA/B,KAAAgC,EAAArC,UAAAC,OAArCqC,EAAqC,IAAAL,MAAAI,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAArCD,EAAqCC,GAAAvC,UAAAuC,GAOhD,OANAD,EAAKE,SAAQ,SAAAV,GACPA,aAAiBjC,GACnBuC,EAAKD,OAAOrB,KAAKgB,MAIdzB,IACR,sBAED,WACEA,KAAK8B,OAAS,EACf,sBAED,WACE,OAAO9B,KAAK8B,OAAOlC,MACpB,sBAED,SAAcH,EAA8BK,GACtCL,GACFO,KAAKoC,UAAU5C,EAAa6C,SAAS5C,EAAM,CAAEK,OAAAA,IAEhD,2BAED,SAAgB2B,EAAyC3B,GACvD,OAAO2B,aAAiBE,EAAUF,EAAQ,IAAIE,EAAQF,EAAO3B,EAC9D,UCpBGwC,aAMJ,SAAqDA,EAAA5C,GAAA,IAAvC6C,IAAAA,OAAQzC,IAAAA,OAAQ0C,IAAAA,MAAuBzC,EAAAC,KAAAsC,GAAArC,EAAAD,KAAA,WJhBjByC,IIiBlCzC,KAAKuC,OAASA,EACdvC,KAAKF,OAASA,EAEV0C,IACFxC,KAAK0C,SAAWF,EAEnB,6BAEDnC,MAAA,SAASmC,GACPxC,KAAK0C,SAAWF,CACjB,0BAED,WACE,OAAOxC,KAAKuC,MACb,0BAED,WACE,OAAOvC,KAAKF,MACb,oBAEDO,MAAA,SAAkBsC,GAChB,OAAsC,IAA9B3C,KAAK0C,SAAWC,EACzB,oBAED,SAAIC,EAA0CC,GAAmC,IAAlBC,yDAAS,EACtE9C,KAAKuC,OAAOQ,IAAI/C,KAAKgD,aAAaJ,EAASC,EAAQC,GACpD,qBAED,SAAKF,EAA0CC,GAAmC,IAAlBC,yDAAS,EACvE,GAAK9C,KAAKiD,UJrDiB,GIqD3B,CAIA,IAAMC,EAAMlD,KAAKgD,aAAaJ,EAASC,EAAQC,GAE/C9C,KAAKuC,OAAOY,KAAKD,EAJhB,CAKF,sBAED,SAAMN,EAA0CC,GAA6B,IAAZC,yDAAS,EACnE9C,KAAKiD,UJ9DkB,IIkE5BjD,KAAKuC,OAAOa,MAAMpD,KAAKgD,aAAaJ,EAASC,EAAQC,GACtD,sBAED,SAAMF,EAA0CC,GAA6B,IAAZC,yDAAS,EACnE9C,KAAKiD,UJxEkB,II4E5BjD,KAAKuC,OAAOc,MAAMrD,KAAKgD,aAAaJ,EAASC,EAAQC,GACtD,sBAED,SAAMF,EAA0CC,GAA6B,IAAZC,yDAAS,EACnE9C,KAAKiD,UJ7EkB,IIiF5BjD,KAAKuC,OAAOe,MAAMtD,KAAKgD,aAAaJ,EAASC,EAAQC,GACtD,gBAEDzC,MAAA,SACEkD,GAGA,IAAAC,EAAA7D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAF2C,CAE3C,EAFE8D,IAAAA,QAASxC,IAAAA,MAAO6B,IAAAA,OAClBY,EACA/D,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACMqD,EAAMvB,EAAQU,cAASxC,EAAWG,KAAKF,QAAQsC,UACnD5C,EAAa6C,SAASkB,EAAW,CAAEzD,OAAQE,KAAKF,SAC7C6D,WAAWF,GAAW,SACtBxC,MAAMA,GAAS,QACf2C,WAAWd,GAAU,GACrBe,aAAa,GACbC,QAAQ,EAAG,GAEdJ,EAAWlE,EAAa6C,SAASqB,EAAU,CAAE5D,OAAQE,KAAKF,SAAU8D,WAAW,GAAK,MAGtF5D,KAAKuC,OAAOQ,IAAIG,EACjB,6BAED,SAAqBN,EAA0CC,GAA8C,IAA7BC,yDAAiB,EAC/F,GAAIF,aAAmBjB,EACrB,OAAOiB,EAGT,IAAMM,EAAM,IAAIvB,OAAQ9B,EAAWG,KAAKF,QAExC,GAAI+C,EAAQ,CACV,IAAMpB,EAAQjC,EAAa6C,SAASQ,EAAQ,CAAE/C,OAAQE,KAAKF,SAAUiE,YAAY,GAE7EjB,GACFrB,EAAMmC,WAAWd,GAGnBI,EAAId,UAAUX,EACf,CAID,OAFAyB,EAAId,UAAU5C,EAAa6C,SAASO,EAAS,CAAE9C,OAAQE,KAAKF,UAErDoD,CACR,UCnFGpD,EAAqB,CACzBkE,MAAO,UACPC,KAAM,UACNC,IAAK,UACLC,OAAQ,UACRC,OAAQ,UACRC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,UACRC,MAAO,UACPC,MAAO,WC/CHC,6DACJtE,MAAA,SAAM6C,GACJlD,KAAK4E,QAAQ1B,EAAK,QACnB,eAED7C,MAAA,SAAK6C,GACHlD,KAAK4E,QAAQ1B,EAAK,OACnB,cAED7C,MAAA,SAAI6C,GACFlD,KAAK4E,QAAQ1B,EAAK,MACnB,gBAED7C,MAAA,SAAM6C,GACJlD,KAAK4E,QAAQ1B,EAAK,QACnB,gBAED7C,MAAA,SAAM6C,GACJlD,KAAK4E,QAAQ1B,EAAK,QACnB,wBAED,SAAkBA,EAAc2B,GAAc,IAAAC,EACtCC,EAAQJ,EAAcK,aAAaL,EAAcM,cAAc/B,KAGrE4B,EAAAI,SAAQL,GAASE,MAAAA,EAAAA,EAAAA,GAElB,yBAED1E,MAAA,SAA8B8E,GAC5B,MAAA,CAAQA,EAAIC,QAAWD,OAAAA,EAAAA,EAAIE,SAC5B,wBAEDhF,MAAA,SAA+B6C,GAC7B,IAAIkC,EAAiB,GACfC,EAAyB,GAQ/B,OANAnC,EAAIoC,YAAYnD,SAAQ,SAAAV,GACtB,IAAA8D,EAAuCZ,EAAca,YAAY/D,GAAjDgE,IAARL,OAAsBnD,IAAToD,QACrBD,GAAUK,EACVJ,EAAQ5E,KAARiF,MAAAL,EAAOM,EAAS1D,OAGX,CAAEmD,OAAAA,EAAQC,QAAAA,EAClB,sBAEDhF,MAAA,SAA6BoB,GAC3B,IAAI2D,EAAsB3D,KAAAA,OAAAA,EAAMmE,WAC1BP,EAAyB,GAC3BQ,EAAW,GAETrF,EAAQiB,EAAMqE,WACpB,IAAK,IAAMC,KAAYvF,EACrBqF,aAAeE,EAAP,KAAAlF,OAAmBL,EAAMuF,GAAjC,KAIF,OAFAV,EAAQ5E,KAAKoF,GAEN,CAAET,OAAAA,EAAQC,QAAAA,EAClB,UC/DkBW,aAGnB,SAAAA,EAAYC,GAA2BlG,EAAAC,KAAAgG,GAAA/F,EAAAD,KAAA,OAFZ,CAAA,GAGrBiG,GACFjG,KAAKkG,cAAcD,EAEtB,8BAED,SAAIE,EAAc9F,GAGhB,OAFAL,KAAKiG,KAAKE,GAAQ9F,EAEXL,IACR,wBAEDK,MAAA,SAAcP,GAAkC,IAAAiC,EAAA/B,KAK9C,OAJAE,OAAOkG,KAAKtG,GAAQqC,SAAQ,SAAAgE,GAC1BpE,EAAKsE,IAAIF,EAAMrG,EAAOqG,OAGjBnG,IACR,cAEDK,MAAA,SAAI8F,GACF,OAAOA,EAAOnG,KAAKiG,KAAKE,QAAQtG,CACjC,iBAEDQ,MAAA,SAAO8F,GAGL,cAFOnG,KAAKiG,KAAKE,GAEVnG,IACR,0BC5BmB,WAAA,IAACwC,yDRGeC,GQHhB,OACpB,IAAIH,EAAO,CACTC,OAAQ,IAAIoC,EACZ7E,OAAQ,IAAIkG,EAAgBlG,GAC5B0C,MAAOA,GAJW,4BRHU,UAFA,SACD,gBAMO8D,gBAPN,eAMKC,gBAEC9D,aAAAA,wCALN"}