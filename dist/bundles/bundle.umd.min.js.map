{"version":3,"file":"bundle.umd.min.js","sources":["../../src/drivers/ConsoleDriver/index.ts","../../src/drivers/ConsoleBufferDriver/index.ts","../../src/LogLevel.ts","../../src/utils.ts","../../src/MessageBlock.ts","../../src/Message.ts","../../src/Logger.ts","../../src/Color.ts","../../src/ColorCollection.ts","../../src/shorcuts.ts"],"sourcesContent":["import Message from '../../Message'\nimport MessageBlock from '../../MessageBlock'\nimport { LoggerDriver } from '../LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  protected output = console\n\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    this.output[type](...lines)\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import ConsoleDriver from '../ConsoleDriver'\nimport Message from '../../Message'\n\nexport interface ConsoleBufferConfig {\n  print?: boolean\n  printFragmented?: boolean\n  debugFn?: Function\n}\n\nexport default class ConsoleBuffer extends ConsoleDriver {\n  private readonly print: boolean = false\n  private readonly printFragmented: boolean = false\n  private readonly debugFn: Function\n\n  constructor({ print, printFragmented, debugFn }: ConsoleBufferConfig = {}) {\n    super()\n    this.print = print || false\n    this.printFragmented = printFragmented || false\n    this.debugFn = debugFn || this.output.dir\n  }\n\n  public buffer: string[] = []\n\n  protected perform(msg: Message, type: string) {\n    this.buffer = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n    if (this.print) {\n      this.output.warn('--[debug] start')\n      super.perform(msg, type)\n      this.debugFn(this.buffer)\n      if (this.printFragmented) {\n        this.performFragmented()\n      }\n      this.output.warn('--[debug] finish')\n    }\n  }\n\n  private performFragmented() {\n    if (!this.buffer.length) {\n      return\n    }\n\n    const fragments = this.buffer[0].split('%c').slice(1)\n    const styles = this.buffer.slice(1)\n\n    if (fragments.length != styles.length) {\n      this.output.error('data inconsistency error: fragments: %d, styles: %d', fragments.length, styles.length)\n      this.output.log('fragments', fragments)\n      this.output.log('styles', styles)\n    }\n\n    fragments.forEach((fragment, idx) => {\n      this.output.log(`${fragment}: ${styles[idx]}`)\n      this.output.log(`%c${fragment}`, styles[idx])\n    })\n  }\n\n  public clearBuffer() {\n    this.buffer = []\n  }\n}\n","export type LevelType = number\nexport type StringLevelType = LevelType | string\n\nexport const ERROR: LevelType = 1\nexport const INFO: LevelType = 2\nexport const DEBUG: LevelType = 4\nexport const TRACE: LevelType = 8\n\nexport const LEVEL_ERROR: LevelType = ERROR\nexport const LEVEL_INFO: LevelType = LEVEL_ERROR | INFO\nexport const LEVEL_DEBUG: LevelType = LEVEL_INFO | DEBUG\nexport const LEVEL_TRACE: LevelType = LEVEL_DEBUG | TRACE\nexport const LOG_ALL: LevelType = LEVEL_TRACE\n\nexport const ERROR_STR = 'error'\nexport const INFO_STR = 'info'\nexport const DEBUG_STR = 'debug'\nexport const TRACE_STR = 'trace'\n\nexport const LEVEL_INFO_STR = 'levelInfo'\nexport const LEVEL_DEBUG_STR = 'levelDebug'\n\nexport function stringToLevel(value: string): LevelType {\n  switch (value) {\n    case ERROR_STR:\n      return ERROR\n    case INFO_STR:\n      return INFO\n    case DEBUG_STR:\n      return DEBUG\n    case TRACE_STR:\n      return TRACE\n\n    case LEVEL_INFO_STR:\n      return LEVEL_INFO\n    case LEVEL_DEBUG_STR:\n      return LEVEL_DEBUG\n  }\n\n  return LOG_ALL\n}\n\nexport default {\n  ERROR,\n  INFO,\n  DEBUG,\n  TRACE,\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n  LOG_ALL,\n}\n","// export const isString = (str: any) => typeof str !== 'string'\n\nexport const isEmptyObject = (object: object) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n\nexport const isString = (value: any) => typeof value === 'string'\n","import { isEmptyObject } from './utils'\nimport type { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: ColorValue\n  background?: ColorValue\n}\n\ninterface MessageBlockOptions {\n  colors?: ColorCollection\n}\n\nexport interface MessageBlockConfig {\n  text: string\n  bgColor?: ColorValue | string\n  bold?: boolean\n  borderRadius?: number\n  color?: ColorValue | string\n  fontSize?: number\n  italic?: boolean\n  lineHeight?: number\n  offsetLeft?: number\n  offsetRight?: number\n  marginTop?: number\n  marginBottom?: number\n  padding?: number | [number, number]\n}\n\nclass MessageBlock {\n  private _text?: string\n  private readonly colors?: ColorCollection\n  private style: MessageBlockStyle = Object.create(null)\n\n  constructor(text: string | MessageBlockConfig, { colors }: MessageBlockOptions = Object.create(null)) {\n    this.colors = colors\n    if (text === undefined) {\n      throw Error('Invalid `text` argument for MessageBlock')\n    }\n\n    if (typeof text === 'string') {\n      this._text = text\n    } else {\n      this.fillFromConfig(text)\n    }\n  }\n\n  push(key: string, value?: string, check: boolean = false): this {\n    if (value !== undefined && (!check || !this.has('color'))) {\n      this.style[key] = value\n    }\n\n    return this\n  }\n\n  has(key: string): boolean {\n    return this.style[key] !== undefined\n  }\n\n  color(value?: string, check: boolean = false): this {\n    return this.push('color', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  background(value?: string, check: boolean = false): this {\n    return this.push('background', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  marginLeft(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-left', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginRight(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-right', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginTop(value: number, check: boolean = false): this {\n    return this.push('margin-top', `${value}px`, check)\n  }\n\n  marginBottom(value: number, check: boolean = false): this {\n    return this.push('margin-bottom', `${value}px`, check)\n  }\n\n  margin(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('margin', value, check)\n  }\n\n  padding(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('padding', value, check)\n  }\n\n  offsetLeft(value: number, check: boolean = false): this {\n    return this.marginLeft(value * 10, check)\n  }\n\n  offsetRight(value: number, check: boolean = false): this {\n    return this.marginRight(value * 10, check)\n  }\n\n  borderRadius(value: number, check: boolean = false): this {\n    return this.push('border-radius', `${value}px`, check)\n  }\n\n  border(width: number, style: string, color: ColorValue, check: boolean = false): this {\n    return this.push('border', `${width}px ${style} ${color}`, check)\n  }\n\n  size(value: number, check: boolean = false): this {\n    return this.push('font-size', `${value}px`, check)\n  }\n\n  bold(check: boolean = false): this {\n    return this.push('font-weight', 'bold', check)\n  }\n\n  italic(check: boolean = false): this {\n    return this.push('font-style', 'italic', check)\n  }\n\n  lineHeight(value: number, check: boolean = false): this {\n    return this.push('line-height', `${value}px`, check)\n  }\n\n  width(value?: number, check: boolean = false): this {\n    return value ? this.push('width', `${value}px`, check) : this\n  }\n\n  height(value?: number, check: boolean = false): this {\n    return value ? this.push('height', `${value}px`, check) : this\n  }\n\n  image(url: string, width?: number, height?: number): this {\n    return this.push('background-image', `url(${url}}`).push('background-size', `cover`).width(width).height(height)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text || ''\n  }\n\n  fillFromConfig(config: MessageBlockConfig) {\n    this.text(config.text).background(config.bgColor).color(config.color)\n\n    config.offsetLeft && this.offsetLeft(config.offsetLeft)\n    config.offsetRight && this.offsetRight(config.offsetRight)\n    config.borderRadius && this.borderRadius(config.borderRadius)\n    config.bold && this.bold()\n    config.italic && this.italic()\n    config.fontSize && this.size(config.fontSize)\n    config.lineHeight && this.lineHeight(config.lineHeight)\n    config.marginBottom && this.marginBottom(config.marginBottom)\n    config.marginTop && this.marginTop(config.marginTop)\n\n    if (config.padding) {\n      if (Array.isArray(config.padding)) {\n        this.padding(config.padding[0], config.padding[1])\n      } else {\n        this.padding(config.padding)\n      }\n    }\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = Object.create(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(\n    block: MessageBlock | MessageBlockConfig | string,\n    options: MessageBlockOptions = Object.create(null)\n  ): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block, options)\n  }\n}\n\nexport default MessageBlock\n","import MessageBlock from './MessageBlock'\nimport ColorCollection from './ColorCollection'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string, colors?: ColorCollection) {\n    this.parse(text, colors)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(...args: (MessageBlock | null)[]): this {\n    args.forEach(block => {\n      if (block instanceof MessageBlock) {\n        this.blocks.push(block)\n      }\n    })\n\n    return this\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock, colors?: ColorCollection): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text, { colors }))\n    }\n  }\n\n  static instance(block?: Message | MessageBlock | string, colors?: ColorCollection): Message {\n    return block instanceof Message ? block : new Message(block, colors)\n  }\n}\n\nexport default Message\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport ConsoleBufferDriver from './drivers/ConsoleBufferDriver'\nimport type { LevelType } from './LogLevel'\nimport { DEBUG, ERROR, INFO, LOG_ALL, StringLevelType, stringToLevel, TRACE } from './LogLevel'\nimport Message from './Message'\nimport type { MessageBlockConfig } from './MessageBlock'\nimport MessageBlock from './MessageBlock'\nimport { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  colors: ColorCollection\n  level?: StringLevelType\n}\n\ninterface PanelOptions {\n  bgColor?: ColorValue | string\n  color?: ColorValue | string\n  offset?: number\n}\n\ntype BlockPanel = string | MessageBlockConfig | MessageBlock\n\nclass Logger {\n  private driver: LoggerDriver\n  private originDriver?: LoggerDriver\n  private readonly colors: ColorCollection\n\n  private logLevel: LevelType = LOG_ALL\n\n  constructor({ driver, colors, level }: LoggerConfig) {\n    this.driver = driver\n    this.colors = colors\n\n    if (level) {\n      if (typeof level === 'string') {\n        this.logLevel = stringToLevel(level)\n      } else {\n        this.logLevel = level\n      }\n    }\n  }\n\n  setLogLevel(level: LevelType): void {\n    this.logLevel = level\n  }\n\n  addLogLevel(level: LevelType): void {\n    this.logLevel |= level\n  }\n\n  excludeLogLevel(level: LevelType): void {\n    this.logLevel ^= level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  public setDriver(driver: LoggerDriver): this {\n    this.driver = driver\n\n    return this\n  }\n\n  public enableDebug({ printFragmented, debugFn }: { printFragmented?: boolean; debugFn?: Function } = {}): this {\n    this.originDriver = this.driver\n    this.driver = new ConsoleBufferDriver({ print: true, printFragmented, debugFn })\n\n    return this\n  }\n\n  public disableDebug(): this {\n    if (this.originDriver) {\n      this.setDriver(this.originDriver)\n      this.originDriver = undefined\n    }\n\n    return this\n  }\n\n  public getColors(): ColorCollection {\n    return this.colors\n  }\n\n  private shouldLog(level: StringLevelType): boolean {\n    if (typeof level === 'string') {\n      level = stringToLevel(level)\n    }\n\n    return (this.logLevel & level) !== 0\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(this.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(INFO)) {\n      return\n    }\n\n    const msg = this.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(DEBUG)) {\n      return\n    }\n\n    this.driver.debug(this.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(ERROR)) {\n      return\n    }\n\n    this.driver.error(this.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(TRACE)) {\n      return\n    }\n\n    this.driver.trace(this.buildMessage(msgText, prefix, offset))\n  }\n\n  /**\n   * @deprecated\n   * @use panels\n   */\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor, color, offset }: PanelOptions = Object.create(null),\n    baseText?: string | MessageBlock,\n    logLevel?: StringLevelType\n  ) {\n    if (logLevel && !this.shouldLog(logLevel)) {\n      return\n    }\n\n    const msg = Message.instance(undefined, this.colors).pushBlock(\n      MessageBlock.instance(panelText, { colors: this.colors })\n        .background(bgColor || 'white')\n        .color(color || 'gray')\n        .offsetLeft(offset || 0)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText, { colors: this.colors }).offsetLeft(1) : null\n    )\n\n    this.driver.log(msg)\n  }\n\n  panels(logLevel?: StringLevelType, ...blockConfigs: BlockPanel[]) {\n    if (!blockConfigs.length || (logLevel && !this.shouldLog(logLevel))) {\n      return\n    }\n\n    const blocks: MessageBlock[] = []\n    blockConfigs.forEach(blockConfig => {\n      blocks.push(MessageBlock.instance(blockConfig, { colors: this.colors }))\n    })\n\n    const msg = Message.instance().pushBlock(...blocks)\n\n    this.driver.log(msg)\n  }\n\n  private buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message(undefined, this.colors)\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix, { colors: this.colors }).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText, { colors: this.colors }))\n\n    return msg\n  }\n}\n\nexport default Logger\n","/*\nimport { Enumerate } from './helper-types'\n\ntype RGBDigit = Enumerate<256>\n\ntype RGB = `rgb(${RGBDigit}, ${RGBDigit}, ${number})`;\ntype RGBA = `rgba(${RGBDigit}, ${RGBDigit}, ${number}, ${number})`;\n\ntype HexDigit =\n  '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F';\n\ntype MinHexDigitColor = `${HexDigit}${HexDigit}${HexDigit}`;\ntype ShortHexColor = `#${MinHexDigitColor}`;\ntype LongHexColor = `${ShortHexColor}${MinHexDigitColor}`;\ntype HexColor = LongHexColor | ShortHexColor;\n*/\n\ntype RGB = `rgb(${number}, ${number}, ${number})`\ntype RGBA = `rgba(${number}, ${number}, ${number}, ${number})`\ntype HexColor = `#${string}`\n\nexport type ColorValue = HexColor | RGB | RGBA\ntype ColorsType = Record<string, ColorValue>\n\nconst colors: ColorsType = {\n  black: '#000000',\n  gray: '#1B2B34',\n  grayLight: '#334048',\n  red: '#ff000f',\n  redLight: '#EC5f67',\n  orange: '#F99157',\n  yellow: '#FAC863',\n  green: '#14be00',\n  greenLight: '#99C794',\n  teal: '#5FB3B3',\n  blue: '#6699CC',\n  purple: '#C594C5',\n  brown: '#AB7967',\n  white: '#FFFFFF',\n}\n\nexport default colors\n","import { ColorValue } from './Color'\n\ntype ListCollectionType = Record<string, ColorValue>\n\nexport default class ColorCollection {\n  list: ListCollectionType = {}\n\n  constructor(list?: ListCollectionType) {\n    if (list) {\n      this.setCollection(list)\n    }\n  }\n\n  set(name: string, value: ColorValue): this {\n    this.list[name] = value\n\n    return this\n  }\n\n  setCollection(colors: ListCollectionType): this {\n    Object.keys(colors).forEach(name => {\n      this.set(name, colors[name])\n    })\n\n    return this\n  }\n\n  get(name?: string): ColorValue | undefined {\n    return name ? this.list[name] : undefined\n  }\n\n  remove(name: string): this {\n    delete this.list[name]\n\n    return this\n  }\n}\n","import type { LevelType } from './LogLevel'\nimport { LOG_ALL } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\nimport ColorCollection from './ColorCollection'\nimport colors from './Color'\n\nconst BrowserLogger = (level: LevelType | string = LOG_ALL) =>\n  new Logger({\n    driver: new ConsoleDriver(),\n    colors: new ColorCollection(colors),\n    level: level,\n  })\n\nexport { BrowserLogger }\n"],"names":["ConsoleDriver","console","value","msg","this","perform","type","_this$output","lines","buildStrings","formatMessage","output","apply","_toConsumableArray","fmt","fmtStr","fmtArgs","getBlocks","forEach","block","_ConsoleDriver$format","formatBlock","str","args","push","getText","strStyle","style","getStyle","keyStyle","concat","ConsoleBuffer","_this","_ref","arguments","length","undefined","print","printFragmented","debugFn","_classCallCheck","_defineProperty","_assertThisInitialized","_super","call","dir","buffer","warn","_get","performFragmented","_this2","fragments","split","slice","styles","error","log","fragment","idx","ERROR_STR","INFO_STR","DEBUG_STR","TRACE_STR","LEVEL_INFO_STR","LEVEL_DEBUG_STR","stringToLevel","LEVEL_ERROR","LEVEL_INFO","LEVEL_DEBUG","MessageBlock","text","Object","create","colors","Error","_text","fillFromConfig","key","check","has","get","vValue","hValue","marginLeft","marginRight","width","color","url","height","config","background","bgColor","offsetLeft","offsetRight","borderRadius","bold","italic","fontSize","size","lineHeight","marginBottom","marginTop","padding","Array","isArray","object","_objectDestructuringEmpty","isEmptyObject","JSON","stringify","options","Message","parse","blocks","_len","_key","pushBlock","instance","Logger","driver","level","logLevel","_ref2","originDriver","ConsoleBufferDriver","setDriver","msgText","prefix","offset","buildMessage","shouldLog","info","debug","trace","panelText","_ref3","baseText","_Message$instance","blockConfigs","blockConfig","black","gray","grayLight","red","redLight","orange","yellow","green","greenLight","teal","blue","purple","brown","white","ColorCollection","list","setCollection","name","keys","set"],"mappings":"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"}