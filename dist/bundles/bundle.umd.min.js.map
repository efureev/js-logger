{"version":3,"file":"bundle.umd.min.js","sources":["../../src/LogLevel.ts","../../src/utils.ts","../../src/MessageBlock.ts","../../src/Message.ts","../../src/Logger.ts","../../src/Color.ts","../../src/drivers/ConsoleDriver/index.ts","../../src/ColorCollection.ts","../../src/shorcuts.ts"],"sourcesContent":["export type LevelType = number\nexport type StringLevelType = LevelType | string\n\nexport const ERROR: LevelType = 1\nexport const INFO: LevelType = 2\nexport const DEBUG: LevelType = 4\nexport const TRACE: LevelType = 8\n\nexport const LEVEL_ERROR: LevelType = ERROR\nexport const LEVEL_INFO: LevelType = LEVEL_ERROR | INFO\nexport const LEVEL_DEBUG: LevelType = LEVEL_INFO | DEBUG\nexport const LEVEL_TRACE: LevelType = LEVEL_DEBUG | TRACE\nexport const LOG_ALL: LevelType = LEVEL_TRACE\n\nexport const ERROR_STR = 'error'\nexport const INFO_STR = 'info'\nexport const DEBUG_STR = 'debug'\nexport const TRACE_STR = 'trace'\n\nexport const LEVEL_INFO_STR = 'levelInfo'\nexport const LEVEL_DEBUG_STR = 'levelDebug'\n\nexport function stringToLevel(value: string): LevelType {\n  switch (value) {\n    case ERROR_STR:\n      return ERROR\n    case INFO_STR:\n      return INFO\n    case DEBUG_STR:\n      return DEBUG\n    case TRACE_STR:\n      return TRACE\n\n    case LEVEL_INFO_STR:\n      return LEVEL_INFO\n    case LEVEL_DEBUG_STR:\n      return LEVEL_DEBUG\n  }\n\n  return LOG_ALL\n}\n\nexport default {\n  ERROR,\n  INFO,\n  DEBUG,\n  TRACE,\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n  LOG_ALL,\n}\n","// export const isString = (str: any) => typeof str !== 'string'\n\nexport const isEmptyObject = (object: object) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n\nexport const isString = (value: any) => typeof value === 'string'\n","import { isEmptyObject } from './utils'\nimport type { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: ColorValue\n  background?: ColorValue\n}\n\ninterface MessageBlockOptions {\n  colors?: ColorCollection\n}\n\nexport interface MessageBlockConfig {\n  text: string\n  bgColor?: ColorValue | string\n  bold?: boolean\n  borderRadius?: number\n  color?: ColorValue | string\n  fontSize?: number\n  italic?: boolean\n  lineHeight?: number\n  offsetLeft?: number\n  offsetRight?: number\n  marginTop?: number\n  marginBottom?: number\n  padding?: number | [number, number]\n}\n\nclass MessageBlock {\n  private _text?: string\n  private readonly colors?: ColorCollection\n  private style: MessageBlockStyle = new Object(null)\n\n  constructor(text: string | MessageBlockConfig, { colors }: MessageBlockOptions = new Object(null)) {\n    this.colors = colors\n    if (text === undefined) {\n      throw Error('Invalid `text` argument for MessageBlock')\n    }\n\n    if (typeof text === 'string') {\n      this._text = text\n    } else {\n      this.fillFromConfig(text)\n    }\n  }\n\n  push(key: string, value?: string, check: boolean = false): this {\n    if (value !== undefined && (!check || !this.has('color'))) {\n      this.style[key] = value\n    }\n\n    return this\n  }\n\n  has(key: string): boolean {\n    return this.style[key] !== undefined\n  }\n\n  color(value?: string, check: boolean = false): this {\n    return this.push('color', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  background(value?: string, check: boolean = false): this {\n    return this.push('background', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  marginLeft(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-left', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginRight(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-right', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginTop(value: number, check: boolean = false): this {\n    return this.push('margin-top', `${value}px`, check)\n  }\n\n  marginBottom(value: number, check: boolean = false): this {\n    return this.push('margin-bottom', `${value}px`, check)\n  }\n\n  margin(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('margin', value, check)\n  }\n\n  padding(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('padding', value, check)\n  }\n\n  offsetLeft(value: number, check: boolean = false): this {\n    return this.marginLeft(value * 10, check)\n  }\n\n  offsetRight(value: number, check: boolean = false): this {\n    return this.marginRight(value * 10, check)\n  }\n\n  borderRadius(value: number, check: boolean = false): this {\n    return this.push('border-radius', `${value}px`, check)\n  }\n\n  border(width: number, style: string, color: ColorValue, check: boolean = false): this {\n    return this.push('border', `${width}px ${style} ${color}`, check)\n  }\n\n  size(value: number, check: boolean = false): this {\n    return this.push('font-size', `${value}px`, check)\n  }\n\n  bold(check: boolean = false): this {\n    return this.push('font-weight', 'bold', check)\n  }\n\n  italic(check: boolean = false): this {\n    return this.push('font-style', 'italic', check)\n  }\n\n  lineHeight(value: number, check: boolean = false): this {\n    return this.push('line-height', `${value}px`, check)\n  }\n\n  width(value?: number, check: boolean = false): this {\n    return value ? this.push('width', `${value}px`, check) : this\n  }\n\n  height(value?: number, check: boolean = false): this {\n    return value ? this.push('height', `${value}px`, check) : this\n  }\n\n  image(url: string, width?: number, height?: number): this {\n    return this.push('background-image', `url(${url}}`).push('background-size', `cover`).width(width).height(height)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text || ''\n  }\n\n  fillFromConfig(config: MessageBlockConfig) {\n    this.text(config.text).background(config.bgColor).color(config.color)\n\n    config.offsetLeft && this.offsetLeft(config.offsetLeft)\n    config.offsetRight && this.offsetRight(config.offsetRight)\n    config.borderRadius && this.borderRadius(config.borderRadius)\n    config.bold && this.bold()\n    config.italic && this.italic()\n    config.fontSize && this.size(config.fontSize)\n    config.lineHeight && this.lineHeight(config.lineHeight)\n    config.marginBottom && this.marginBottom(config.marginBottom)\n    config.marginTop && this.marginTop(config.marginTop)\n\n    if (config.padding) {\n      if (Array.isArray(config.padding)) {\n        this.padding(config.padding[0], config.padding[1])\n      } else {\n        this.padding(config.padding)\n      }\n    }\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = new Object(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(\n    block: MessageBlock | MessageBlockConfig | string,\n    options: MessageBlockOptions = new Object(null)\n  ): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block, options)\n  }\n}\n\nexport default MessageBlock\n","import MessageBlock from './MessageBlock'\nimport ColorCollection from './ColorCollection'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string, colors?: ColorCollection) {\n    this.parse(text, colors)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(...args: (MessageBlock | null)[]): this {\n    args.forEach(block => {\n      if (block instanceof MessageBlock) {\n        this.blocks.push(block)\n      }\n    })\n\n    return this\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock, colors?: ColorCollection): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text, { colors }))\n    }\n  }\n\n  static instance(block?: Message | MessageBlock | string, colors?: ColorCollection): Message {\n    return block instanceof Message ? block : new Message(block, colors)\n  }\n}\n\nexport default Message\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport type { LevelType } from './LogLevel'\nimport { DEBUG, ERROR, INFO, LOG_ALL, StringLevelType, stringToLevel, TRACE } from './LogLevel'\nimport Message from './Message'\nimport type { MessageBlockConfig } from './MessageBlock'\nimport MessageBlock from './MessageBlock'\nimport { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  colors: ColorCollection\n  level?: StringLevelType\n}\n\ninterface PanelOptions {\n  bgColor?: ColorValue | string\n  color?: ColorValue | string\n  offset?: number\n}\n\ntype BlockPanel = string | MessageBlockConfig | MessageBlock\n\nclass Logger {\n  private readonly driver: LoggerDriver\n  private readonly colors: ColorCollection\n\n  private logLevel: LevelType = LOG_ALL\n\n  constructor({ driver, colors, level }: LoggerConfig) {\n    this.driver = driver\n    this.colors = colors\n\n    if (level) {\n      if (typeof level === 'string') {\n        this.logLevel = stringToLevel(level)\n      } else {\n        this.logLevel = level\n      }\n    }\n  }\n\n  setLogLevel(level: LevelType): void {\n    this.logLevel = level\n  }\n\n  addLogLevel(level: LevelType): void {\n    this.logLevel |= level\n  }\n\n  excludeLogLevel(level: LevelType): void {\n    this.logLevel ^= level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  public getColors(): ColorCollection {\n    return this.colors\n  }\n\n  private shouldLog(level: StringLevelType): boolean {\n    if (typeof level === 'string') {\n      level = stringToLevel(level)\n    }\n\n    return (this.logLevel & level) !== 0\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(this.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(INFO)) {\n      return\n    }\n\n    const msg = this.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(DEBUG)) {\n      return\n    }\n\n    this.driver.debug(this.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(ERROR)) {\n      return\n    }\n\n    this.driver.error(this.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(TRACE)) {\n      return\n    }\n\n    this.driver.trace(this.buildMessage(msgText, prefix, offset))\n  }\n\n  /**\n   * @deprecated\n   * @use panels\n   */\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor, color, offset }: PanelOptions = new Object(null),\n    baseText?: string | MessageBlock,\n    logLevel?: StringLevelType\n  ) {\n    if (logLevel && !this.shouldLog(logLevel)) {\n      return\n    }\n\n    const msg = Message.instance(undefined, this.colors).pushBlock(\n      MessageBlock.instance(panelText, { colors: this.colors })\n        .background(bgColor || 'white')\n        .color(color || 'gray')\n        .offsetLeft(offset || 0)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText, { colors: this.colors }).offsetLeft(1) : null\n    )\n\n    this.driver.log(msg)\n  }\n\n  panels(logLevel?: StringLevelType, ...blockConfigs: BlockPanel[]) {\n    if (!blockConfigs.length || (logLevel && !this.shouldLog(logLevel))) {\n      return\n    }\n\n    const blocks: MessageBlock[] = []\n    blockConfigs.forEach(blockConfig => {\n      blocks.push(MessageBlock.instance(blockConfig, { colors: this.colors }))\n    })\n\n    const msg = Message.instance().pushBlock(...blocks)\n\n    this.driver.log(msg)\n  }\n\n  private buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message(undefined, this.colors)\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix, { colors: this.colors }).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText, { colors: this.colors }))\n\n    return msg\n  }\n}\n\nexport default Logger\n","/*\nimport { Enumerate } from './helper-types'\n\ntype RGBDigit = Enumerate<256>\n\ntype RGB = `rgb(${RGBDigit}, ${RGBDigit}, ${number})`;\ntype RGBA = `rgba(${RGBDigit}, ${RGBDigit}, ${number}, ${number})`;\n\ntype HexDigit =\n  '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F';\n\ntype MinHexDigitColor = `${HexDigit}${HexDigit}${HexDigit}`;\ntype ShortHexColor = `#${MinHexDigitColor}`;\ntype LongHexColor = `${ShortHexColor}${MinHexDigitColor}`;\ntype HexColor = LongHexColor | ShortHexColor;\n*/\n\ntype RGB = `rgb(${number}, ${number}, ${number})`\ntype RGBA = `rgba(${number}, ${number}, ${number}, ${number})`\ntype HexColor = `#${string}`\n\nexport type ColorValue = HexColor | RGB | RGBA\ntype ColorsType = Record<string, ColorValue>\n\nconst colors: ColorsType = {\n  black: '#000000',\n  gray: '#1B2B34',\n  grayLight: '#536069',\n  red: '#EC5f67',\n  orange: '#F99157',\n  yellow: '#FAC863',\n  green: '#99C794',\n  teal: '#5FB3B3',\n  blue: '#6699CC',\n  purple: '#C594C5',\n  brown: '#AB7967',\n  white: '#FFFFFF',\n}\n\nexport default colors\n","import Message from '../../Message'\nimport MessageBlock from '../../MessageBlock'\nimport { LoggerDriver } from '../LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  private output = console\n\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    this.output[type](...lines)\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import { ColorValue } from './Color'\n\ntype ListCollectionType = Record<string, ColorValue>\n\nexport default class ColorCollection {\n  list: ListCollectionType = {}\n\n  constructor(list?: ListCollectionType) {\n    if (list) {\n      this.setCollection(list)\n    }\n  }\n\n  set(name: string, value: ColorValue): this {\n    this.list[name] = value\n\n    return this\n  }\n\n  setCollection(colors: ListCollectionType): this {\n    Object.keys(colors).forEach(name => {\n      this.set(name, colors[name])\n    })\n\n    return this\n  }\n\n  get(name?: string): ColorValue | undefined {\n    return name ? this.list[name] : undefined\n  }\n\n  remove(name: string): this {\n    delete this.list[name]\n\n    return this\n  }\n}\n","import type { LevelType } from './LogLevel'\nimport { LOG_ALL } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\nimport ColorCollection from './ColorCollection'\nimport colors from './Color'\n\nconst BrowserLogger = (level: LevelType | string = LOG_ALL) =>\n  new Logger({\n    driver: new ConsoleDriver(),\n    colors: new ColorCollection(colors),\n    level: level,\n  })\n\nexport { BrowserLogger }\n"],"names":["ERROR","ERROR_STR","INFO_STR","DEBUG_STR","TRACE_STR","LEVEL_INFO_STR","LEVEL_DEBUG_STR","stringToLevel","value","LEVEL_ERROR","LEVEL_INFO","LEVEL_DEBUG","MessageBlock","text","_ref","arguments","length","undefined","Object","colors","_classCallCheck","this","_defineProperty","Error","_text","fillFromConfig","key","check","has","style","push","get","vValue","hValue","concat","marginLeft","marginRight","width","color","url","height","config","background","bgColor","offsetLeft","offsetRight","borderRadius","bold","italic","fontSize","size","lineHeight","marginBottom","marginTop","padding","Array","isArray","object","_objectDestructuringEmpty","isEmptyObject","JSON","stringify","block","options","Message","parse","blocks","_this","_len","args","_key","forEach","pushBlock","instance","Logger","driver","level","logLevel","msgText","prefix","offset","log","buildMessage","shouldLog","msg","info","debug","error","trace","panelText","_ref2","baseText","_Message$instance","blockConfigs","blockConfig","black","gray","grayLight","red","orange","yellow","green","teal","blue","purple","brown","white","ConsoleDriver","console","perform","type","_this$output","lines","buildStrings","formatMessage","output","apply","_toConsumableArray","fmt","fmtStr","fmtArgs","getBlocks","_ConsoleDriver$format","formatBlock","str","getText","strStyle","getStyle","keyStyle","ColorCollection","list","setCollection","name","keys","set"],"mappings":"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"}