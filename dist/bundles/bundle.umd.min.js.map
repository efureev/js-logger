{"version":3,"file":"bundle.umd.min.js","sources":["../../src/LogLevel.ts","../../src/MessageBlock.ts","../../src/utils.ts","../../src/Message.ts","../../src/Color.ts","../../src/Logger.ts","../../src/drivers/ConsoleDriver.ts","../../src/shorcuts.ts"],"sourcesContent":["export const LEVEL_ERROR: number = 1 << 0\nexport const LEVEL_INFO: number = 1 << 1\nexport const LEVEL_DEBUG: number = 1 << 2\nexport const LEVEL_TRACE: number = 1 << 3\n\nexport default {\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n}\n","import { isEmptyObject } from './utils'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: string\n  background?: string\n}\n\nclass MessageBlock {\n  private _text: string\n  private style: MessageBlockStyle = new Object(null)\n\n  constructor(text: string) {\n    this._text = text\n  }\n\n  push(key: string, value: string, check: boolean = false): this {\n    if (!check || !this.has('color')) {\n      this.style[key] = value\n    }\n\n    return this\n  }\n\n  has(key: string): boolean {\n    return this.style[key] !== undefined\n  }\n\n  color(value: string, check: boolean = false): this {\n    return this.push('color', value, check)\n  }\n\n  background(value: string, check: boolean = false): this {\n    return this.push('background', value, check)\n  }\n\n  marginLeft(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-left', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginRight(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-right', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginTop(value: number, check: boolean = false): this {\n    return this.push('margin-top', `${value}px`, check)\n  }\n\n  marginBottom(value: number, check: boolean = false): this {\n    return this.push('margin-bottom', `${value}px`, check)\n  }\n\n  margin(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('margin', value, check)\n  }\n\n  padding(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('padding', value, check)\n  }\n\n  offsetLeft(value: number, check: boolean = false): this {\n    return this.marginLeft(value * 10, check)\n  }\n\n  offsetRight(value: number, check: boolean = false): this {\n    return this.marginRight(value * 10, check)\n  }\n\n  borderRadius(value: number, check: boolean = false): this {\n    return this.push('border-radius', `${value}px`, check)\n  }\n\n  border(width: number, style: string, color: string, check: boolean = false): this {\n    return this.push('border', `${width}px ${style} ${color}`, check)\n  }\n\n  size(value: number, check: boolean = false): this {\n    return this.push('font-size', `${value}px`, check)\n  }\n\n  bold(check: boolean = false): this {\n    return this.push('font-weight', 'bold', check)\n  }\n\n  italic(check: boolean = false): this {\n    return this.push('font-style', 'italic', check)\n  }\n\n  lineHeight(value: number, check: boolean = false): this {\n    return this.push('line-height', `${value}px`, check)\n  }\n\n  width(value?: number, check: boolean = false): this {\n    return value ? this.push('width', `${value}px`, check) : this\n  }\n\n  height(value?: number, check: boolean = false): this {\n    return value ? this.push('height', `${value}px`, check) : this\n  }\n\n  image(url: string, width?: number, height?: number): this {\n    return this.push('background-image', `url(${url}}`).push('background-size', `cover`).width(width).height(height)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = new Object(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(block: MessageBlock | string): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block)\n  }\n}\n\nexport default MessageBlock\n","export const isString = (str: any) => typeof str !== 'string'\n\nexport const isEmptyObject = (object: object) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n","import MessageBlock from './MessageBlock'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string) {\n    this.parse(text)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(...args: (MessageBlock | null)[]): this {\n    args.forEach(block => {\n      if (block instanceof MessageBlock) {\n        this.blocks.push(block)\n      }\n    })\n\n    return this\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text))\n    }\n  }\n\n  static instance(block?: Message | MessageBlock | string): Message {\n    return block instanceof Message ? block : new Message(block)\n  }\n}\n\nexport default Message\n","const colors = {\n  black: '#000000',\n  gray: '#1B2B34',\n  red: '#EC5f67',\n  orange: '#F99157',\n  yellow: '#FAC863',\n  green: '#99C794',\n  teal: '#5FB3B3',\n  blue: '#6699CC',\n  purple: '#C594C5',\n  brown: '#AB7967',\n  white: '#FFFFFF',\n}\n\nexport default colors\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport { LEVEL_DEBUG, LEVEL_ERROR, LEVEL_INFO, LEVEL_TRACE } from './LogLevel'\nimport Message from './Message'\nimport colors from './Color'\nimport MessageBlock from './MessageBlock'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  level?: number\n}\n\nclass Logger {\n  private readonly driver: LoggerDriver\n  private logLevel: number = LEVEL_ERROR\n\n  constructor(config: LoggerConfig) {\n    this.driver = config.driver\n    if (config.level) {\n      this.logLevel = config.level\n    }\n  }\n\n  setLevel(level: number): void {\n    this.logLevel = level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  private shouldLog(msgLevel: number) {\n    return this.logLevel <= msgLevel // @todo: bit operations\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(LEVEL_INFO)) {\n      return\n    }\n\n    const msg = Logger.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_DEBUG)) {\n      return\n    }\n\n    this.driver.debug(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_ERROR)) {\n      return\n    }\n\n    this.driver.error(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_TRACE)) {\n      return\n    }\n\n    this.driver.trace(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor = colors.white, color = colors.gray, offset = 0 } = {},\n    baseText?: string | MessageBlock\n  ) {\n    const msg = Message.instance().pushBlock(\n      MessageBlock.instance(panelText)\n        .background(bgColor)\n        .color(color)\n        .offsetLeft(offset)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText).offsetLeft(1) : null\n    )\n\n    this.driver.log(msg)\n  }\n\n  private static buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message()\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText))\n\n    return msg\n  }\n}\n\nexport default Logger\n","import Message from '../Message'\nimport MessageBlock from '../MessageBlock'\nimport { LoggerDriver } from './LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    console[type](...lines)\n    // console[msg.type ?? type](res[0], ...res[1])\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import { LEVEL_ERROR } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\n\nconst BrowserLogger = (level: number = LEVEL_ERROR) => new Logger({ level: level, driver: new ConsoleDriver() })\n\nexport { BrowserLogger }\n"],"names":["MessageBlock","text","Object","_text","key","value","check","this","has","style","undefined","push","vValue","hValue","marginLeft","marginRight","width","color","url","height","object","isEmptyObject","JSON","stringify","block","Message","Array","parse","blocks","args","forEach","_this","length","pushBlock","instance","colors","Logger","config","driver","level","logLevel","msgLevel","msgText","prefix","offset","log","buildMessage","shouldLog","msg","info","debug","error","trace","panelText","bgColor","baseText","background","offsetLeft","borderRadius","padding","offsetRight","ConsoleDriver","perform","type","lines","buildStrings","formatMessage","console","fmt","fmtStr","fmtArgs","getBlocks","formatBlock","str","getText","strStyle","getStyle","keyStyle"],"mappings":"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"}