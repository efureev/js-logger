{"version":3,"file":"bundle.esm.js","sources":["../../src/drivers/ConsoleDriver/index.ts","../../src/drivers/ConsoleBufferDriver/index.ts","../../src/LogLevel.ts","../../src/utils.ts","../../src/MessageBlock.ts","../../src/Message.ts","../../src/Logger.ts","../../src/Color.ts","../../src/ColorCollection.ts","../../src/shorcuts.ts"],"sourcesContent":["import Message from '../../Message'\nimport MessageBlock from '../../MessageBlock'\nimport { LoggerDriver } from '../LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  protected _returnResult: boolean = false\n  protected output: Console = console\n\n  debug(msg: Message): string[] | void {\n    return this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): string[] | void {\n    return this.perform(msg, 'info')\n  }\n\n  log(msg: Message): string[] | void {\n    return this.perform(msg, 'log')\n  }\n\n  error(msg: Message): string[] | void {\n    return this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): string[] | void {\n    return this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string): string[] | void {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    if (!this._returnResult) {\n      // @ts-ignore\n      this.output[type](...lines)\n      return\n    }\n\n    this._returnResult = false\n    return lines\n  }\n\n  public returnResult(): this {\n    this._returnResult = true\n\n    return this\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import ConsoleDriver from '../ConsoleDriver'\nimport Message from '../../Message'\n\nexport interface ConsoleBufferConfig {\n  print?: boolean\n  printFragmented?: boolean\n  debugFn?: Function\n}\n\nexport default class ConsoleBuffer extends ConsoleDriver {\n  private readonly print: boolean = false\n  private readonly printFragmented: boolean = false\n  private readonly debugFn: Function\n\n  constructor({ print, printFragmented, debugFn }: ConsoleBufferConfig = {}) {\n    super()\n    this.print = print || false\n    this.printFragmented = printFragmented || false\n    this.debugFn = debugFn || this.output.dir\n  }\n\n  public buffer: string[] = []\n\n  protected perform(msg: Message, type: string): string[] | void {\n    this.buffer = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n    if (this.print) {\n      this.output.warn('--[debug] start')\n\n      const result = super.perform(msg, type)\n\n      this.debugFn(this.buffer)\n      if (this.printFragmented) {\n        this.performFragmented()\n      }\n      this.output.warn('--[debug] finish')\n      if (this._returnResult) {\n        return result\n      }\n    }\n  }\n\n  private performFragmented() {\n    if (!this.buffer.length) {\n      return\n    }\n\n    const fragments = this.buffer[0].split('%c').slice(1)\n    const styles = this.buffer.slice(1)\n\n    if (fragments.length != styles.length) {\n      this.output.error('data inconsistency error: fragments: %d, styles: %d', fragments.length, styles.length)\n      this.output.log('fragments', fragments)\n      this.output.log('styles', styles)\n    }\n\n    fragments.forEach((fragment, idx) => {\n      this.output.log(`${fragment}: ${styles[idx]}`)\n      this.output.log(`%c${fragment}`, styles[idx])\n    })\n  }\n\n  public clearBuffer() {\n    this.buffer = []\n  }\n}\n","export type LevelType = number\nexport type StringLevelType = LevelType | string\n\nexport const ERROR: LevelType = 1\nexport const INFO: LevelType = 2\nexport const DEBUG: LevelType = 4\nexport const TRACE: LevelType = 8\n\nexport const LEVEL_ERROR: LevelType = ERROR\nexport const LEVEL_INFO: LevelType = LEVEL_ERROR | INFO\nexport const LEVEL_DEBUG: LevelType = LEVEL_INFO | DEBUG\nexport const LEVEL_TRACE: LevelType = LEVEL_DEBUG | TRACE\nexport const LOG_ALL: LevelType = LEVEL_TRACE\n\nexport const ERROR_STR = 'error'\nexport const INFO_STR = 'info'\nexport const DEBUG_STR = 'debug'\nexport const TRACE_STR = 'trace'\n\nexport const LEVEL_INFO_STR = 'levelInfo'\nexport const LEVEL_DEBUG_STR = 'levelDebug'\n\nexport function stringToLevel(value: string): LevelType {\n  switch (value) {\n    case ERROR_STR:\n      return ERROR\n    case INFO_STR:\n      return INFO\n    case DEBUG_STR:\n      return DEBUG\n    case TRACE_STR:\n      return TRACE\n\n    case LEVEL_INFO_STR:\n      return LEVEL_INFO\n    case LEVEL_DEBUG_STR:\n      return LEVEL_DEBUG\n  }\n\n  return LOG_ALL\n}\n\nexport default {\n  ERROR,\n  INFO,\n  DEBUG,\n  TRACE,\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n  LOG_ALL,\n}\n","// export const isString = (str: any) => typeof str !== 'string'\n\nimport { BlockPanel } from './Logger'\n\nexport const isEmptyObject = (object: object | BlockPanel) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n\nexport const isString = (value: any) => typeof value === 'string'\n\nexport const isObject: (v: any) => boolean =\n  Object.prototype.toString.call(null) === '[object Object]'\n    ? function (value: any): boolean {\n        // check ownerDocument here as well to exclude DOM nodes\n        return (\n          value != null &&\n          Object.prototype.toString.call(value) === '[object Object]' &&\n          value.ownerDocument === undefined\n        )\n      }\n    : function (value: any): boolean {\n        return Object.prototype.toString.call(value) === '[object Object]'\n      }\n","import { isEmptyObject } from './utils'\nimport type { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: ColorValue\n  background?: ColorValue\n}\n\ninterface MessageBlockOptions {\n  colors?: ColorCollection\n}\n\nexport interface MessageBlockConfig {\n  text: string\n  bgColor?: ColorValue | string\n  bold?: boolean\n  borderRadius?: number\n  color?: ColorValue | string\n  fontSize?: number\n  italic?: boolean\n  lineHeight?: number\n  offsetLeft?: number\n  offsetRight?: number\n  marginTop?: number\n  marginBottom?: number\n  padding?: number | [number, number]\n}\n\nclass MessageBlock {\n  private _text?: string\n  private readonly colors?: ColorCollection\n  private style: MessageBlockStyle = Object.create(null)\n\n  constructor(text: string | MessageBlockConfig, { colors }: MessageBlockOptions = Object.create(null)) {\n    this.colors = colors\n    if (text === undefined) {\n      throw Error('Invalid `text` argument for MessageBlock')\n    }\n\n    if (typeof text === 'string') {\n      this._text = text\n    } else {\n      this.fillFromConfig(text)\n    }\n  }\n\n  push(key: string, value?: string, check: boolean = false): this {\n    if (value !== undefined && (!check || !this.has('color'))) {\n      this.style[key] = value\n    }\n\n    return this\n  }\n\n  has(key: string): boolean {\n    return this.style[key] !== undefined\n  }\n\n  color(value?: string, check: boolean = false): this {\n    return this.push('color', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  background(value?: string, check: boolean = false): this {\n    return this.push('background', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  marginLeft(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-left', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginRight(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-right', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginTop(value: number, check: boolean = false): this {\n    return this.push('margin-top', `${value}px`, check)\n  }\n\n  marginBottom(value: number, check: boolean = false): this {\n    return this.push('margin-bottom', `${value}px`, check)\n  }\n\n  margin(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('margin', value, check)\n  }\n\n  padding(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('padding', value, check)\n  }\n\n  offsetLeft(value: number, check: boolean = false): this {\n    return this.marginLeft(value * 10, check)\n  }\n\n  offsetRight(value: number, check: boolean = false): this {\n    return this.marginRight(value * 10, check)\n  }\n\n  borderRadius(value: number, check: boolean = false): this {\n    return this.push('border-radius', `${value}px`, check)\n  }\n\n  border(width: number, style: string, color: ColorValue, check: boolean = false): this {\n    return this.push('border', `${width}px ${style} ${color}`, check)\n  }\n\n  size(value: number, check: boolean = false): this {\n    return this.push('font-size', `${value}px`, check)\n  }\n\n  bold(check: boolean = false): this {\n    return this.push('font-weight', 'bold', check)\n  }\n\n  italic(check: boolean = false): this {\n    return this.push('font-style', 'italic', check)\n  }\n\n  lineHeight(value: number, check: boolean = false): this {\n    return this.push('line-height', `${value}px`, check)\n  }\n\n  width(value?: number, check: boolean = false): this {\n    return value ? this.push('width', `${value}px`, check) : this\n  }\n\n  height(value?: number, check: boolean = false): this {\n    return value ? this.push('height', `${value}px`, check) : this\n  }\n\n  image(url: string, width?: number, height?: number): this {\n    return this.push('background-image', `url(${url}}`).push('background-size', `cover`).width(width).height(height)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text || ''\n  }\n\n  fillFromConfig(config: MessageBlockConfig) {\n    this.text(config.text).background(config.bgColor).color(config.color)\n\n    config.offsetLeft && this.offsetLeft(config.offsetLeft)\n    config.offsetRight && this.offsetRight(config.offsetRight)\n    config.borderRadius && this.borderRadius(config.borderRadius)\n    config.bold && this.bold()\n    config.italic && this.italic()\n    config.fontSize && this.size(config.fontSize)\n    config.lineHeight && this.lineHeight(config.lineHeight)\n    config.marginBottom && this.marginBottom(config.marginBottom)\n    config.marginTop && this.marginTop(config.marginTop)\n\n    if (config.padding) {\n      if (Array.isArray(config.padding)) {\n        this.padding(config.padding[0], config.padding[1])\n      } else {\n        this.padding(config.padding)\n      }\n    }\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = Object.create(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(\n    block: MessageBlock | MessageBlockConfig | string,\n    options: MessageBlockOptions = Object.create(null)\n  ): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block, options)\n  }\n}\n\nexport default MessageBlock\n","import MessageBlock from './MessageBlock'\nimport ColorCollection from './ColorCollection'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string, colors?: ColorCollection) {\n    this.parse(text, colors)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(...args: (MessageBlock | null)[]): this {\n    args.forEach(block => {\n      if (block instanceof MessageBlock) {\n        this.blocks.push(block)\n      }\n    })\n\n    return this\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock, colors?: ColorCollection): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text, { colors }))\n    }\n  }\n\n  static instance(block?: Message | MessageBlock | string, colors?: ColorCollection): Message {\n    return block instanceof Message ? block : new Message(block, colors)\n  }\n}\n\nexport default Message\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport ConsoleBufferDriver from './drivers/ConsoleBufferDriver'\nimport type { LevelType } from './LogLevel'\nimport { DEBUG, ERROR, INFO, LOG_ALL, StringLevelType, stringToLevel, TRACE } from './LogLevel'\nimport Message from './Message'\nimport type { MessageBlockConfig } from './MessageBlock'\nimport MessageBlock from './MessageBlock'\nimport { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\nimport { isEmptyObject, isObject, isString } from './utils'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  colors: ColorCollection\n  level?: StringLevelType\n}\n\ninterface PanelOptions {\n  bgColor?: ColorValue | string\n  color?: ColorValue | string\n  offset?: number\n}\n\nexport type BlockPanel = string | MessageBlockConfig | MessageBlock\n\nclass Logger {\n  private driver: LoggerDriver\n  private originDriver?: LoggerDriver\n  private readonly colors: ColorCollection\n\n  private logLevel: LevelType = LOG_ALL\n\n  constructor({ driver, colors, level }: LoggerConfig) {\n    this.driver = driver\n    this.colors = colors\n\n    if (level) {\n      if (typeof level === 'string') {\n        this.logLevel = stringToLevel(level)\n      } else {\n        this.logLevel = level\n      }\n    }\n  }\n\n  setLogLevel(level: LevelType): void {\n    this.logLevel = level\n  }\n\n  addLogLevel(level: LevelType): void {\n    this.logLevel |= level\n  }\n\n  excludeLogLevel(level: LevelType): void {\n    this.logLevel ^= level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  public setDriver(driver: LoggerDriver): this {\n    this.driver = driver\n\n    return this\n  }\n\n  public enableDebug({ printFragmented, debugFn }: { printFragmented?: boolean; debugFn?: Function } = {}): this {\n    this.originDriver = this.driver\n    this.driver = new ConsoleBufferDriver({ print: true, printFragmented, debugFn })\n\n    return this\n  }\n\n  public disableDebug(): this {\n    if (this.originDriver) {\n      this.setDriver(this.originDriver)\n      this.originDriver = undefined\n    }\n\n    return this\n  }\n\n  public returnResult(): this {\n    this.driver.returnResult()\n\n    return this\n  }\n\n  public getColors(): ColorCollection {\n    return this.colors\n  }\n\n  private shouldLog(level: StringLevelType): boolean {\n    if (typeof level === 'string') {\n      level = stringToLevel(level)\n    }\n\n    return (this.logLevel & level) !== 0\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): string[] | void {\n    return this.driver.log(this.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): string[] | void {\n    if (!this.shouldLog(INFO)) {\n      return\n    }\n\n    const msg = this.buildMessage(msgText, prefix, offset)\n\n    return this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): string[] | void {\n    if (!this.shouldLog(DEBUG)) {\n      return\n    }\n\n    return this.driver.debug(this.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): string[] | void {\n    if (!this.shouldLog(ERROR)) {\n      return\n    }\n\n    return this.driver.error(this.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): string[] | void {\n    if (!this.shouldLog(TRACE)) {\n      return\n    }\n\n    return this.driver.trace(this.buildMessage(msgText, prefix, offset))\n  }\n\n  /**\n   * @deprecated\n   * @use panels\n   */\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor, color, offset }: PanelOptions = Object.create(null),\n    baseText?: string | MessageBlock,\n    logLevel?: StringLevelType\n  ): string[] | void {\n    if (logLevel && !this.shouldLog(logLevel)) {\n      return\n    }\n\n    const msg = Message.instance(undefined, this.colors).pushBlock(\n      MessageBlock.instance(panelText, { colors: this.colors })\n        .background(bgColor || 'white')\n        .color(color || 'gray')\n        .offsetLeft(offset || 0)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText, { colors: this.colors }).offsetLeft(1) : null\n    )\n\n    return this.driver.log(msg)\n  }\n\n  panels(logLevel?: StringLevelType, ...blockConfigs: BlockPanel[]): string[] | void {\n    if (!blockConfigs.length || (logLevel && !this.shouldLog(logLevel))) {\n      return\n    }\n\n    const blocks: MessageBlock[] = []\n    blockConfigs.forEach(blockConfig => {\n      if ((isString(blockConfig) && blockConfig !== '') || (isObject(blockConfig) && !isEmptyObject(blockConfig))) {\n        blocks.push(MessageBlock.instance(blockConfig, { colors: this.colors }))\n      }\n    })\n\n    if (!blocks.length) {\n      return\n    }\n\n    const msg = Message.instance().pushBlock(...blocks)\n\n    return this.driver.log(msg)\n  }\n\n  private buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message(undefined, this.colors)\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix, { colors: this.colors }).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText, { colors: this.colors }))\n\n    return msg\n  }\n}\n\nexport default Logger\n","/*\nimport { Enumerate } from './helper-types'\n\ntype RGBDigit = Enumerate<256>\n\ntype RGB = `rgb(${RGBDigit}, ${RGBDigit}, ${number})`;\ntype RGBA = `rgba(${RGBDigit}, ${RGBDigit}, ${number}, ${number})`;\n\ntype HexDigit =\n  '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F';\n\ntype MinHexDigitColor = `${HexDigit}${HexDigit}${HexDigit}`;\ntype ShortHexColor = `#${MinHexDigitColor}`;\ntype LongHexColor = `${ShortHexColor}${MinHexDigitColor}`;\ntype HexColor = LongHexColor | ShortHexColor;\n*/\n\ntype RGB = `rgb(${number}, ${number}, ${number})`\ntype RGBA = `rgba(${number}, ${number}, ${number}, ${number})`\ntype HexColor = `#${string}`\n\nexport type ColorValue = HexColor | RGB | RGBA\ntype ColorsType = Record<string, ColorValue>\n\nconst colors: ColorsType = {\n  black: '#000000',\n  gray: '#1B2B34',\n  grayLight: '#334048',\n  red: '#ff000f',\n  redLight: '#EC5f67',\n  orange: '#F99157',\n  yellow: '#FAC863',\n  green: '#14be00',\n  greenLight: '#99C794',\n  teal: '#5FB3B3',\n  blue: '#6699CC',\n  purple: '#C594C5',\n  brown: '#AB7967',\n  white: '#FFFFFF',\n}\n\nexport default colors\n","import { ColorValue } from './Color'\n\ntype ListCollectionType = Record<string, ColorValue>\n\nexport default class ColorCollection {\n  list: ListCollectionType = {}\n\n  constructor(list?: ListCollectionType) {\n    if (list) {\n      this.setCollection(list)\n    }\n  }\n\n  set(name: string, value: ColorValue): this {\n    this.list[name] = value\n\n    return this\n  }\n\n  setCollection(colors: ListCollectionType): this {\n    Object.keys(colors).forEach(name => {\n      this.set(name, colors[name])\n    })\n\n    return this\n  }\n\n  get(name?: string): ColorValue | undefined {\n    return name ? this.list[name] : undefined\n  }\n\n  remove(name: string): this {\n    delete this.list[name]\n\n    return this\n  }\n}\n","import type { LevelType } from './LogLevel'\nimport { LOG_ALL } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\nimport ColorCollection from './ColorCollection'\nimport colors from './Color'\n\nconst BrowserLogger = (level: LevelType | string = LOG_ALL) =>\n  new Logger({\n    driver: new ConsoleDriver(),\n    colors: new ColorCollection(colors),\n    level: level,\n  })\n\nexport { BrowserLogger }\n"],"names":["ConsoleDriver","console","msg","perform","type","lines","buildStrings","formatMessage","_returnResult","output","fmt","fmtStr","fmtArgs","getBlocks","forEach","block","formatBlock","str","args","push","getText","strStyle","style","getStyle","keyStyle","ConsoleBuffer","print","printFragmented","debugFn","dir","buffer","warn","result","performFragmented","length","fragments","split","slice","styles","error","log","fragment","idx","ERROR","INFO","DEBUG","TRACE","LEVEL_ERROR","LEVEL_INFO","LEVEL_DEBUG","LEVEL_TRACE","LOG_ALL","ERROR_STR","INFO_STR","DEBUG_STR","TRACE_STR","LEVEL_INFO_STR","LEVEL_DEBUG_STR","stringToLevel","value","isEmptyObject","object","isString","isObject","Object","prototype","toString","call","ownerDocument","undefined","MessageBlock","text","create","colors","Error","_text","fillFromConfig","key","check","has","get","vValue","hValue","marginLeft","marginRight","width","color","url","height","config","background","bgColor","offsetLeft","offsetRight","borderRadius","bold","italic","fontSize","size","lineHeight","marginBottom","marginTop","padding","Array","isArray","JSON","stringify","options","Message","parse","blocks","pushBlock","instance","Logger","driver","level","logLevel","originDriver","ConsoleBufferDriver","setDriver","returnResult","msgText","prefix","offset","buildMessage","shouldLog","info","debug","trace","panelText","baseText","blockConfigs","blockConfig","black","gray","grayLight","red","redLight","orange","yellow","green","greenLight","teal","blue","purple","brown","white","ColorCollection","list","setCollection","name","keys","set","BrowserLogger"],"mappings":"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"}