{"version":3,"file":"bundle.esm.js","sources":["../../src/LogLevel.ts","../../src/utils.ts","../../src/MessageBlock.ts","../../src/Message.ts","../../src/Logger.ts","../../src/drivers/ConsoleDriver.ts","../../src/shorcuts.ts"],"sourcesContent":["export const LEVEL_ERROR: number = 1 << 0\nexport const LEVEL_INFO: number = 1 << 1\nexport const LEVEL_DEBUG: number = 1 << 2\nexport const LEVEL_TRACE: number = 1 << 3\n\nexport default {\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n}\n","export const isString = (str: any) => typeof str !== 'string'\n\nexport const isEmptyObject = (object: object) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n","import { isEmptyObject } from './utils'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: string\n  background?: string\n}\n\nclass MessageBlock {\n  private _text: string\n  private style: MessageBlockStyle = new Object(null)\n\n  constructor(text: string) {\n    this._text = text\n  }\n\n  push(key: string, value: string): this {\n    this.style[key] = value\n\n    return this\n  }\n\n  color(value: string): this {\n    return this.push('color', value)\n  }\n\n  background(value: string): this {\n    return this.push('background', value)\n  }\n\n  marginLeft(value: number): this {\n    return this.push('margin-left', `${value}px`)\n  }\n\n  marginRight(value: number): this {\n    return this.push('margin-right', `${value}px`)\n  }\n\n  marginTop(value: number): this {\n    return this.push('margin-top', `${value}px`)\n  }\n\n  marginBottom(value: number): this {\n    return this.push('margin-bottom', `${value}px`)\n  }\n\n  margin(vValue: number, hValue?: number): this {\n    let value = `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('margin', value)\n  }\n\n  padding(vValue: number, hValue?: number): this {\n    let value = `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('padding', value)\n  }\n\n  offsetLeft(value: number): this {\n    return this.marginLeft(value * 10)\n  }\n\n  offsetRight(value: number): this {\n    return this.marginRight(value * 10)\n  }\n\n  borderRadius(value: number): this {\n    return this.push('border-radius', `${value}px`)\n  }\n\n  border(width: number, style: string, color: string): this {\n    return this.push('border', `${width}px ${style} ${color}`)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = new Object(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(block: MessageBlock | string): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block)\n  }\n}\n\nexport default MessageBlock\n","import MessageBlock from './MessageBlock'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string) {\n    this.parse(text)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(...args: MessageBlock[]): this {\n    args.forEach(block => {\n      this.blocks.push(block)\n    })\n\n    return this\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text))\n    }\n  }\n\n  static instance(block?: Message | MessageBlock | string): Message {\n    return block instanceof Message ? block : new Message(block)\n  }\n}\n\nexport default Message\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport { LEVEL_DEBUG, LEVEL_ERROR, LEVEL_INFO, LEVEL_TRACE } from './LogLevel'\nimport Message from './Message'\nimport MessageBlock from './MessageBlock'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  level?: number\n}\n\nclass Logger {\n  private readonly driver: LoggerDriver\n  private logLevel: number = LEVEL_ERROR\n\n  constructor(config: LoggerConfig) {\n    this.driver = config.driver\n    if (config.level) {\n      this.logLevel = config.level\n    }\n  }\n\n  setLevel(level: number): void {\n    this.logLevel = level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  private shouldLog(msgLevel: number) {\n    return this.logLevel <= msgLevel // @todo: bit operations\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(LEVEL_INFO)) {\n      return\n    }\n\n    const msg = Logger.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_DEBUG)) {\n      return\n    }\n\n    this.driver.debug(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_ERROR)) {\n      return\n    }\n\n    this.driver.error(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_TRACE)) {\n      return\n    }\n\n    this.driver.trace(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  private static buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message()\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText))\n\n    return msg\n  }\n}\n\nexport default Logger\n","import Message from '../Message'\nimport MessageBlock from '../MessageBlock'\nimport { LoggerDriver } from './LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    console[type](...lines)\n    // console[msg.type ?? type](res[0], ...res[1])\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import { LEVEL_ERROR } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\n\nconst BrowserLogger = (level: number = LEVEL_ERROR) => new Logger({ level: level, driver: new ConsoleDriver() })\n\nexport { BrowserLogger }\n"],"names":["LEVEL_ERROR","LEVEL_INFO","LEVEL_DEBUG","LEVEL_TRACE","isEmptyObject","object","MessageBlock","text","Object","_text","key","value","style","push","vValue","hValue","undefined","marginLeft","marginRight","width","color","JSON","stringify","block","Message","Array","parse","blocks","args","forEach","length","pushBlock","instance","Logger","config","driver","level","logLevel","msgLevel","msgText","prefix","offset","log","buildMessage","shouldLog","msg","info","debug","error","trace","offsetRight","offsetLeft","ConsoleDriver","perform","type","lines","buildStrings","formatMessage","console","fmt","fmtStr","fmtArgs","getBlocks","formatBlock","str","getText","strStyle","getStyle","keyStyle","BrowserLogger"],"mappings":"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"}