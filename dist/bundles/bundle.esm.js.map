{"version":3,"file":"bundle.esm.js","sources":["../../src/LogLevel.ts","../../src/utils.ts","../../src/MessageBlock.ts","../../src/Message.ts","../../src/Logger.ts","../../src/Color.ts","../../src/drivers/ConsoleDriver/index.ts","../../src/ColorCollection.ts","../../src/shorcuts.ts"],"sourcesContent":["export type LevelType = number\n\nexport const ERROR: LevelType = 1\nexport const INFO: LevelType = 2\nexport const DEBUG: LevelType = 4\nexport const TRACE: LevelType = 8\n\nexport const LEVEL_ERROR: LevelType = ERROR\nexport const LEVEL_INFO: LevelType = LEVEL_ERROR | INFO\nexport const LEVEL_DEBUG: LevelType = LEVEL_INFO | DEBUG\nexport const LEVEL_TRACE: LevelType = LEVEL_DEBUG | TRACE\nexport const LOG_ALL: LevelType = LEVEL_TRACE\n\nexport default {\n  ERROR,\n  INFO,\n  DEBUG,\n  TRACE,\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n  LOG_ALL,\n}\n","// export const isString = (str: any) => typeof str !== 'string'\n\nexport const isEmptyObject = (object: object) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n","import { isEmptyObject } from './utils'\nimport type { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: ColorValue\n  background?: ColorValue\n}\n\ninterface MessageBlockOptions {\n  colors?: ColorCollection\n}\n\nclass MessageBlock {\n  private colors?: ColorCollection\n  private _text: string\n  private style: MessageBlockStyle = new Object(null)\n\n  constructor(text: string, { colors }: MessageBlockOptions = {}) {\n    this.colors = colors\n    this._text = text\n  }\n\n  push(key: string, value?: string, check: boolean = false): this {\n    if (value !== undefined && (!check || !this.has('color'))) {\n      this.style[key] = value\n    }\n\n    return this\n  }\n\n  has(key: string): boolean {\n    return this.style[key] !== undefined\n  }\n\n  color(value?: string, check: boolean = false): this {\n    return this.push('color', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  background(value?: string, check: boolean = false): this {\n    return this.push('background', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  marginLeft(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-left', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginRight(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-right', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginTop(value: number, check: boolean = false): this {\n    return this.push('margin-top', `${value}px`, check)\n  }\n\n  marginBottom(value: number, check: boolean = false): this {\n    return this.push('margin-bottom', `${value}px`, check)\n  }\n\n  margin(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('margin', value, check)\n  }\n\n  padding(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('padding', value, check)\n  }\n\n  offsetLeft(value: number, check: boolean = false): this {\n    return this.marginLeft(value * 10, check)\n  }\n\n  offsetRight(value: number, check: boolean = false): this {\n    return this.marginRight(value * 10, check)\n  }\n\n  borderRadius(value: number, check: boolean = false): this {\n    return this.push('border-radius', `${value}px`, check)\n  }\n\n  border(width: number, style: string, color: ColorValue, check: boolean = false): this {\n    return this.push('border', `${width}px ${style} ${color}`, check)\n  }\n\n  size(value: number, check: boolean = false): this {\n    return this.push('font-size', `${value}px`, check)\n  }\n\n  bold(check: boolean = false): this {\n    return this.push('font-weight', 'bold', check)\n  }\n\n  italic(check: boolean = false): this {\n    return this.push('font-style', 'italic', check)\n  }\n\n  lineHeight(value: number, check: boolean = false): this {\n    return this.push('line-height', `${value}px`, check)\n  }\n\n  width(value?: number, check: boolean = false): this {\n    return value ? this.push('width', `${value}px`, check) : this\n  }\n\n  height(value?: number, check: boolean = false): this {\n    return value ? this.push('height', `${value}px`, check) : this\n  }\n\n  image(url: string, width?: number, height?: number): this {\n    return this.push('background-image', `url(${url}}`).push('background-size', `cover`).width(width).height(height)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = new Object(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(block: MessageBlock | string, options: MessageBlockOptions = {}): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block, options)\n  }\n}\n\nexport default MessageBlock\n","import MessageBlock from './MessageBlock'\nimport ColorCollection from './ColorCollection'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string, colors?: ColorCollection) {\n    this.parse(text, colors)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(...args: (MessageBlock | null)[]): this {\n    args.forEach(block => {\n      if (block instanceof MessageBlock) {\n        this.blocks.push(block)\n      }\n    })\n\n    return this\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock, colors?: ColorCollection): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text, { colors }))\n    }\n  }\n\n  static instance(block?: Message | MessageBlock | string, colors?: ColorCollection): Message {\n    return block instanceof Message ? block : new Message(block, colors)\n  }\n}\n\nexport default Message\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport type { LevelType } from './LogLevel'\nimport { DEBUG, ERROR, INFO, LOG_ALL, TRACE } from './LogLevel'\nimport Message from './Message'\nimport MessageBlock from './MessageBlock'\nimport { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  colors: ColorCollection\n  level?: LevelType\n}\n\ninterface PanelOptions {\n  bgColor?: ColorValue\n  color?: ColorValue\n  offset?: number\n}\n\nclass Logger {\n  private readonly driver: LoggerDriver\n  private readonly colors: ColorCollection\n\n  private logLevel: LevelType = LOG_ALL\n\n  constructor({ driver, colors, level }: LoggerConfig) {\n    this.driver = driver\n    this.colors = colors\n\n    if (level) {\n      this.logLevel = level\n    }\n  }\n\n  setLevel(level: LevelType): void {\n    this.logLevel = level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  public getColors(): ColorCollection {\n    return this.colors\n  }\n\n  private shouldLog(msgLevel: number): boolean {\n    return (this.logLevel & msgLevel) !== 0\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(this.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(INFO)) {\n      return\n    }\n\n    const msg = this.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(DEBUG)) {\n      return\n    }\n\n    this.driver.debug(this.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(ERROR)) {\n      return\n    }\n\n    this.driver.error(this.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(TRACE)) {\n      return\n    }\n\n    this.driver.trace(this.buildMessage(msgText, prefix, offset))\n  }\n\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor, color, offset }: PanelOptions = {},\n    baseText?: string | MessageBlock\n  ) {\n    const msg = Message.instance(undefined, this.colors).pushBlock(\n      MessageBlock.instance(panelText, { colors: this.colors })\n        .background(bgColor || 'white')\n        .color(color || 'gray')\n        .offsetLeft(offset || 0)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText, { colors: this.colors }).offsetLeft(1) : null\n    )\n\n    this.driver.log(msg)\n  }\n\n  private buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message(undefined, this.colors)\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix, { colors: this.colors }).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText, { colors: this.colors }))\n\n    return msg\n  }\n}\n\nexport default Logger\n","/*\nimport { Enumerate } from './helper-types'\n\ntype RGBDigit = Enumerate<256>\n\ntype RGB = `rgb(${RGBDigit}, ${RGBDigit}, ${number})`;\ntype RGBA = `rgba(${RGBDigit}, ${RGBDigit}, ${number}, ${number})`;\n\ntype HexDigit =\n  '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F';\n\ntype MinHexDigitColor = `${HexDigit}${HexDigit}${HexDigit}`;\ntype ShortHexColor = `#${MinHexDigitColor}`;\ntype LongHexColor = `${ShortHexColor}${MinHexDigitColor}`;\ntype HexColor = LongHexColor | ShortHexColor;\n*/\n\ntype RGB = `rgb(${number}, ${number}, ${number})`\ntype RGBA = `rgba(${number}, ${number}, ${number}, ${number})`\ntype HexColor = `#${string}`\n\nexport type ColorValue = HexColor | RGB | RGBA\ntype ColorsType = Record<string, ColorValue>\n\nconst colors: ColorsType = {\n  black: '#000000',\n  gray: '#1B2B34',\n  red: '#EC5f67',\n  orange: '#F99157',\n  yellow: '#FAC863',\n  green: '#99C794',\n  teal: '#5FB3B3',\n  blue: '#6699CC',\n  purple: '#C594C5',\n  brown: '#AB7967',\n  white: '#FFFFFF',\n}\n\nexport default colors\n","import Message from '../../Message'\nimport MessageBlock from '../../MessageBlock'\nimport { LoggerDriver } from '../LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    console[type](...lines)\n    // console[msg.type ?? type](res[0], ...res[1])\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import { ColorValue } from './Color'\n\ntype ListCollectionType = Record<string, ColorValue>\n\nexport default class ColorCollection {\n  list: ListCollectionType = {}\n\n  constructor(list?: ListCollectionType) {\n    if (list) {\n      this.setCollection(list)\n    }\n  }\n\n  set(name: string, value: ColorValue): this {\n    this.list[name] = value\n\n    return this\n  }\n\n  setCollection(colors: ListCollectionType): this {\n    Object.keys(colors).forEach(name => {\n      this.set(name, colors[name])\n    })\n\n    return this\n  }\n\n  get(name?: string): ColorValue | undefined {\n    return name ? this.list[name] : undefined\n  }\n\n  remove(name: string): this {\n    delete this.list[name]\n\n    return this\n  }\n}\n","import type { LevelType } from './LogLevel'\nimport { LOG_ALL } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\nimport ColorCollection from './ColorCollection'\nimport colors from './Color'\n\nconst BrowserLogger = (level: LevelType = LOG_ALL) =>\n  new Logger({\n    driver: new ConsoleDriver(),\n    colors: new ColorCollection(colors),\n    level: level,\n  })\n\nexport { BrowserLogger }\n"],"names":["ERROR","INFO","DEBUG","TRACE","LEVEL_ERROR","LEVEL_INFO","LEVEL_DEBUG","LEVEL_TRACE","LOG_ALL","isEmptyObject","object","MessageBlock","text","colors","Object","_text","key","value","check","undefined","has","style","push","get","vValue","hValue","marginLeft","marginRight","width","color","url","height","JSON","stringify","block","options","Message","Array","parse","blocks","args","forEach","length","pushBlock","instance","Logger","driver","level","logLevel","msgLevel","msgText","prefix","offset","log","buildMessage","shouldLog","msg","info","debug","error","trace","panelText","bgColor","baseText","background","offsetLeft","borderRadius","padding","offsetRight","black","gray","red","orange","yellow","green","teal","blue","purple","brown","white","ConsoleDriver","perform","type","lines","buildStrings","formatMessage","console","fmt","fmtStr","fmtArgs","getBlocks","formatBlock","str","getText","strStyle","getStyle","keyStyle","ColorCollection","list","setCollection","name","keys","set","BrowserLogger"],"mappings":"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"}