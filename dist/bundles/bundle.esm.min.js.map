{"version":3,"file":"bundle.esm.min.js","sources":["../../src/drivers/ConsoleDriver/index.ts","../../src/drivers/ConsoleBufferDriver/index.ts","../../src/LogLevel.ts","../../src/utils.ts","../../src/MessageBlock.ts","../../src/Message.ts","../../src/Logger.ts","../../src/Color.ts","../../src/ColorCollection.ts","../../src/shorcuts.ts"],"sourcesContent":["import Message from '../../Message'\nimport MessageBlock from '../../MessageBlock'\nimport { LoggerDriver } from '../LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  protected output = console\n\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    this.output[type](...lines)\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import ConsoleDriver from '../ConsoleDriver'\nimport Message from '../../Message'\n\nexport interface ConsoleBufferConfig {\n  print?: boolean\n  printFragmented?: boolean\n  debugFn?: Function\n}\n\nexport default class ConsoleBuffer extends ConsoleDriver {\n  private readonly print: boolean = false\n  private readonly printFragmented: boolean = false\n  private readonly debugFn: Function\n\n  constructor({ print, printFragmented, debugFn }: ConsoleBufferConfig = {}) {\n    super()\n    this.print = print || false\n    this.printFragmented = printFragmented || false\n    this.debugFn = debugFn || this.output.dir\n  }\n\n  public buffer: string[] = []\n\n  protected perform(msg: Message, type: string) {\n    this.buffer = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n    if (this.print) {\n      this.output.warn('--[debug] start')\n      super.perform(msg, type)\n      this.debugFn(this.buffer)\n      if (this.printFragmented) {\n        this.performFragmented()\n      }\n      this.output.warn('--[debug] finish')\n    }\n  }\n\n  private performFragmented() {\n    if (!this.buffer.length) {\n      return\n    }\n\n    const fragments = this.buffer[0].split('%c').slice(1)\n    const styles = this.buffer.slice(1)\n\n    if (fragments.length != styles.length) {\n      this.output.error('data inconsistency error: fragments: %d, styles: %d', fragments.length, styles.length)\n      this.output.log('fragments', fragments)\n      this.output.log('styles', styles)\n    }\n\n    fragments.forEach((fragment, idx) => {\n      this.output.log(`${fragment}: ${styles[idx]}`)\n      this.output.log(`%c${fragment}`, styles[idx])\n    })\n  }\n\n  public clearBuffer() {\n    this.buffer = []\n  }\n}\n","export type LevelType = number\nexport type StringLevelType = LevelType | string\n\nexport const ERROR: LevelType = 1\nexport const INFO: LevelType = 2\nexport const DEBUG: LevelType = 4\nexport const TRACE: LevelType = 8\n\nexport const LEVEL_ERROR: LevelType = ERROR\nexport const LEVEL_INFO: LevelType = LEVEL_ERROR | INFO\nexport const LEVEL_DEBUG: LevelType = LEVEL_INFO | DEBUG\nexport const LEVEL_TRACE: LevelType = LEVEL_DEBUG | TRACE\nexport const LOG_ALL: LevelType = LEVEL_TRACE\n\nexport const ERROR_STR = 'error'\nexport const INFO_STR = 'info'\nexport const DEBUG_STR = 'debug'\nexport const TRACE_STR = 'trace'\n\nexport const LEVEL_INFO_STR = 'levelInfo'\nexport const LEVEL_DEBUG_STR = 'levelDebug'\n\nexport function stringToLevel(value: string): LevelType {\n  switch (value) {\n    case ERROR_STR:\n      return ERROR\n    case INFO_STR:\n      return INFO\n    case DEBUG_STR:\n      return DEBUG\n    case TRACE_STR:\n      return TRACE\n\n    case LEVEL_INFO_STR:\n      return LEVEL_INFO\n    case LEVEL_DEBUG_STR:\n      return LEVEL_DEBUG\n  }\n\n  return LOG_ALL\n}\n\nexport default {\n  ERROR,\n  INFO,\n  DEBUG,\n  TRACE,\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n  LOG_ALL,\n}\n","// export const isString = (str: any) => typeof str !== 'string'\n\nimport { BlockPanel } from './Logger'\n\nexport const isEmptyObject = (object: object | BlockPanel) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n\nexport const isString = (value: any) => typeof value === 'string'\n\nexport const isObject: (v: any) => boolean =\n  Object.prototype.toString.call(null) === '[object Object]'\n    ? function(value: any): boolean {\n      // check ownerDocument here as well to exclude DOM nodes\n      return (\n        value != null &&\n        Object.prototype.toString.call(value) === '[object Object]' &&\n        value.ownerDocument === undefined\n      )\n    }\n    : function(value: any): boolean {\n      return Object.prototype.toString.call(value) === '[object Object]'\n    }\n","import { isEmptyObject } from './utils'\nimport type { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: ColorValue\n  background?: ColorValue\n}\n\ninterface MessageBlockOptions {\n  colors?: ColorCollection\n}\n\nexport interface MessageBlockConfig {\n  text: string\n  bgColor?: ColorValue | string\n  bold?: boolean\n  borderRadius?: number\n  color?: ColorValue | string\n  fontSize?: number\n  italic?: boolean\n  lineHeight?: number\n  offsetLeft?: number\n  offsetRight?: number\n  marginTop?: number\n  marginBottom?: number\n  padding?: number | [number, number]\n}\n\nclass MessageBlock {\n  private _text?: string\n  private readonly colors?: ColorCollection\n  private style: MessageBlockStyle = Object.create(null)\n\n  constructor(text: string | MessageBlockConfig, { colors }: MessageBlockOptions = Object.create(null)) {\n    this.colors = colors\n    if (text === undefined) {\n      throw Error('Invalid `text` argument for MessageBlock')\n    }\n\n    if (typeof text === 'string') {\n      this._text = text\n    } else {\n      this.fillFromConfig(text)\n    }\n  }\n\n  push(key: string, value?: string, check: boolean = false): this {\n    if (value !== undefined && (!check || !this.has('color'))) {\n      this.style[key] = value\n    }\n\n    return this\n  }\n\n  has(key: string): boolean {\n    return this.style[key] !== undefined\n  }\n\n  color(value?: string, check: boolean = false): this {\n    return this.push('color', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  background(value?: string, check: boolean = false): this {\n    return this.push('background', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  marginLeft(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-left', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginRight(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-right', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginTop(value: number, check: boolean = false): this {\n    return this.push('margin-top', `${value}px`, check)\n  }\n\n  marginBottom(value: number, check: boolean = false): this {\n    return this.push('margin-bottom', `${value}px`, check)\n  }\n\n  margin(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('margin', value, check)\n  }\n\n  padding(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('padding', value, check)\n  }\n\n  offsetLeft(value: number, check: boolean = false): this {\n    return this.marginLeft(value * 10, check)\n  }\n\n  offsetRight(value: number, check: boolean = false): this {\n    return this.marginRight(value * 10, check)\n  }\n\n  borderRadius(value: number, check: boolean = false): this {\n    return this.push('border-radius', `${value}px`, check)\n  }\n\n  border(width: number, style: string, color: ColorValue, check: boolean = false): this {\n    return this.push('border', `${width}px ${style} ${color}`, check)\n  }\n\n  size(value: number, check: boolean = false): this {\n    return this.push('font-size', `${value}px`, check)\n  }\n\n  bold(check: boolean = false): this {\n    return this.push('font-weight', 'bold', check)\n  }\n\n  italic(check: boolean = false): this {\n    return this.push('font-style', 'italic', check)\n  }\n\n  lineHeight(value: number, check: boolean = false): this {\n    return this.push('line-height', `${value}px`, check)\n  }\n\n  width(value?: number, check: boolean = false): this {\n    return value ? this.push('width', `${value}px`, check) : this\n  }\n\n  height(value?: number, check: boolean = false): this {\n    return value ? this.push('height', `${value}px`, check) : this\n  }\n\n  image(url: string, width?: number, height?: number): this {\n    return this.push('background-image', `url(${url}}`).push('background-size', `cover`).width(width).height(height)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text || ''\n  }\n\n  fillFromConfig(config: MessageBlockConfig) {\n    this.text(config.text).background(config.bgColor).color(config.color)\n\n    config.offsetLeft && this.offsetLeft(config.offsetLeft)\n    config.offsetRight && this.offsetRight(config.offsetRight)\n    config.borderRadius && this.borderRadius(config.borderRadius)\n    config.bold && this.bold()\n    config.italic && this.italic()\n    config.fontSize && this.size(config.fontSize)\n    config.lineHeight && this.lineHeight(config.lineHeight)\n    config.marginBottom && this.marginBottom(config.marginBottom)\n    config.marginTop && this.marginTop(config.marginTop)\n\n    if (config.padding) {\n      if (Array.isArray(config.padding)) {\n        this.padding(config.padding[0], config.padding[1])\n      } else {\n        this.padding(config.padding)\n      }\n    }\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = Object.create(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(\n    block: MessageBlock | MessageBlockConfig | string,\n    options: MessageBlockOptions = Object.create(null)\n  ): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block, options)\n  }\n}\n\nexport default MessageBlock\n","import MessageBlock from './MessageBlock'\nimport ColorCollection from './ColorCollection'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string, colors?: ColorCollection) {\n    this.parse(text, colors)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(...args: (MessageBlock | null)[]): this {\n    args.forEach(block => {\n      if (block instanceof MessageBlock) {\n        this.blocks.push(block)\n      }\n    })\n\n    return this\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock, colors?: ColorCollection): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text, { colors }))\n    }\n  }\n\n  static instance(block?: Message | MessageBlock | string, colors?: ColorCollection): Message {\n    return block instanceof Message ? block : new Message(block, colors)\n  }\n}\n\nexport default Message\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport ConsoleBufferDriver from './drivers/ConsoleBufferDriver'\nimport type { LevelType } from './LogLevel'\nimport { DEBUG, ERROR, INFO, LOG_ALL, StringLevelType, stringToLevel, TRACE } from './LogLevel'\nimport Message from './Message'\nimport type { MessageBlockConfig } from './MessageBlock'\nimport MessageBlock from './MessageBlock'\nimport { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\nimport { isEmptyObject, isObject, isString } from './utils'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  colors: ColorCollection\n  level?: StringLevelType\n}\n\ninterface PanelOptions {\n  bgColor?: ColorValue | string\n  color?: ColorValue | string\n  offset?: number\n}\n\nexport type BlockPanel = string | MessageBlockConfig | MessageBlock\n\nclass Logger {\n  private driver: LoggerDriver\n  private originDriver?: LoggerDriver\n  private readonly colors: ColorCollection\n\n  private logLevel: LevelType = LOG_ALL\n\n  constructor({ driver, colors, level }: LoggerConfig) {\n    this.driver = driver\n    this.colors = colors\n\n    if (level) {\n      if (typeof level === 'string') {\n        this.logLevel = stringToLevel(level)\n      } else {\n        this.logLevel = level\n      }\n    }\n  }\n\n  setLogLevel(level: LevelType): void {\n    this.logLevel = level\n  }\n\n  addLogLevel(level: LevelType): void {\n    this.logLevel |= level\n  }\n\n  excludeLogLevel(level: LevelType): void {\n    this.logLevel ^= level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  public setDriver(driver: LoggerDriver): this {\n    this.driver = driver\n\n    return this\n  }\n\n  public enableDebug({ printFragmented, debugFn }: { printFragmented?: boolean; debugFn?: Function } = {}): this {\n    this.originDriver = this.driver\n    this.driver = new ConsoleBufferDriver({ print: true, printFragmented, debugFn })\n\n    return this\n  }\n\n  public disableDebug(): this {\n    if (this.originDriver) {\n      this.setDriver(this.originDriver)\n      this.originDriver = undefined\n    }\n\n    return this\n  }\n\n  public getColors(): ColorCollection {\n    return this.colors\n  }\n\n  private shouldLog(level: StringLevelType): boolean {\n    if (typeof level === 'string') {\n      level = stringToLevel(level)\n    }\n\n    return (this.logLevel & level) !== 0\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(this.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(INFO)) {\n      return\n    }\n\n    const msg = this.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(DEBUG)) {\n      return\n    }\n\n    this.driver.debug(this.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(ERROR)) {\n      return\n    }\n\n    this.driver.error(this.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(TRACE)) {\n      return\n    }\n\n    this.driver.trace(this.buildMessage(msgText, prefix, offset))\n  }\n\n  /**\n   * @deprecated\n   * @use panels\n   */\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor, color, offset }: PanelOptions = Object.create(null),\n    baseText?: string | MessageBlock,\n    logLevel?: StringLevelType\n  ) {\n    if (logLevel && !this.shouldLog(logLevel)) {\n      return\n    }\n\n    const msg = Message.instance(undefined, this.colors).pushBlock(\n      MessageBlock.instance(panelText, { colors: this.colors })\n        .background(bgColor || 'white')\n        .color(color || 'gray')\n        .offsetLeft(offset || 0)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText, { colors: this.colors }).offsetLeft(1) : null\n    )\n\n    this.driver.log(msg)\n  }\n\n  panels(logLevel?: StringLevelType, ...blockConfigs: BlockPanel[]) {\n    if (!blockConfigs.length || (logLevel && !this.shouldLog(logLevel))) {\n      return\n    }\n\n    const blocks: MessageBlock[] = []\n    blockConfigs.forEach(blockConfig => {\n      if ((isString(blockConfig) && blockConfig !== '') || (isObject(blockConfig) && !isEmptyObject(blockConfig))) {\n        blocks.push(MessageBlock.instance(blockConfig, { colors: this.colors }))\n      }\n    })\n\n    if (!blocks.length) {\n      return\n    }\n\n    const msg = Message.instance().pushBlock(...blocks)\n\n    this.driver.log(msg)\n  }\n\n  private buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message(undefined, this.colors)\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix, { colors: this.colors }).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText, { colors: this.colors }))\n\n    return msg\n  }\n}\n\nexport default Logger\n","/*\nimport { Enumerate } from './helper-types'\n\ntype RGBDigit = Enumerate<256>\n\ntype RGB = `rgb(${RGBDigit}, ${RGBDigit}, ${number})`;\ntype RGBA = `rgba(${RGBDigit}, ${RGBDigit}, ${number}, ${number})`;\n\ntype HexDigit =\n  '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F';\n\ntype MinHexDigitColor = `${HexDigit}${HexDigit}${HexDigit}`;\ntype ShortHexColor = `#${MinHexDigitColor}`;\ntype LongHexColor = `${ShortHexColor}${MinHexDigitColor}`;\ntype HexColor = LongHexColor | ShortHexColor;\n*/\n\ntype RGB = `rgb(${number}, ${number}, ${number})`\ntype RGBA = `rgba(${number}, ${number}, ${number}, ${number})`\ntype HexColor = `#${string}`\n\nexport type ColorValue = HexColor | RGB | RGBA\ntype ColorsType = Record<string, ColorValue>\n\nconst colors: ColorsType = {\n  black: '#000000',\n  gray: '#1B2B34',\n  grayLight: '#334048',\n  red: '#ff000f',\n  redLight: '#EC5f67',\n  orange: '#F99157',\n  yellow: '#FAC863',\n  green: '#14be00',\n  greenLight: '#99C794',\n  teal: '#5FB3B3',\n  blue: '#6699CC',\n  purple: '#C594C5',\n  brown: '#AB7967',\n  white: '#FFFFFF',\n}\n\nexport default colors\n","import { ColorValue } from './Color'\n\ntype ListCollectionType = Record<string, ColorValue>\n\nexport default class ColorCollection {\n  list: ListCollectionType = {}\n\n  constructor(list?: ListCollectionType) {\n    if (list) {\n      this.setCollection(list)\n    }\n  }\n\n  set(name: string, value: ColorValue): this {\n    this.list[name] = value\n\n    return this\n  }\n\n  setCollection(colors: ListCollectionType): this {\n    Object.keys(colors).forEach(name => {\n      this.set(name, colors[name])\n    })\n\n    return this\n  }\n\n  get(name?: string): ColorValue | undefined {\n    return name ? this.list[name] : undefined\n  }\n\n  remove(name: string): this {\n    delete this.list[name]\n\n    return this\n  }\n}\n","import type { LevelType } from './LogLevel'\nimport { LOG_ALL } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\nimport ColorCollection from './ColorCollection'\nimport colors from './Color'\n\nconst BrowserLogger = (level: LevelType | string = LOG_ALL) =>\n  new Logger({\n    driver: new ConsoleDriver(),\n    colors: new ColorCollection(colors),\n    level: level,\n  })\n\nexport { BrowserLogger }\n"],"names":["ConsoleDriver","console","value","msg","this","perform","type","_this$output","lines","buildStrings","formatMessage","output","apply","_toConsumableArray","fmt","fmtStr","fmtArgs","getBlocks","forEach","block","_ConsoleDriver$format","formatBlock","str","args","push","getText","strStyle","style","getStyle","keyStyle","concat","ConsoleBuffer","_this","_ref","arguments","length","undefined","print","printFragmented","debugFn","_classCallCheck","_defineProperty","_assertThisInitialized","_super","call","dir","buffer","warn","_get","performFragmented","_this2","fragments","split","slice","styles","error","log","fragment","idx","ERROR","INFO","DEBUG","TRACE","LEVEL_ERROR","LEVEL_INFO","LEVEL_DEBUG","LEVEL_TRACE","LOG_ALL","ERROR_STR","INFO_STR","DEBUG_STR","TRACE_STR","LEVEL_INFO_STR","LEVEL_DEBUG_STR","stringToLevel","isEmptyObject","object","_objectDestructuringEmpty","isString","isObject","Object","prototype","toString","ownerDocument","MessageBlock","text","create","colors","Error","_text","fillFromConfig","key","check","has","get","vValue","hValue","marginLeft","marginRight","width","color","url","height","config","background","bgColor","offsetLeft","offsetRight","borderRadius","bold","italic","fontSize","size","lineHeight","marginBottom","marginTop","padding","Array","isArray","JSON","stringify","options","Message","parse","blocks","_len","_key","pushBlock","instance","Logger","driver","level","logLevel","_ref2","originDriver","ConsoleBufferDriver","setDriver","msgText","prefix","offset","buildMessage","shouldLog","info","debug","trace","panelText","_ref3","baseText","_Message$instance","blockConfigs","blockConfig","black","gray","grayLight","red","redLight","orange","yellow","green","greenLight","teal","blue","purple","brown","white","ColorCollection","list","setCollection","name","keys","set","BrowserLogger"],"mappings":"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"}