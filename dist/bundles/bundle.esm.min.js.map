{"version":3,"file":"bundle.esm.min.js","sources":["../../src/LogLevel.ts","../../src/utils.ts","../../src/MessageBlock.ts","../../src/Message.ts","../../src/Logger.ts","../../src/Color.ts","../../src/drivers/ConsoleDriver/index.ts","../../src/ColorCollection.ts","../../src/shorcuts.ts"],"sourcesContent":["export type LevelType = number\n\nexport const ERROR: LevelType = 1\nexport const INFO: LevelType = 2\nexport const DEBUG: LevelType = 4\nexport const TRACE: LevelType = 8\n\nexport const LEVEL_ERROR: LevelType = ERROR\nexport const LEVEL_INFO: LevelType = LEVEL_ERROR | INFO\nexport const LEVEL_DEBUG: LevelType = LEVEL_INFO | DEBUG\nexport const LEVEL_TRACE: LevelType = LEVEL_DEBUG | TRACE\nexport const LOG_ALL: LevelType = LEVEL_TRACE\n\nexport const ERROR_STR = 'error'\nexport const INFO_STR = 'info'\nexport const DEBUG_STR = 'debug'\nexport const TRACE_STR = 'trace'\n\nexport const LEVEL_INFO_STR = 'levelInfo'\nexport const LEVEL_DEBUG_STR = 'levelDebug'\n\nexport function stringToLevel(value: string): LevelType {\n  switch (value) {\n    case ERROR_STR:\n      return ERROR\n    case INFO_STR:\n      return INFO\n    case DEBUG_STR:\n      return DEBUG\n    case TRACE_STR:\n      return TRACE\n\n    case LEVEL_INFO_STR:\n      return LEVEL_INFO\n    case LEVEL_DEBUG_STR:\n      return LEVEL_DEBUG\n  }\n\n  return LOG_ALL\n}\n\nexport default {\n  ERROR,\n  INFO,\n  DEBUG,\n  TRACE,\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n  LOG_ALL,\n}\n","// export const isString = (str: any) => typeof str !== 'string'\n\nexport const isEmptyObject = (object: object) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n","import { isEmptyObject } from './utils'\nimport type { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: ColorValue\n  background?: ColorValue\n}\n\ninterface MessageBlockOptions {\n  colors?: ColorCollection\n}\n\nclass MessageBlock {\n  private colors?: ColorCollection\n  private _text: string\n  private style: MessageBlockStyle = new Object(null)\n\n  constructor(text: string, { colors }: MessageBlockOptions = {}) {\n    this.colors = colors\n    this._text = text\n  }\n\n  push(key: string, value?: string, check: boolean = false): this {\n    if (value !== undefined && (!check || !this.has('color'))) {\n      this.style[key] = value\n    }\n\n    return this\n  }\n\n  has(key: string): boolean {\n    return this.style[key] !== undefined\n  }\n\n  color(value?: string, check: boolean = false): this {\n    return this.push('color', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  background(value?: string, check: boolean = false): this {\n    return this.push('background', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  marginLeft(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-left', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginRight(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-right', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginTop(value: number, check: boolean = false): this {\n    return this.push('margin-top', `${value}px`, check)\n  }\n\n  marginBottom(value: number, check: boolean = false): this {\n    return this.push('margin-bottom', `${value}px`, check)\n  }\n\n  margin(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('margin', value, check)\n  }\n\n  padding(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('padding', value, check)\n  }\n\n  offsetLeft(value: number, check: boolean = false): this {\n    return this.marginLeft(value * 10, check)\n  }\n\n  offsetRight(value: number, check: boolean = false): this {\n    return this.marginRight(value * 10, check)\n  }\n\n  borderRadius(value: number, check: boolean = false): this {\n    return this.push('border-radius', `${value}px`, check)\n  }\n\n  border(width: number, style: string, color: ColorValue, check: boolean = false): this {\n    return this.push('border', `${width}px ${style} ${color}`, check)\n  }\n\n  size(value: number, check: boolean = false): this {\n    return this.push('font-size', `${value}px`, check)\n  }\n\n  bold(check: boolean = false): this {\n    return this.push('font-weight', 'bold', check)\n  }\n\n  italic(check: boolean = false): this {\n    return this.push('font-style', 'italic', check)\n  }\n\n  lineHeight(value: number, check: boolean = false): this {\n    return this.push('line-height', `${value}px`, check)\n  }\n\n  width(value?: number, check: boolean = false): this {\n    return value ? this.push('width', `${value}px`, check) : this\n  }\n\n  height(value?: number, check: boolean = false): this {\n    return value ? this.push('height', `${value}px`, check) : this\n  }\n\n  image(url: string, width?: number, height?: number): this {\n    return this.push('background-image', `url(${url}}`).push('background-size', `cover`).width(width).height(height)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = new Object(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(block: MessageBlock | string, options: MessageBlockOptions = {}): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block, options)\n  }\n}\n\nexport default MessageBlock\n","import MessageBlock from './MessageBlock'\nimport ColorCollection from './ColorCollection'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string, colors?: ColorCollection) {\n    this.parse(text, colors)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(...args: (MessageBlock | null)[]): this {\n    args.forEach(block => {\n      if (block instanceof MessageBlock) {\n        this.blocks.push(block)\n      }\n    })\n\n    return this\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock, colors?: ColorCollection): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text, { colors }))\n    }\n  }\n\n  static instance(block?: Message | MessageBlock | string, colors?: ColorCollection): Message {\n    return block instanceof Message ? block : new Message(block, colors)\n  }\n}\n\nexport default Message\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport type { LevelType } from './LogLevel'\nimport { DEBUG, ERROR, INFO, LOG_ALL, stringToLevel, TRACE } from './LogLevel'\nimport Message from './Message'\nimport MessageBlock from './MessageBlock'\nimport { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  colors: ColorCollection\n  level?: LevelType | string\n}\n\ninterface PanelOptions {\n  bgColor?: ColorValue\n  color?: ColorValue\n  offset?: number\n}\n\nclass Logger {\n  private readonly driver: LoggerDriver\n  private readonly colors: ColorCollection\n\n  private logLevel: LevelType = LOG_ALL\n\n  constructor({ driver, colors, level }: LoggerConfig) {\n    this.driver = driver\n    this.colors = colors\n\n    if (level) {\n      if (typeof level === 'string') {\n        this.logLevel = stringToLevel(level)\n      } else {\n        this.logLevel = level\n      }\n    }\n  }\n\n  setLogLevel(level: LevelType): void {\n    this.logLevel = level\n  }\n\n  addLogLevel(level: LevelType): void {\n    this.logLevel |= level\n  }\n\n  excludeLogLevel(level: LevelType): void {\n    this.logLevel ^= level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  public getColors(): ColorCollection {\n    return this.colors\n  }\n\n  private shouldLog(level: LevelType | string): boolean {\n    if (typeof level === 'string') {\n      level = stringToLevel(level)\n    }\n\n    return (this.logLevel & level) !== 0\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(this.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(INFO)) {\n      return\n    }\n\n    const msg = this.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(DEBUG)) {\n      return\n    }\n\n    this.driver.debug(this.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(ERROR)) {\n      return\n    }\n\n    this.driver.error(this.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(TRACE)) {\n      return\n    }\n\n    this.driver.trace(this.buildMessage(msgText, prefix, offset))\n  }\n\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor, color, offset }: PanelOptions = {},\n    baseText?: string | MessageBlock,\n    logLevel?: LevelType | string\n  ) {\n    if (logLevel && !this.shouldLog(logLevel)) {\n      return\n    }\n\n    const msg = Message.instance(undefined, this.colors).pushBlock(\n      MessageBlock.instance(panelText, { colors: this.colors })\n        .background(bgColor || 'white')\n        .color(color || 'gray')\n        .offsetLeft(offset || 0)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText, { colors: this.colors }).offsetLeft(1) : null\n    )\n\n    this.driver.log(msg)\n  }\n\n  private buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message(undefined, this.colors)\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix, { colors: this.colors }).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText, { colors: this.colors }))\n\n    return msg\n  }\n}\n\nexport default Logger\n","/*\nimport { Enumerate } from './helper-types'\n\ntype RGBDigit = Enumerate<256>\n\ntype RGB = `rgb(${RGBDigit}, ${RGBDigit}, ${number})`;\ntype RGBA = `rgba(${RGBDigit}, ${RGBDigit}, ${number}, ${number})`;\n\ntype HexDigit =\n  '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F';\n\ntype MinHexDigitColor = `${HexDigit}${HexDigit}${HexDigit}`;\ntype ShortHexColor = `#${MinHexDigitColor}`;\ntype LongHexColor = `${ShortHexColor}${MinHexDigitColor}`;\ntype HexColor = LongHexColor | ShortHexColor;\n*/\n\ntype RGB = `rgb(${number}, ${number}, ${number})`\ntype RGBA = `rgba(${number}, ${number}, ${number}, ${number})`\ntype HexColor = `#${string}`\n\nexport type ColorValue = HexColor | RGB | RGBA\ntype ColorsType = Record<string, ColorValue>\n\nconst colors: ColorsType = {\n  black: '#000000',\n  gray: '#1B2B34',\n  red: '#EC5f67',\n  orange: '#F99157',\n  yellow: '#FAC863',\n  green: '#99C794',\n  teal: '#5FB3B3',\n  blue: '#6699CC',\n  purple: '#C594C5',\n  brown: '#AB7967',\n  white: '#FFFFFF',\n}\n\nexport default colors\n","import Message from '../../Message'\nimport MessageBlock from '../../MessageBlock'\nimport { LoggerDriver } from '../LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  private output = console\n\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    this.output[type](...lines)\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import { ColorValue } from './Color'\n\ntype ListCollectionType = Record<string, ColorValue>\n\nexport default class ColorCollection {\n  list: ListCollectionType = {}\n\n  constructor(list?: ListCollectionType) {\n    if (list) {\n      this.setCollection(list)\n    }\n  }\n\n  set(name: string, value: ColorValue): this {\n    this.list[name] = value\n\n    return this\n  }\n\n  setCollection(colors: ListCollectionType): this {\n    Object.keys(colors).forEach(name => {\n      this.set(name, colors[name])\n    })\n\n    return this\n  }\n\n  get(name?: string): ColorValue | undefined {\n    return name ? this.list[name] : undefined\n  }\n\n  remove(name: string): this {\n    delete this.list[name]\n\n    return this\n  }\n}\n","import type { LevelType } from './LogLevel'\nimport { LOG_ALL } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\nimport ColorCollection from './ColorCollection'\nimport colors from './Color'\n\nconst BrowserLogger = (level: LevelType | string = LOG_ALL) =>\n  new Logger({\n    driver: new ConsoleDriver(),\n    colors: new ColorCollection(colors),\n    level: level,\n  })\n\nexport { BrowserLogger }\n"],"names":["ERROR","INFO","DEBUG","TRACE","LEVEL_ERROR","LEVEL_INFO","LEVEL_DEBUG","LEVEL_TRACE","LOG_ALL","ERROR_STR","INFO_STR","DEBUG_STR","TRACE_STR","LEVEL_INFO_STR","LEVEL_DEBUG_STR","stringToLevel","value","MessageBlock","text","_ref","arguments","length","undefined","colors","_classCallCheck","this","_defineProperty","Object","_text","key","check","has","style","push","get","vValue","hValue","concat","marginLeft","marginRight","width","color","url","height","object","_objectDestructuringEmpty","isEmptyObject","JSON","stringify","block","options","Message","Array","parse","blocks","_this","_len","args","_key","forEach","pushBlock","instance","Logger","driver","level","logLevel","msgText","prefix","offset","log","buildMessage","shouldLog","msg","info","debug","error","trace","panelText","_ref2","bgColor","baseText","background","offsetLeft","borderRadius","padding","offsetRight","black","gray","red","orange","yellow","green","teal","blue","purple","brown","white","ConsoleDriver","console","perform","type","_this$output","lines","buildStrings","formatMessage","output","apply","_toConsumableArray","fmt","fmtStr","fmtArgs","getBlocks","_ConsoleDriver$format","formatBlock","str","getText","strStyle","getStyle","keyStyle","ColorCollection","list","setCollection","name","keys","set","BrowserLogger"],"mappings":"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"}