{"version":3,"file":"bundle.esm.min.js","sources":["../../src/LogLevel.ts","../../src/utils.ts","../../src/MessageBlock.ts","../../src/Message.ts","../../src/Logger.ts","../../src/Color.ts","../../src/drivers/ConsoleDriver/index.ts","../../src/ColorCollection.ts","../../src/shorcuts.ts"],"sourcesContent":["export type LevelType = number\n\nexport const ERROR: LevelType = 1\nexport const INFO: LevelType = 2\nexport const DEBUG: LevelType = 4\nexport const TRACE: LevelType = 8\n\nexport const LEVEL_ERROR: LevelType = ERROR\nexport const LEVEL_INFO: LevelType = LEVEL_ERROR | INFO\nexport const LEVEL_DEBUG: LevelType = LEVEL_INFO | DEBUG\nexport const LEVEL_TRACE: LevelType = LEVEL_DEBUG | TRACE\nexport const LOG_ALL: LevelType = LEVEL_TRACE\n\nexport const ERROR_STR = 'error'\nexport const INFO_STR = 'info'\nexport const DEBUG_STR = 'debug'\nexport const TRACE_STR = 'trace'\n\nexport const LEVEL_INFO_STR = 'levelInfo'\nexport const LEVEL_DEBUG_STR = 'levelDebug'\n\nexport function stringToLevel(value: string): LevelType {\n  switch (value) {\n    case ERROR_STR:\n      return ERROR\n    case INFO_STR:\n      return INFO\n    case DEBUG_STR:\n      return DEBUG\n    case TRACE_STR:\n      return TRACE\n\n    case LEVEL_INFO_STR:\n      return LEVEL_INFO\n    case LEVEL_DEBUG_STR:\n      return LEVEL_DEBUG\n  }\n\n  return LOG_ALL\n}\n\nexport default {\n  ERROR,\n  INFO,\n  DEBUG,\n  TRACE,\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n  LOG_ALL,\n}\n","// export const isString = (str: any) => typeof str !== 'string'\n\nexport const isEmptyObject = (object: object) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n\nexport const isString = (value: any) => typeof value === 'string'\n","import { isEmptyObject } from './utils'\nimport type { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: ColorValue\n  background?: ColorValue\n}\n\ninterface MessageBlockOptions {\n  colors?: ColorCollection\n}\n\nexport interface MessageBlockConfig {\n  text: string\n  bgColor?: ColorValue | string\n  color?: ColorValue | string\n  offset?: number\n  borderRadius?: number\n  padding?: number | [number, number]\n}\n\nclass MessageBlock {\n  private _text: string\n  private readonly colors?: ColorCollection\n  private style: MessageBlockStyle = new Object(null)\n\n  constructor(text: string | MessageBlockConfig, { colors }: MessageBlockOptions = new Object(null)) {\n    this.colors = colors\n    if (text === undefined) {\n      throw Error('Invalid `text` argument for MessageBlock')\n    }\n\n    if (typeof text === 'string') {\n      this._text = text\n    } else {\n      this.fillFromConfig(text)\n    }\n  }\n\n  fillFromConfig(config: MessageBlockConfig) {\n    this.text(config.text).background(config.bgColor).color(config.color)\n\n    config.offset && this.offsetLeft(config.offset)\n    config.borderRadius && this.borderRadius(config.borderRadius)\n\n    if (config.padding) {\n      if (Array.isArray(config.padding)) {\n        this.padding(config.padding[0], config.padding[1])\n      } else {\n        this.padding(config.padding)\n      }\n    }\n  }\n\n  push(key: string, value?: string, check: boolean = false): this {\n    if (value !== undefined && (!check || !this.has('color'))) {\n      this.style[key] = value\n    }\n\n    return this\n  }\n\n  has(key: string): boolean {\n    return this.style[key] !== undefined\n  }\n\n  color(value?: string, check: boolean = false): this {\n    return this.push('color', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  background(value?: string, check: boolean = false): this {\n    return this.push('background', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  marginLeft(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-left', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginRight(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-right', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginTop(value: number, check: boolean = false): this {\n    return this.push('margin-top', `${value}px`, check)\n  }\n\n  marginBottom(value: number, check: boolean = false): this {\n    return this.push('margin-bottom', `${value}px`, check)\n  }\n\n  margin(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('margin', value, check)\n  }\n\n  padding(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('padding', value, check)\n  }\n\n  offsetLeft(value: number, check: boolean = false): this {\n    return this.marginLeft(value * 10, check)\n  }\n\n  offsetRight(value: number, check: boolean = false): this {\n    return this.marginRight(value * 10, check)\n  }\n\n  borderRadius(value: number, check: boolean = false): this {\n    return this.push('border-radius', `${value}px`, check)\n  }\n\n  border(width: number, style: string, color: ColorValue, check: boolean = false): this {\n    return this.push('border', `${width}px ${style} ${color}`, check)\n  }\n\n  size(value: number, check: boolean = false): this {\n    return this.push('font-size', `${value}px`, check)\n  }\n\n  bold(check: boolean = false): this {\n    return this.push('font-weight', 'bold', check)\n  }\n\n  italic(check: boolean = false): this {\n    return this.push('font-style', 'italic', check)\n  }\n\n  lineHeight(value: number, check: boolean = false): this {\n    return this.push('line-height', `${value}px`, check)\n  }\n\n  width(value?: number, check: boolean = false): this {\n    return value ? this.push('width', `${value}px`, check) : this\n  }\n\n  height(value?: number, check: boolean = false): this {\n    return value ? this.push('height', `${value}px`, check) : this\n  }\n\n  image(url: string, width?: number, height?: number): this {\n    return this.push('background-image', `url(${url}}`).push('background-size', `cover`).width(width).height(height)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = new Object(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(\n    block: MessageBlock | MessageBlockConfig | string,\n    options: MessageBlockOptions = new Object(null)\n  ): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block, options)\n  }\n}\n\nexport default MessageBlock\n","import MessageBlock from './MessageBlock'\nimport ColorCollection from './ColorCollection'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string, colors?: ColorCollection) {\n    this.parse(text, colors)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(...args: (MessageBlock | null)[]): this {\n    args.forEach(block => {\n      if (block instanceof MessageBlock) {\n        this.blocks.push(block)\n      }\n    })\n\n    return this\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock, colors?: ColorCollection): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text, { colors }))\n    }\n  }\n\n  static instance(block?: Message | MessageBlock | string, colors?: ColorCollection): Message {\n    return block instanceof Message ? block : new Message(block, colors)\n  }\n}\n\nexport default Message\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport type { LevelType } from './LogLevel'\nimport { DEBUG, ERROR, INFO, LOG_ALL, stringToLevel, TRACE } from './LogLevel'\nimport Message from './Message'\nimport type { MessageBlockConfig } from './MessageBlock'\nimport MessageBlock from './MessageBlock'\nimport { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  colors: ColorCollection\n  level?: LevelType | string\n}\n\ninterface PanelOptions {\n  bgColor?: ColorValue | string\n  color?: ColorValue | string\n  offset?: number\n}\n\ntype BlockPanel = string | MessageBlockConfig | MessageBlock\n\nclass Logger {\n  private readonly driver: LoggerDriver\n  private readonly colors: ColorCollection\n\n  private logLevel: LevelType = LOG_ALL\n\n  constructor({ driver, colors, level }: LoggerConfig) {\n    this.driver = driver\n    this.colors = colors\n\n    if (level) {\n      if (typeof level === 'string') {\n        this.logLevel = stringToLevel(level)\n      } else {\n        this.logLevel = level\n      }\n    }\n  }\n\n  setLogLevel(level: LevelType): void {\n    this.logLevel = level\n  }\n\n  addLogLevel(level: LevelType): void {\n    this.logLevel |= level\n  }\n\n  excludeLogLevel(level: LevelType): void {\n    this.logLevel ^= level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  public getColors(): ColorCollection {\n    return this.colors\n  }\n\n  private shouldLog(level: LevelType | string): boolean {\n    if (typeof level === 'string') {\n      level = stringToLevel(level)\n    }\n\n    return (this.logLevel & level) !== 0\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(this.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(INFO)) {\n      return\n    }\n\n    const msg = this.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(DEBUG)) {\n      return\n    }\n\n    this.driver.debug(this.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(ERROR)) {\n      return\n    }\n\n    this.driver.error(this.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(TRACE)) {\n      return\n    }\n\n    this.driver.trace(this.buildMessage(msgText, prefix, offset))\n  }\n\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor, color, offset }: PanelOptions = new Object(null),\n    baseText?: string | MessageBlock,\n    logLevel?: LevelType | string\n  ) {\n    if (logLevel && !this.shouldLog(logLevel)) {\n      return\n    }\n\n    const msg = Message.instance(undefined, this.colors).pushBlock(\n      MessageBlock.instance(panelText, { colors: this.colors })\n        .background(bgColor || 'white')\n        .color(color || 'gray')\n        .offsetLeft(offset || 0)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText, { colors: this.colors }).offsetLeft(1) : null\n    )\n\n    this.driver.log(msg)\n  }\n\n  panels(logLevel?: LevelType | string, ...blockConfigs: BlockPanel[]) {\n    if (!blockConfigs.length || (logLevel && !this.shouldLog(logLevel))) {\n      return\n    }\n\n    const blocks: MessageBlock[] = []\n    blockConfigs.forEach(blockConfig => {\n      blocks.push(MessageBlock.instance(blockConfig, { colors: this.colors }))\n    })\n\n    const msg = Message.instance().pushBlock(...blocks)\n\n    this.driver.log(msg)\n  }\n\n  private buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message(undefined, this.colors)\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix, { colors: this.colors }).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText, { colors: this.colors }))\n\n    return msg\n  }\n}\n\nexport default Logger\n","/*\nimport { Enumerate } from './helper-types'\n\ntype RGBDigit = Enumerate<256>\n\ntype RGB = `rgb(${RGBDigit}, ${RGBDigit}, ${number})`;\ntype RGBA = `rgba(${RGBDigit}, ${RGBDigit}, ${number}, ${number})`;\n\ntype HexDigit =\n  '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F';\n\ntype MinHexDigitColor = `${HexDigit}${HexDigit}${HexDigit}`;\ntype ShortHexColor = `#${MinHexDigitColor}`;\ntype LongHexColor = `${ShortHexColor}${MinHexDigitColor}`;\ntype HexColor = LongHexColor | ShortHexColor;\n*/\n\ntype RGB = `rgb(${number}, ${number}, ${number})`\ntype RGBA = `rgba(${number}, ${number}, ${number}, ${number})`\ntype HexColor = `#${string}`\n\nexport type ColorValue = HexColor | RGB | RGBA\ntype ColorsType = Record<string, ColorValue>\n\nconst colors: ColorsType = {\n  black: '#000000',\n  gray: '#1B2B34',\n  grayLight: '#536069',\n  red: '#EC5f67',\n  orange: '#F99157',\n  yellow: '#FAC863',\n  green: '#99C794',\n  teal: '#5FB3B3',\n  blue: '#6699CC',\n  purple: '#C594C5',\n  brown: '#AB7967',\n  white: '#FFFFFF',\n}\n\nexport default colors\n","import Message from '../../Message'\nimport MessageBlock from '../../MessageBlock'\nimport { LoggerDriver } from '../LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  private output = console\n\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    this.output[type](...lines)\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import { ColorValue } from './Color'\n\ntype ListCollectionType = Record<string, ColorValue>\n\nexport default class ColorCollection {\n  list: ListCollectionType = {}\n\n  constructor(list?: ListCollectionType) {\n    if (list) {\n      this.setCollection(list)\n    }\n  }\n\n  set(name: string, value: ColorValue): this {\n    this.list[name] = value\n\n    return this\n  }\n\n  setCollection(colors: ListCollectionType): this {\n    Object.keys(colors).forEach(name => {\n      this.set(name, colors[name])\n    })\n\n    return this\n  }\n\n  get(name?: string): ColorValue | undefined {\n    return name ? this.list[name] : undefined\n  }\n\n  remove(name: string): this {\n    delete this.list[name]\n\n    return this\n  }\n}\n","import type { LevelType } from './LogLevel'\nimport { LOG_ALL } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\nimport ColorCollection from './ColorCollection'\nimport colors from './Color'\n\nconst BrowserLogger = (level: LevelType | string = LOG_ALL) =>\n  new Logger({\n    driver: new ConsoleDriver(),\n    colors: new ColorCollection(colors),\n    level: level,\n  })\n\nexport { BrowserLogger }\n"],"names":["ERROR","INFO","DEBUG","TRACE","LEVEL_ERROR","LEVEL_INFO","LEVEL_DEBUG","LEVEL_TRACE","LOG_ALL","ERROR_STR","INFO_STR","DEBUG_STR","TRACE_STR","LEVEL_INFO_STR","LEVEL_DEBUG_STR","stringToLevel","value","MessageBlock","text","_ref","arguments","length","undefined","Object","colors","_classCallCheck","this","_defineProperty","Error","_text","fillFromConfig","config","background","bgColor","color","offset","offsetLeft","borderRadius","padding","Array","isArray","key","check","has","style","push","get","vValue","hValue","concat","marginLeft","marginRight","width","url","height","object","_objectDestructuringEmpty","isEmptyObject","JSON","stringify","block","options","Message","parse","blocks","_this","_len","args","_key","forEach","pushBlock","instance","Logger","driver","level","logLevel","msgText","prefix","log","buildMessage","shouldLog","msg","info","debug","error","trace","panelText","_ref2","baseText","_Message$instance","blockConfigs","blockConfig","offsetRight","black","gray","grayLight","red","orange","yellow","green","teal","blue","purple","brown","white","ConsoleDriver","console","perform","type","_this$output","lines","buildStrings","formatMessage","output","apply","_toConsumableArray","fmt","fmtStr","fmtArgs","getBlocks","_ConsoleDriver$format","formatBlock","str","getText","strStyle","getStyle","keyStyle","ColorCollection","list","setCollection","name","keys","set","BrowserLogger"],"mappings":"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"}