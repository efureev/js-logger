{"version":3,"file":"bundle.esm.min.js","sources":["../../src/LogLevel.ts","../../src/MessageBlock.ts","../../src/utils.ts","../../src/Message.ts","../../src/Logger.ts","../../src/drivers/ConsoleDriver.ts","../../src/shorcuts.ts"],"sourcesContent":["export const LEVEL_ERROR: number = 1 << 0\nexport const LEVEL_INFO: number = 1 << 1\nexport const LEVEL_DEBUG: number = 1 << 2\nexport const LEVEL_TRACE: number = 1 << 3\n\nexport default {\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n}\n","import { isEmptyObject } from './utils'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: string\n  background?: string\n}\n\nclass MessageBlock {\n  private _text: string\n  private style: MessageBlockStyle = new Object(null)\n\n  constructor(text: string) {\n    this._text = text\n  }\n\n  push(key: string, value: string): this {\n    this.style[key] = value\n\n    return this\n  }\n\n  color(value: string): this {\n    return this.push('color', value)\n  }\n\n  background(value: string): this {\n    return this.push('background', value)\n  }\n\n  marginLeft(value: number): this {\n    return this.push('margin-left', `${value}px`)\n  }\n\n  marginRight(value: number): this {\n    return this.push('margin-right', `${value}px`)\n  }\n\n  marginTop(value: number): this {\n    return this.push('margin-top', `${value}px`)\n  }\n\n  marginBottom(value: number): this {\n    return this.push('margin-bottom', `${value}px`)\n  }\n\n  margin(vValue: number, hValue?: number): this {\n    let value = `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('margin', value)\n  }\n\n  padding(vValue: number, hValue?: number): this {\n    let value = `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('padding', value)\n  }\n\n  offsetLeft(value: number): this {\n    return this.marginLeft(value * 10)\n  }\n\n  offsetRight(value: number): this {\n    return this.marginRight(value * 10)\n  }\n\n  borderRadius(value: number): this {\n    return this.push('border-radius', `${value}px`)\n  }\n\n  border(width: number, style: string, color: string): this {\n    return this.push('border', `${width}px ${style} ${color}`)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = new Object(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(block: MessageBlock | string): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block)\n  }\n}\n\nexport default MessageBlock\n","export const isString = (str: any) => typeof str !== 'string'\n\nexport const isEmptyObject = (object: object) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n","import MessageBlock from './MessageBlock'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string) {\n    this.parse(text)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(...args: MessageBlock[]): this {\n    args.forEach(block => {\n      this.blocks.push(block)\n    })\n\n    return this\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text))\n    }\n  }\n\n  static instance(block?: Message | MessageBlock | string): Message {\n    return block instanceof Message ? block : new Message(block)\n  }\n}\n\nexport default Message\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport { LEVEL_DEBUG, LEVEL_ERROR, LEVEL_INFO, LEVEL_TRACE } from './LogLevel'\nimport Message from './Message'\nimport MessageBlock from './MessageBlock'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  level?: number\n}\n\nclass Logger {\n  private readonly driver: LoggerDriver\n  private logLevel: number = LEVEL_ERROR\n\n  constructor(config: LoggerConfig) {\n    this.driver = config.driver\n    if (config.level) {\n      this.logLevel = config.level\n    }\n  }\n\n  setLevel(level: number): void {\n    this.logLevel = level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  private shouldLog(msgLevel: number) {\n    return this.logLevel <= msgLevel // @todo: bit operations\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(LEVEL_INFO)) {\n      return\n    }\n\n    const msg = Logger.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_DEBUG)) {\n      return\n    }\n\n    this.driver.debug(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_ERROR)) {\n      return\n    }\n\n    this.driver.error(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_TRACE)) {\n      return\n    }\n\n    this.driver.trace(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  private static buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message()\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText))\n\n    return msg\n  }\n}\n\nexport default Logger\n","import Message from '../Message'\nimport MessageBlock from '../MessageBlock'\nimport { LoggerDriver } from './LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    console[type](...lines)\n    // console[msg.type ?? type](res[0], ...res[1])\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import { LEVEL_ERROR } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\n\nconst BrowserLogger = (level: number = LEVEL_ERROR) => new Logger({ level: level, driver: new ConsoleDriver() })\n\nexport { BrowserLogger }\n"],"names":["MessageBlock","text","Object","_text","key","value","style","this","push","vValue","hValue","undefined","marginLeft","marginRight","width","color","object","isEmptyObject","JSON","stringify","block","Message","Array","parse","blocks","args","forEach","_this","length","pushBlock","instance","Logger","config","driver","level","logLevel","msgLevel","msgText","prefix","offset","log","buildMessage","shouldLog","msg","info","debug","error","trace","offsetRight","offsetLeft","ConsoleDriver","perform","type","lines","buildStrings","formatMessage","console","fmt","fmtStr","fmtArgs","getBlocks","formatBlock","str","getText","strStyle","getStyle","keyStyle","BrowserLogger"],"mappings":"kzCAAO,ICSDA,wBAIQC,4BAFuB,IAAIC,OAAO,YAGvCC,MAAQF,gCAGf,SAAKG,EAAaC,eACXC,MAAMF,GAAOC,EAEXE,0BAGT,SAAMF,UACGE,KAAKC,KAAK,QAASH,6BAG5B,SAAWA,UACFE,KAAKC,KAAK,aAAcH,6BAGjC,SAAWA,UACFE,KAAKC,KAAK,wBAAkBH,oCAGrC,SAAYA,UACHE,KAAKC,KAAK,yBAAmBH,kCAGtC,SAAUA,UACDE,KAAKC,KAAK,uBAAiBH,qCAGpC,SAAaA,UACJE,KAAKC,KAAK,0BAAoBH,+BAGvC,SAAOI,EAAgBC,OACjBL,YAAWI,oBACAE,IAAXD,IACFL,cAAaK,SAERH,KAAKC,KAAK,SAAUH,0BAG7B,SAAQI,EAAgBC,OAClBL,YAAWI,oBACAE,IAAXD,IACFL,cAAaK,SAERH,KAAKC,KAAK,UAAWH,6BAG9B,SAAWA,UACFE,KAAKK,WAAmB,GAARP,8BAGzB,SAAYA,UACHE,KAAKM,YAAoB,GAARR,+BAG1B,SAAaA,UACJE,KAAKC,KAAK,0BAAoBH,+BAGvC,SAAOS,EAAeR,EAAeS,UAC5BR,KAAKC,KAAK,mBAAaM,gBAAWR,cAASS,wBAGpD,SAAKV,eACEF,MAAQE,EAENE,4BAGT,kBACSA,KAAKJ,8BAGd,kBACSI,KAAKD,8BAGd,kBC3F2B,SAACU,gBAEjBA,eAAe,SAEnB,EDwFGC,CAAcV,KAAKD,iCAG7B,uBACOA,MAAQ,IAAIJ,OAAO,MAEjBK,2BAGT,kBACSW,KAAKC,UAAU,CACpBhB,MAAOI,KAAKJ,MACZG,MAAOC,KAAKD,kCAIhB,SAAgBc,UACPA,aAAiBpB,EAAeoB,EAAQ,IAAIpB,EAAaoB,YE7G9DC,wBAGQpB,6BAF0B,IAAIqB,YAGnCC,MAAMtB,sCAGb,kBACSM,KAAKiB,gCAGd,6CAAaC,2BAAAA,yBACXA,EAAKC,SAAQ,SAAAN,GACXO,EAAKH,OAAOhB,KAAKY,MAGZb,0BAGT,gBACOiB,OAAS,wBAGhB,kBACSjB,KAAKiB,OAAOI,4BAGrB,SAAc3B,GACRA,QACG4B,UAAU7B,EAAa8B,SAAS7B,8BAIzC,SAAgBmB,UACPA,aAAiBC,EAAUD,EAAQ,IAAIC,EAAQD,YC1BpDW,wBAIQC,+BJdqB,QIe1BC,OAASD,EAAOC,OACjBD,EAAOE,aACJC,SAAWH,EAAOE,yCAI3B,SAASA,QACFC,SAAWD,2BAGlB,kBACS3B,KAAK0B,gCAGd,SAAkBG,UACT7B,KAAK4B,UAAYC,qBAG1B,SAAIC,EAA0CC,OAAiBC,yDAAS,OACjEN,OAAOO,IAAIT,EAAOU,aAAaJ,EAASC,EAAQC,wBAGvD,SAAKF,EAA0CC,OAAiBC,yDAAS,KAClEhC,KAAKmC,UJrCoB,QIyCxBC,EAAMZ,EAAOU,aAAaJ,EAASC,EAAQC,QAE5CN,OAAOW,KAAKD,yBAGnB,SAAMN,EAA0CC,OAAiBC,yDAAS,EACnEhC,KAAKmC,UJ9CqB,SIkD1BT,OAAOY,MAAMd,EAAOU,aAAaJ,EAASC,EAAQC,yBAGzD,SAAMF,EAA0CC,OAAiBC,yDAAS,EACnEhC,KAAKmC,UJxDqB,SI4D1BT,OAAOa,MAAMf,EAAOU,aAAaJ,EAASC,EAAQC,yBAGzD,SAAMF,EAA0CC,OAAiBC,yDAAS,EACnEhC,KAAKmC,UJ7DqB,SIiE1BT,OAAOc,MAAMhB,EAAOU,aAAaJ,EAASC,EAAQC,kCAGzD,SAA4BF,EAA0CC,OAAiBC,yDAAiB,KAClGF,aAAmBhB,SACdgB,MAGHM,EAAM,IAAItB,KAEZiB,EAAQ,KACJlB,EAAQpB,EAAa8B,SAASQ,GAAQU,YAAY,GAEpDT,GACFnB,EAAM6B,WAAWV,GAGnBI,EAAId,UAAUT,UAGhBuB,EAAId,UAAU7B,EAAa8B,SAASO,IAE7BM,WCjFLO,mEACJ,SAAMP,QACCQ,QAAQR,EAAK,6BAGpB,SAAKA,QACEQ,QAAQR,EAAK,2BAGpB,SAAIA,QACGQ,QAAQR,EAAK,4BAGpB,SAAMA,QACCQ,QAAQR,EAAK,8BAGpB,SAAMA,QACCQ,QAAQR,EAAK,gCAGpB,SAAkBA,EAAcS,SACxBC,EAAQH,EAAcI,aAAaJ,EAAcK,cAAcZ,OAGrEa,SAAQJ,aAASC,kCAInB,SAA8BI,UACpBA,EAAIC,iBAAWD,EAAIE,uCAG7B,SAA+BhB,OACzBe,EAAiB,GACfC,EAAyB,UAE/BhB,EAAIiB,YAAYlC,SAAQ,SAAAN,SACiB8B,EAAcW,YAAYzC,GAAjD0C,IAARJ,OAAsBjC,IAATkC,QACrBD,GAAUI,EACVH,EAAQnD,WAARmD,IAAgBlC,OAGX,CAAEiC,OAAAA,EAAQC,QAAAA,8BAGnB,SAA6BvC,OACvBsC,cAAsBtC,EAAM2C,WAC1BJ,EAAyB,GAC3BK,EAAW,GAET1D,EAAQc,EAAM6C,eACf,IAAMC,KAAY5D,EACrB0D,aAAeE,cAAY5D,EAAM4D,eAEnCP,EAAQnD,KAAKwD,GAEN,CAAEN,OAAAA,EAAQC,QAAAA,YC9DfQ,EAAgB,eAACjC,yDNJY,SMIoB,IAAIH,EAAO,CAAEG,MAAOA,EAAOD,OAAQ,IAAIiB"}