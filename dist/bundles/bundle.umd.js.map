{"version":3,"file":"bundle.umd.js","sources":["../../src/LogLevel.ts","../../src/utils.ts","../../src/MessageBlock.ts","../../src/Message.ts","../../src/Logger.ts","../../src/Color.ts","../../src/drivers/ConsoleDriver/index.ts","../../src/ColorCollection.ts","../../src/shorcuts.ts"],"sourcesContent":["export type LevelType = number\n\nexport const ERROR: LevelType = 1\nexport const INFO: LevelType = 2\nexport const DEBUG: LevelType = 4\nexport const TRACE: LevelType = 8\n\nexport const LEVEL_ERROR: LevelType = ERROR\nexport const LEVEL_INFO: LevelType = LEVEL_ERROR | INFO\nexport const LEVEL_DEBUG: LevelType = LEVEL_INFO | DEBUG\nexport const LEVEL_TRACE: LevelType = LEVEL_DEBUG | TRACE\nexport const LOG_ALL: LevelType = LEVEL_TRACE\n\nexport const ERROR_STR = 'error'\nexport const INFO_STR = 'info'\nexport const DEBUG_STR = 'debug'\nexport const TRACE_STR = 'trace'\n\nexport const LEVEL_INFO_STR = 'levelInfo'\nexport const LEVEL_DEBUG_STR = 'levelDebug'\n\nexport function stringToLevel(value: string): LevelType {\n  switch (value) {\n    case ERROR_STR:\n      return ERROR\n    case INFO_STR:\n      return INFO\n    case DEBUG_STR:\n      return DEBUG\n    case TRACE_STR:\n      return TRACE\n\n    case LEVEL_INFO_STR:\n      return LEVEL_INFO\n    case LEVEL_DEBUG_STR:\n      return LEVEL_DEBUG\n  }\n\n  return LOG_ALL\n}\n\nexport default {\n  ERROR,\n  INFO,\n  DEBUG,\n  TRACE,\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n  LOG_ALL,\n}\n","// export const isString = (str: any) => typeof str !== 'string'\n\nexport const isEmptyObject = (object: object) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n\nexport const isString = (value: any) => typeof value === 'string'\n","import { isEmptyObject } from './utils'\nimport type { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: ColorValue\n  background?: ColorValue\n}\n\ninterface MessageBlockOptions {\n  colors?: ColorCollection\n}\n\nexport interface MessageBlockConfig {\n  text: string\n  bgColor?: ColorValue | string\n  color?: ColorValue | string\n  offset?: number\n  borderRadius?: number\n  padding?: number | [number, number]\n}\n\nclass MessageBlock {\n  private _text: string\n  private readonly colors?: ColorCollection\n  private style: MessageBlockStyle = new Object(null)\n\n  constructor(text: string | MessageBlockConfig, { colors }: MessageBlockOptions = new Object(null)) {\n    this.colors = colors\n    if (text === undefined) {\n      throw Error('Invalid `text` argument for MessageBlock')\n    }\n\n    if (typeof text === 'string') {\n      this._text = text\n    } else {\n      this.fillFromConfig(text)\n    }\n  }\n\n  fillFromConfig(config: MessageBlockConfig) {\n    this.text(config.text).background(config.bgColor).color(config.color)\n\n    config.offset && this.offsetLeft(config.offset)\n    config.borderRadius && this.borderRadius(config.borderRadius)\n\n    if (config.padding) {\n      if (Array.isArray(config.padding)) {\n        this.padding(config.padding[0], config.padding[1])\n      } else {\n        this.padding(config.padding)\n      }\n    }\n  }\n\n  push(key: string, value?: string, check: boolean = false): this {\n    if (value !== undefined && (!check || !this.has('color'))) {\n      this.style[key] = value\n    }\n\n    return this\n  }\n\n  has(key: string): boolean {\n    return this.style[key] !== undefined\n  }\n\n  color(value?: string, check: boolean = false): this {\n    return this.push('color', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  background(value?: string, check: boolean = false): this {\n    return this.push('background', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  marginLeft(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-left', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginRight(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-right', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginTop(value: number, check: boolean = false): this {\n    return this.push('margin-top', `${value}px`, check)\n  }\n\n  marginBottom(value: number, check: boolean = false): this {\n    return this.push('margin-bottom', `${value}px`, check)\n  }\n\n  margin(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('margin', value, check)\n  }\n\n  padding(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('padding', value, check)\n  }\n\n  offsetLeft(value: number, check: boolean = false): this {\n    return this.marginLeft(value * 10, check)\n  }\n\n  offsetRight(value: number, check: boolean = false): this {\n    return this.marginRight(value * 10, check)\n  }\n\n  borderRadius(value: number, check: boolean = false): this {\n    return this.push('border-radius', `${value}px`, check)\n  }\n\n  border(width: number, style: string, color: ColorValue, check: boolean = false): this {\n    return this.push('border', `${width}px ${style} ${color}`, check)\n  }\n\n  size(value: number, check: boolean = false): this {\n    return this.push('font-size', `${value}px`, check)\n  }\n\n  bold(check: boolean = false): this {\n    return this.push('font-weight', 'bold', check)\n  }\n\n  italic(check: boolean = false): this {\n    return this.push('font-style', 'italic', check)\n  }\n\n  lineHeight(value: number, check: boolean = false): this {\n    return this.push('line-height', `${value}px`, check)\n  }\n\n  width(value?: number, check: boolean = false): this {\n    return value ? this.push('width', `${value}px`, check) : this\n  }\n\n  height(value?: number, check: boolean = false): this {\n    return value ? this.push('height', `${value}px`, check) : this\n  }\n\n  image(url: string, width?: number, height?: number): this {\n    return this.push('background-image', `url(${url}}`).push('background-size', `cover`).width(width).height(height)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = new Object(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(\n    block: MessageBlock | MessageBlockConfig | string,\n    options: MessageBlockOptions = new Object(null)\n  ): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block, options)\n  }\n}\n\nexport default MessageBlock\n","import MessageBlock from './MessageBlock'\nimport ColorCollection from './ColorCollection'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string, colors?: ColorCollection) {\n    this.parse(text, colors)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(...args: (MessageBlock | null)[]): this {\n    args.forEach(block => {\n      if (block instanceof MessageBlock) {\n        this.blocks.push(block)\n      }\n    })\n\n    return this\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock, colors?: ColorCollection): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text, { colors }))\n    }\n  }\n\n  static instance(block?: Message | MessageBlock | string, colors?: ColorCollection): Message {\n    return block instanceof Message ? block : new Message(block, colors)\n  }\n}\n\nexport default Message\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport type { LevelType } from './LogLevel'\nimport { DEBUG, ERROR, INFO, LOG_ALL, stringToLevel, TRACE } from './LogLevel'\nimport Message from './Message'\nimport type { MessageBlockConfig } from './MessageBlock'\nimport MessageBlock from './MessageBlock'\nimport { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  colors: ColorCollection\n  level?: LevelType | string\n}\n\ninterface PanelOptions {\n  bgColor?: ColorValue | string\n  color?: ColorValue | string\n  offset?: number\n}\n\ntype BlockPanel = string | MessageBlockConfig | MessageBlock\n\nclass Logger {\n  private readonly driver: LoggerDriver\n  private readonly colors: ColorCollection\n\n  private logLevel: LevelType = LOG_ALL\n\n  constructor({ driver, colors, level }: LoggerConfig) {\n    this.driver = driver\n    this.colors = colors\n\n    if (level) {\n      if (typeof level === 'string') {\n        this.logLevel = stringToLevel(level)\n      } else {\n        this.logLevel = level\n      }\n    }\n  }\n\n  setLogLevel(level: LevelType): void {\n    this.logLevel = level\n  }\n\n  addLogLevel(level: LevelType): void {\n    this.logLevel |= level\n  }\n\n  excludeLogLevel(level: LevelType): void {\n    this.logLevel ^= level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  public getColors(): ColorCollection {\n    return this.colors\n  }\n\n  private shouldLog(level: LevelType | string): boolean {\n    if (typeof level === 'string') {\n      level = stringToLevel(level)\n    }\n\n    return (this.logLevel & level) !== 0\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(this.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(INFO)) {\n      return\n    }\n\n    const msg = this.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(DEBUG)) {\n      return\n    }\n\n    this.driver.debug(this.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(ERROR)) {\n      return\n    }\n\n    this.driver.error(this.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(TRACE)) {\n      return\n    }\n\n    this.driver.trace(this.buildMessage(msgText, prefix, offset))\n  }\n\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor, color, offset }: PanelOptions = new Object(null),\n    baseText?: string | MessageBlock,\n    logLevel?: LevelType | string\n  ) {\n    if (logLevel && !this.shouldLog(logLevel)) {\n      return\n    }\n\n    const msg = Message.instance(undefined, this.colors).pushBlock(\n      MessageBlock.instance(panelText, { colors: this.colors })\n        .background(bgColor || 'white')\n        .color(color || 'gray')\n        .offsetLeft(offset || 0)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText, { colors: this.colors }).offsetLeft(1) : null\n    )\n\n    this.driver.log(msg)\n  }\n\n  panels(logLevel?: LevelType | string, ...blockConfigs: BlockPanel[]) {\n    if (!blockConfigs.length || (logLevel && !this.shouldLog(logLevel))) {\n      return\n    }\n\n    const blocks: MessageBlock[] = []\n    blockConfigs.forEach(blockConfig => {\n      blocks.push(MessageBlock.instance(blockConfig, { colors: this.colors }))\n    })\n\n    const msg = Message.instance().pushBlock(...blocks)\n\n    this.driver.log(msg)\n  }\n\n  private buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message(undefined, this.colors)\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix, { colors: this.colors }).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText, { colors: this.colors }))\n\n    return msg\n  }\n}\n\nexport default Logger\n","/*\nimport { Enumerate } from './helper-types'\n\ntype RGBDigit = Enumerate<256>\n\ntype RGB = `rgb(${RGBDigit}, ${RGBDigit}, ${number})`;\ntype RGBA = `rgba(${RGBDigit}, ${RGBDigit}, ${number}, ${number})`;\n\ntype HexDigit =\n  '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F';\n\ntype MinHexDigitColor = `${HexDigit}${HexDigit}${HexDigit}`;\ntype ShortHexColor = `#${MinHexDigitColor}`;\ntype LongHexColor = `${ShortHexColor}${MinHexDigitColor}`;\ntype HexColor = LongHexColor | ShortHexColor;\n*/\n\ntype RGB = `rgb(${number}, ${number}, ${number})`\ntype RGBA = `rgba(${number}, ${number}, ${number}, ${number})`\ntype HexColor = `#${string}`\n\nexport type ColorValue = HexColor | RGB | RGBA\ntype ColorsType = Record<string, ColorValue>\n\nconst colors: ColorsType = {\n  black: '#000000',\n  gray: '#1B2B34',\n  grayLight: '#536069',\n  red: '#EC5f67',\n  orange: '#F99157',\n  yellow: '#FAC863',\n  green: '#99C794',\n  teal: '#5FB3B3',\n  blue: '#6699CC',\n  purple: '#C594C5',\n  brown: '#AB7967',\n  white: '#FFFFFF',\n}\n\nexport default colors\n","import Message from '../../Message'\nimport MessageBlock from '../../MessageBlock'\nimport { LoggerDriver } from '../LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  private output = console\n\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    this.output[type](...lines)\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import { ColorValue } from './Color'\n\ntype ListCollectionType = Record<string, ColorValue>\n\nexport default class ColorCollection {\n  list: ListCollectionType = {}\n\n  constructor(list?: ListCollectionType) {\n    if (list) {\n      this.setCollection(list)\n    }\n  }\n\n  set(name: string, value: ColorValue): this {\n    this.list[name] = value\n\n    return this\n  }\n\n  setCollection(colors: ListCollectionType): this {\n    Object.keys(colors).forEach(name => {\n      this.set(name, colors[name])\n    })\n\n    return this\n  }\n\n  get(name?: string): ColorValue | undefined {\n    return name ? this.list[name] : undefined\n  }\n\n  remove(name: string): this {\n    delete this.list[name]\n\n    return this\n  }\n}\n","import type { LevelType } from './LogLevel'\nimport { LOG_ALL } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\nimport ColorCollection from './ColorCollection'\nimport colors from './Color'\n\nconst BrowserLogger = (level: LevelType | string = LOG_ALL) =>\n  new Logger({\n    driver: new ConsoleDriver(),\n    colors: new ColorCollection(colors),\n    level: level,\n  })\n\nexport { BrowserLogger }\n"],"names":["ERROR","INFO","DEBUG","TRACE","LEVEL_ERROR","LEVEL_INFO","LEVEL_DEBUG","LEVEL_TRACE","LOG_ALL","ERROR_STR","INFO_STR","DEBUG_STR","TRACE_STR","LEVEL_INFO_STR","LEVEL_DEBUG_STR","stringToLevel","value","isEmptyObject","object","MessageBlock","text","Object","colors","undefined","Error","_text","fillFromConfig","config","background","bgColor","color","offset","offsetLeft","borderRadius","padding","Array","isArray","key","check","has","style","push","get","vValue","hValue","marginLeft","marginRight","width","url","height","JSON","stringify","block","options","Message","parse","blocks","args","forEach","length","pushBlock","instance","Logger","driver","level","logLevel","msgText","prefix","log","buildMessage","shouldLog","msg","info","debug","error","trace","panelText","baseText","blockConfigs","blockConfig","offsetRight","black","gray","grayLight","red","orange","yellow","green","teal","blue","purple","brown","white","ConsoleDriver","console","perform","type","lines","buildStrings","formatMessage","output","fmt","fmtStr","fmtArgs","getBlocks","formatBlock","str","getText","strStyle","getStyle","keyStyle","ColorCollection","list","setCollection","name","keys","set","BrowserLogger"],"mappings":"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"}