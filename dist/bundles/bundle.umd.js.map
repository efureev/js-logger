{"version":3,"file":"bundle.umd.js","sources":["../../src/drivers/ConsoleDriver/index.ts","../../src/drivers/ConsoleBufferDriver/index.ts","../../src/LogLevel.ts","../../src/utils.ts","../../src/MessageBlock.ts","../../src/Message.ts","../../src/Logger.ts","../../src/Color.ts","../../src/ColorCollection.ts","../../src/shorcuts.ts"],"sourcesContent":["import Message from '../../Message'\nimport MessageBlock from '../../MessageBlock'\nimport { LoggerDriver } from '../LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  protected output = console\n\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    this.output[type](...lines)\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n","import ConsoleDriver from '../ConsoleDriver'\nimport Message from '../../Message'\n\nexport interface ConsoleBufferConfig {\n  print?: boolean\n  printFragmented?: boolean\n  debugFn?: Function\n}\n\nexport default class ConsoleBuffer extends ConsoleDriver {\n  private readonly print: boolean = false\n  private readonly printFragmented: boolean = false\n  private readonly debugFn: Function\n\n  constructor({ print, printFragmented, debugFn }: ConsoleBufferConfig = {}) {\n    super()\n    this.print = print || false\n    this.printFragmented = printFragmented || false\n    this.debugFn = debugFn || this.output.dir\n  }\n\n  public buffer: string[] = []\n\n  protected perform(msg: Message, type: string) {\n    this.buffer = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n    if (this.print) {\n      this.output.warn('--[debug] start')\n      super.perform(msg, type)\n      this.debugFn(this.buffer)\n      if (this.printFragmented) {\n        this.performFragmented()\n      }\n      this.output.warn('--[debug] finish')\n    }\n  }\n\n  private performFragmented() {\n    if (!this.buffer.length) {\n      return\n    }\n\n    const fragments = this.buffer[0].split('%c').slice(1)\n    const styles = this.buffer.slice(1)\n\n    if (fragments.length != styles.length) {\n      this.output.error('data inconsistency error: fragments: %d, styles: %d', fragments.length, styles.length)\n      this.output.log('fragments', fragments)\n      this.output.log('styles', styles)\n    }\n\n    fragments.forEach((fragment, idx) => {\n      this.output.log(`${fragment}: ${styles[idx]}`)\n      this.output.log(`%c${fragment}`, styles[idx])\n    })\n  }\n\n  public clearBuffer() {\n    this.buffer = []\n  }\n}\n","export type LevelType = number\nexport type StringLevelType = LevelType | string\n\nexport const ERROR: LevelType = 1\nexport const INFO: LevelType = 2\nexport const DEBUG: LevelType = 4\nexport const TRACE: LevelType = 8\n\nexport const LEVEL_ERROR: LevelType = ERROR\nexport const LEVEL_INFO: LevelType = LEVEL_ERROR | INFO\nexport const LEVEL_DEBUG: LevelType = LEVEL_INFO | DEBUG\nexport const LEVEL_TRACE: LevelType = LEVEL_DEBUG | TRACE\nexport const LOG_ALL: LevelType = LEVEL_TRACE\n\nexport const ERROR_STR = 'error'\nexport const INFO_STR = 'info'\nexport const DEBUG_STR = 'debug'\nexport const TRACE_STR = 'trace'\n\nexport const LEVEL_INFO_STR = 'levelInfo'\nexport const LEVEL_DEBUG_STR = 'levelDebug'\n\nexport function stringToLevel(value: string): LevelType {\n  switch (value) {\n    case ERROR_STR:\n      return ERROR\n    case INFO_STR:\n      return INFO\n    case DEBUG_STR:\n      return DEBUG\n    case TRACE_STR:\n      return TRACE\n\n    case LEVEL_INFO_STR:\n      return LEVEL_INFO\n    case LEVEL_DEBUG_STR:\n      return LEVEL_DEBUG\n  }\n\n  return LOG_ALL\n}\n\nexport default {\n  ERROR,\n  INFO,\n  DEBUG,\n  TRACE,\n  LEVEL_ERROR,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n  LEVEL_TRACE,\n  LOG_ALL,\n}\n","// export const isString = (str: any) => typeof str !== 'string'\n\nimport { BlockPanel } from './Logger'\n\nexport const isEmptyObject = (object: object | BlockPanel) => {\n  // @ts-ignore\n  for ({} in object) return false\n\n  return true\n}\n\nexport const isString = (value: any) => typeof value === 'string'\n\nexport const isObject: (v: any) => boolean =\n  Object.prototype.toString.call(null) === '[object Object]'\n    ? function (value: any): boolean {\n        // check ownerDocument here as well to exclude DOM nodes\n        return (\n          value != null &&\n          Object.prototype.toString.call(value) === '[object Object]' &&\n          value.ownerDocument === undefined\n        )\n      }\n    : function (value: any): boolean {\n        return Object.prototype.toString.call(value) === '[object Object]'\n      }\n","import { isEmptyObject } from './utils'\nimport type { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: ColorValue\n  background?: ColorValue\n}\n\ninterface MessageBlockOptions {\n  colors?: ColorCollection\n}\n\nexport interface MessageBlockConfig {\n  text: string\n  bgColor?: ColorValue | string\n  bold?: boolean\n  borderRadius?: number\n  color?: ColorValue | string\n  fontSize?: number\n  italic?: boolean\n  lineHeight?: number\n  offsetLeft?: number\n  offsetRight?: number\n  marginTop?: number\n  marginBottom?: number\n  padding?: number | [number, number]\n}\n\nclass MessageBlock {\n  private _text?: string\n  private readonly colors?: ColorCollection\n  private style: MessageBlockStyle = Object.create(null)\n\n  constructor(text: string | MessageBlockConfig, { colors }: MessageBlockOptions = Object.create(null)) {\n    this.colors = colors\n    if (text === undefined) {\n      throw Error('Invalid `text` argument for MessageBlock')\n    }\n\n    if (typeof text === 'string') {\n      this._text = text\n    } else {\n      this.fillFromConfig(text)\n    }\n  }\n\n  push(key: string, value?: string, check: boolean = false): this {\n    if (value !== undefined && (!check || !this.has('color'))) {\n      this.style[key] = value\n    }\n\n    return this\n  }\n\n  has(key: string): boolean {\n    return this.style[key] !== undefined\n  }\n\n  color(value?: string, check: boolean = false): this {\n    return this.push('color', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  background(value?: string, check: boolean = false): this {\n    return this.push('background', (this.colors && this.colors.get(value)) || value, check)\n  }\n\n  marginLeft(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-left', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginRight(value: number, check: boolean = false): this {\n    if (value != 0) {\n      return this.push('margin-right', `${value}px`, check)\n    }\n    return this\n  }\n\n  marginTop(value: number, check: boolean = false): this {\n    return this.push('margin-top', `${value}px`, check)\n  }\n\n  marginBottom(value: number, check: boolean = false): this {\n    return this.push('margin-bottom', `${value}px`, check)\n  }\n\n  margin(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('margin', value, check)\n  }\n\n  padding(vValue: number, hValue?: number, check: boolean = false): this {\n    let value = vValue === 0 ? '' : `${vValue}px`\n    if (hValue !== undefined) {\n      value += ` ${hValue}px`\n    }\n    return this.push('padding', value, check)\n  }\n\n  offsetLeft(value: number, check: boolean = false): this {\n    return this.marginLeft(value * 10, check)\n  }\n\n  offsetRight(value: number, check: boolean = false): this {\n    return this.marginRight(value * 10, check)\n  }\n\n  borderRadius(value: number, check: boolean = false): this {\n    return this.push('border-radius', `${value}px`, check)\n  }\n\n  border(width: number, style: string, color: ColorValue, check: boolean = false): this {\n    return this.push('border', `${width}px ${style} ${color}`, check)\n  }\n\n  size(value: number, check: boolean = false): this {\n    return this.push('font-size', `${value}px`, check)\n  }\n\n  bold(check: boolean = false): this {\n    return this.push('font-weight', 'bold', check)\n  }\n\n  italic(check: boolean = false): this {\n    return this.push('font-style', 'italic', check)\n  }\n\n  lineHeight(value: number, check: boolean = false): this {\n    return this.push('line-height', `${value}px`, check)\n  }\n\n  width(value?: number, check: boolean = false): this {\n    return value ? this.push('width', `${value}px`, check) : this\n  }\n\n  height(value?: number, check: boolean = false): this {\n    return value ? this.push('height', `${value}px`, check) : this\n  }\n\n  image(url: string, width?: number, height?: number): this {\n    return this.push('background-image', `url(${url}}`).push('background-size', `cover`).width(width).height(height)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text || ''\n  }\n\n  fillFromConfig(config: MessageBlockConfig) {\n    this.text(config.text).background(config.bgColor).color(config.color)\n\n    config.offsetLeft && this.offsetLeft(config.offsetLeft)\n    config.offsetRight && this.offsetRight(config.offsetRight)\n    config.borderRadius && this.borderRadius(config.borderRadius)\n    config.bold && this.bold()\n    config.italic && this.italic()\n    config.fontSize && this.size(config.fontSize)\n    config.lineHeight && this.lineHeight(config.lineHeight)\n    config.marginBottom && this.marginBottom(config.marginBottom)\n    config.marginTop && this.marginTop(config.marginTop)\n\n    if (config.padding) {\n      if (Array.isArray(config.padding)) {\n        this.padding(config.padding[0], config.padding[1])\n      } else {\n        this.padding(config.padding)\n      }\n    }\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = Object.create(null)\n\n    return this\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style,\n    })\n  }\n\n  static instance(\n    block: MessageBlock | MessageBlockConfig | string,\n    options: MessageBlockOptions = Object.create(null)\n  ): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block, options)\n  }\n}\n\nexport default MessageBlock\n","import MessageBlock from './MessageBlock'\nimport ColorCollection from './ColorCollection'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string, colors?: ColorCollection) {\n    this.parse(text, colors)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(...args: (MessageBlock | null)[]): this {\n    args.forEach(block => {\n      if (block instanceof MessageBlock) {\n        this.blocks.push(block)\n      }\n    })\n\n    return this\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock, colors?: ColorCollection): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text, { colors }))\n    }\n  }\n\n  static instance(block?: Message | MessageBlock | string, colors?: ColorCollection): Message {\n    return block instanceof Message ? block : new Message(block, colors)\n  }\n}\n\nexport default Message\n","import { LoggerDriver } from './drivers/LoggerDriver'\nimport ConsoleBufferDriver from './drivers/ConsoleBufferDriver'\nimport type { LevelType } from './LogLevel'\nimport { DEBUG, ERROR, INFO, LOG_ALL, StringLevelType, stringToLevel, TRACE } from './LogLevel'\nimport Message from './Message'\nimport type { MessageBlockConfig } from './MessageBlock'\nimport MessageBlock from './MessageBlock'\nimport { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\nimport { isEmptyObject, isObject, isString } from './utils'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  colors: ColorCollection\n  level?: StringLevelType\n}\n\ninterface PanelOptions {\n  bgColor?: ColorValue | string\n  color?: ColorValue | string\n  offset?: number\n}\n\nexport type BlockPanel = string | MessageBlockConfig | MessageBlock\n\nclass Logger {\n  private driver: LoggerDriver\n  private originDriver?: LoggerDriver\n  private readonly colors: ColorCollection\n\n  private logLevel: LevelType = LOG_ALL\n\n  constructor({ driver, colors, level }: LoggerConfig) {\n    this.driver = driver\n    this.colors = colors\n\n    if (level) {\n      if (typeof level === 'string') {\n        this.logLevel = stringToLevel(level)\n      } else {\n        this.logLevel = level\n      }\n    }\n  }\n\n  setLogLevel(level: LevelType): void {\n    this.logLevel = level\n  }\n\n  addLogLevel(level: LevelType): void {\n    this.logLevel |= level\n  }\n\n  excludeLogLevel(level: LevelType): void {\n    this.logLevel ^= level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  public setDriver(driver: LoggerDriver): this {\n    this.driver = driver\n\n    return this\n  }\n\n  public enableDebug({ printFragmented, debugFn }: { printFragmented?: boolean; debugFn?: Function } = {}): this {\n    this.originDriver = this.driver\n    this.driver = new ConsoleBufferDriver({ print: true, printFragmented, debugFn })\n\n    return this\n  }\n\n  public disableDebug(): this {\n    if (this.originDriver) {\n      this.setDriver(this.originDriver)\n      this.originDriver = undefined\n    }\n\n    return this\n  }\n\n  public getColors(): ColorCollection {\n    return this.colors\n  }\n\n  private shouldLog(level: StringLevelType): boolean {\n    if (typeof level === 'string') {\n      level = stringToLevel(level)\n    }\n\n    return (this.logLevel & level) !== 0\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(this.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(INFO)) {\n      return\n    }\n\n    const msg = this.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(DEBUG)) {\n      return\n    }\n\n    this.driver.debug(this.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(ERROR)) {\n      return\n    }\n\n    this.driver.error(this.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(TRACE)) {\n      return\n    }\n\n    this.driver.trace(this.buildMessage(msgText, prefix, offset))\n  }\n\n  /**\n   * @deprecated\n   * @use panels\n   */\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor, color, offset }: PanelOptions = Object.create(null),\n    baseText?: string | MessageBlock,\n    logLevel?: StringLevelType\n  ) {\n    if (logLevel && !this.shouldLog(logLevel)) {\n      return\n    }\n\n    const msg = Message.instance(undefined, this.colors).pushBlock(\n      MessageBlock.instance(panelText, { colors: this.colors })\n        .background(bgColor || 'white')\n        .color(color || 'gray')\n        .offsetLeft(offset || 0)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText, { colors: this.colors }).offsetLeft(1) : null\n    )\n\n    this.driver.log(msg)\n  }\n\n  panels(logLevel?: StringLevelType, ...blockConfigs: BlockPanel[]) {\n    if (!blockConfigs.length || (logLevel && !this.shouldLog(logLevel))) {\n      return\n    }\n\n    const blocks: MessageBlock[] = []\n    blockConfigs.forEach(blockConfig => {\n      if ((isString(blockConfig) && blockConfig !== '') || (isObject(blockConfig) && !isEmptyObject(blockConfig))) {\n        blocks.push(MessageBlock.instance(blockConfig, { colors: this.colors }))\n      }\n    })\n\n    if (!blocks.length) {\n      return\n    }\n\n    const msg = Message.instance().pushBlock(...blocks)\n\n    this.driver.log(msg)\n  }\n\n  private buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message(undefined, this.colors)\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix, { colors: this.colors }).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText, { colors: this.colors }))\n\n    return msg\n  }\n}\n\nexport default Logger\n","/*\nimport { Enumerate } from './helper-types'\n\ntype RGBDigit = Enumerate<256>\n\ntype RGB = `rgb(${RGBDigit}, ${RGBDigit}, ${number})`;\ntype RGBA = `rgba(${RGBDigit}, ${RGBDigit}, ${number}, ${number})`;\n\ntype HexDigit =\n  '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | 'a'\n  | 'b'\n  | 'c'\n  | 'd'\n  | 'e'\n  | 'f'\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F';\n\ntype MinHexDigitColor = `${HexDigit}${HexDigit}${HexDigit}`;\ntype ShortHexColor = `#${MinHexDigitColor}`;\ntype LongHexColor = `${ShortHexColor}${MinHexDigitColor}`;\ntype HexColor = LongHexColor | ShortHexColor;\n*/\n\ntype RGB = `rgb(${number}, ${number}, ${number})`\ntype RGBA = `rgba(${number}, ${number}, ${number}, ${number})`\ntype HexColor = `#${string}`\n\nexport type ColorValue = HexColor | RGB | RGBA\ntype ColorsType = Record<string, ColorValue>\n\nconst colors: ColorsType = {\n  black: '#000000',\n  gray: '#1B2B34',\n  grayLight: '#334048',\n  red: '#ff000f',\n  redLight: '#EC5f67',\n  orange: '#F99157',\n  yellow: '#FAC863',\n  green: '#14be00',\n  greenLight: '#99C794',\n  teal: '#5FB3B3',\n  blue: '#6699CC',\n  purple: '#C594C5',\n  brown: '#AB7967',\n  white: '#FFFFFF',\n}\n\nexport default colors\n","import { ColorValue } from './Color'\n\ntype ListCollectionType = Record<string, ColorValue>\n\nexport default class ColorCollection {\n  list: ListCollectionType = {}\n\n  constructor(list?: ListCollectionType) {\n    if (list) {\n      this.setCollection(list)\n    }\n  }\n\n  set(name: string, value: ColorValue): this {\n    this.list[name] = value\n\n    return this\n  }\n\n  setCollection(colors: ListCollectionType): this {\n    Object.keys(colors).forEach(name => {\n      this.set(name, colors[name])\n    })\n\n    return this\n  }\n\n  get(name?: string): ColorValue | undefined {\n    return name ? this.list[name] : undefined\n  }\n\n  remove(name: string): this {\n    delete this.list[name]\n\n    return this\n  }\n}\n","import type { LevelType } from './LogLevel'\nimport { LOG_ALL } from './LogLevel'\nimport Logger from './Logger'\nimport { ConsoleDriver } from './drivers'\nimport ColorCollection from './ColorCollection'\nimport colors from './Color'\n\nconst BrowserLogger = (level: LevelType | string = LOG_ALL) =>\n  new Logger({\n    driver: new ConsoleDriver(),\n    colors: new ColorCollection(colors),\n    level: level,\n  })\n\nexport { BrowserLogger }\n"],"names":["ConsoleDriver","console","msg","perform","type","lines","buildStrings","formatMessage","output","fmt","fmtStr","fmtArgs","getBlocks","forEach","block","formatBlock","str","args","push","getText","strStyle","style","getStyle","keyStyle","ConsoleBuffer","print","printFragmented","debugFn","dir","buffer","warn","performFragmented","length","fragments","split","slice","styles","error","log","fragment","idx","ERROR","INFO","DEBUG","TRACE","LEVEL_ERROR","LEVEL_INFO","LEVEL_DEBUG","LEVEL_TRACE","LOG_ALL","ERROR_STR","INFO_STR","DEBUG_STR","TRACE_STR","LEVEL_INFO_STR","LEVEL_DEBUG_STR","stringToLevel","value","isEmptyObject","object","isString","isObject","Object","prototype","toString","call","ownerDocument","undefined","MessageBlock","text","create","colors","Error","_text","fillFromConfig","key","check","has","get","vValue","hValue","marginLeft","marginRight","width","color","url","height","config","background","bgColor","offsetLeft","offsetRight","borderRadius","bold","italic","fontSize","size","lineHeight","marginBottom","marginTop","padding","Array","isArray","JSON","stringify","options","Message","parse","blocks","pushBlock","instance","Logger","driver","level","logLevel","originDriver","ConsoleBufferDriver","setDriver","msgText","prefix","offset","buildMessage","shouldLog","info","debug","trace","panelText","baseText","blockConfigs","blockConfig","black","gray","grayLight","red","redLight","orange","yellow","green","greenLight","teal","blue","purple","brown","white","ColorCollection","list","setCollection","name","keys","set","BrowserLogger"],"mappings":"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"}