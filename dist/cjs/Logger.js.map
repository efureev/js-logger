{"version":3,"sources":["../../src/Logger.ts"],"names":["Logger","config","LEVEL_ERROR","driver","level","logLevel","msgLevel","msgText","prefix","offset","log","buildMessage","shouldLog","LEVEL_INFO","msg","info","LEVEL_DEBUG","debug","error","LEVEL_TRACE","trace","panelText","bgColor","colors","white","color","gray","baseText","Message","instance","pushBlock","MessageBlock","background","offsetLeft","borderRadius","padding","block","offsetRight"],"mappings":"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","sourcesContent":["import { LoggerDriver } from './drivers/LoggerDriver'\nimport { LEVEL_DEBUG, LEVEL_ERROR, LEVEL_INFO, LEVEL_TRACE } from './LogLevel'\nimport Message from './Message'\nimport colors from './Color'\nimport MessageBlock from './MessageBlock'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  level?: number\n}\n\nclass Logger {\n  private readonly driver: LoggerDriver\n  private logLevel: number = LEVEL_ERROR\n\n  constructor(config: LoggerConfig) {\n    this.driver = config.driver\n    if (config.level) {\n      this.logLevel = config.level\n    }\n  }\n\n  setLevel(level: number): void {\n    this.logLevel = level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  private shouldLog(msgLevel: number) {\n    return this.logLevel <= msgLevel // @todo: bit operations\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    this.driver.log(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): void {\n    if (!this.shouldLog(LEVEL_INFO)) {\n      return\n    }\n\n    const msg = Logger.buildMessage(msgText, prefix, offset)\n\n    this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_DEBUG)) {\n      return\n    }\n\n    this.driver.debug(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_ERROR)) {\n      return\n    }\n\n    this.driver.error(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0) {\n    if (!this.shouldLog(LEVEL_TRACE)) {\n      return\n    }\n\n    this.driver.trace(Logger.buildMessage(msgText, prefix, offset))\n  }\n\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor = colors.white, color = colors.gray, offset = 0 } = {},\n    baseText?: string | MessageBlock\n  ) {\n    const msg = Message.instance().pushBlock(\n      MessageBlock.instance(panelText)\n        .background(bgColor)\n        .color(color)\n        .offsetLeft(offset)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText).offsetLeft(1) : null\n    )\n\n    this.driver.log(msg)\n  }\n\n  private static buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message()\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText))\n\n    return msg\n  }\n}\n\nexport default Logger\n"],"file":"Logger.js"}