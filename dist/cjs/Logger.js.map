{"version":3,"file":"Logger.js","names":["Logger","driver","colors","level","LOG_ALL","logLevel","stringToLevel","printFragmented","debugFn","originDriver","ConsoleBufferDriver","print","setDriver","undefined","returnResult","msgText","prefix","offset","log","buildMessage","shouldLog","INFO","msg","info","DEBUG","debug","ERROR","error","TRACE","trace","panelText","Object","create","bgColor","color","baseText","Message","instance","pushBlock","MessageBlock","background","offsetLeft","borderRadius","padding","blockConfigs","length","blocks","forEach","blockConfig","isString","isObject","isEmptyObject","push","block","offsetRight"],"sources":["../../src/Logger.ts"],"sourcesContent":["import { LoggerDriver } from './drivers/LoggerDriver'\nimport ConsoleBufferDriver from './drivers/ConsoleBufferDriver'\nimport type { LevelType } from './LogLevel'\nimport { DEBUG, ERROR, INFO, LOG_ALL, StringLevelType, stringToLevel, TRACE } from './LogLevel'\nimport Message from './Message'\nimport type { MessageBlockConfig } from './MessageBlock'\nimport MessageBlock from './MessageBlock'\nimport { ColorValue } from './Color'\nimport ColorCollection from './ColorCollection'\nimport { isEmptyObject, isObject, isString } from './utils'\n\nexport interface LoggerConfig {\n  driver: LoggerDriver\n  colors: ColorCollection\n  level?: StringLevelType\n}\n\ninterface PanelOptions {\n  bgColor?: ColorValue | string\n  color?: ColorValue | string\n  offset?: number\n}\n\nexport type BlockPanel = string | MessageBlockConfig | MessageBlock\n\nclass Logger {\n  private driver: LoggerDriver\n  private originDriver?: LoggerDriver\n  private readonly colors: ColorCollection\n\n  private logLevel: LevelType = LOG_ALL\n\n  constructor({ driver, colors, level }: LoggerConfig) {\n    this.driver = driver\n    this.colors = colors\n\n    if (level) {\n      if (typeof level === 'string') {\n        this.logLevel = stringToLevel(level)\n      } else {\n        this.logLevel = level\n      }\n    }\n  }\n\n  setLogLevel(level: LevelType): void {\n    this.logLevel = level\n  }\n\n  addLogLevel(level: LevelType): void {\n    this.logLevel |= level\n  }\n\n  excludeLogLevel(level: LevelType): void {\n    this.logLevel ^= level\n  }\n\n  public getDriver(): LoggerDriver {\n    return this.driver\n  }\n\n  public setDriver(driver: LoggerDriver): this {\n    this.driver = driver\n\n    return this\n  }\n\n  public enableDebug({ printFragmented, debugFn }: { printFragmented?: boolean; debugFn?: Function } = {}): this {\n    this.originDriver = this.driver\n    this.driver = new ConsoleBufferDriver({ print: true, printFragmented, debugFn })\n\n    return this\n  }\n\n  public disableDebug(): this {\n    if (this.originDriver) {\n      this.setDriver(this.originDriver)\n      this.originDriver = undefined\n    }\n\n    return this\n  }\n\n  public returnResult(): this {\n    this.driver.returnResult()\n\n    return this\n  }\n\n  public getColors(): ColorCollection {\n    return this.colors\n  }\n\n  private shouldLog(level: StringLevelType): boolean {\n    if (typeof level === 'string') {\n      level = stringToLevel(level)\n    }\n\n    return (this.logLevel & level) !== 0\n  }\n\n  log(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): string[] | void {\n    return this.driver.log(this.buildMessage(msgText, prefix, offset))\n  }\n\n  info(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): string[] | void {\n    if (!this.shouldLog(INFO)) {\n      return\n    }\n\n    const msg = this.buildMessage(msgText, prefix, offset)\n\n    return this.driver.info(msg)\n  }\n\n  debug(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): string[] | void {\n    if (!this.shouldLog(DEBUG)) {\n      return\n    }\n\n    return this.driver.debug(this.buildMessage(msgText, prefix, offset))\n  }\n\n  error(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): string[] | void {\n    if (!this.shouldLog(ERROR)) {\n      return\n    }\n\n    return this.driver.error(this.buildMessage(msgText, prefix, offset))\n  }\n\n  trace(msgText: string | Message | MessageBlock, prefix?: string, offset = 0): string[] | void {\n    if (!this.shouldLog(TRACE)) {\n      return\n    }\n\n    return this.driver.trace(this.buildMessage(msgText, prefix, offset))\n  }\n\n  /**\n   * @deprecated\n   * @use panels\n   */\n  panel(\n    panelText: string | MessageBlock,\n    { bgColor, color, offset }: PanelOptions = Object.create(null),\n    baseText?: string | MessageBlock,\n    logLevel?: StringLevelType\n  ): string[] | void {\n    if (logLevel && !this.shouldLog(logLevel)) {\n      return\n    }\n\n    const msg = Message.instance(undefined, this.colors).pushBlock(\n      MessageBlock.instance(panelText, { colors: this.colors })\n        .background(bgColor || 'white')\n        .color(color || 'gray')\n        .offsetLeft(offset || 0)\n        .borderRadius(3)\n        .padding(2, 4),\n\n      baseText ? MessageBlock.instance(baseText, { colors: this.colors }).offsetLeft(1) : null\n    )\n\n    return this.driver.log(msg)\n  }\n\n  panels(logLevel?: StringLevelType, ...blockConfigs: BlockPanel[]): string[] | void {\n    if (!blockConfigs.length || (logLevel && !this.shouldLog(logLevel))) {\n      return\n    }\n\n    const blocks: MessageBlock[] = []\n    blockConfigs.forEach(blockConfig => {\n      if ((isString(blockConfig) && blockConfig !== '') || (isObject(blockConfig) && !isEmptyObject(blockConfig))) {\n        blocks.push(MessageBlock.instance(blockConfig, { colors: this.colors }))\n      }\n    })\n\n    if (!blocks.length) {\n      return\n    }\n\n    const msg = Message.instance().pushBlock(...blocks)\n\n    return this.driver.log(msg)\n  }\n\n  private buildMessage(msgText: string | Message | MessageBlock, prefix?: string, offset: number = 0): Message {\n    if (msgText instanceof Message) {\n      return msgText\n    }\n\n    const msg = new Message(undefined, this.colors)\n\n    if (prefix) {\n      const block = MessageBlock.instance(prefix, { colors: this.colors }).offsetRight(1)\n\n      if (offset) {\n        block.offsetLeft(offset)\n      }\n\n      msg.pushBlock(block)\n    }\n\n    msg.pushBlock(MessageBlock.instance(msgText, { colors: this.colors }))\n\n    return msg\n  }\n}\n\nexport default Logger\n"],"mappings":";;;;;;;AACA;;AAEA;;AACA;;AAEA;;AAGA;;;;;;;;;;;;IAgBMA,M;EAOJ,sBAAqD;IAAA,IAAvCC,MAAuC,QAAvCA,MAAuC;IAAA,IAA/BC,MAA+B,QAA/BA,MAA+B;IAAA,IAAvBC,KAAuB,QAAvBA,KAAuB;;IAAA;;IAAA,kCAFvBC,iBAEuB;;IACnD,KAAKH,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;;IAEA,IAAIC,KAAJ,EAAW;MACT,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;QAC7B,KAAKE,QAAL,GAAgB,IAAAC,uBAAA,EAAcH,KAAd,CAAhB;MACD,CAFD,MAEO;QACL,KAAKE,QAAL,GAAgBF,KAAhB;MACD;IACF;EACF;;;;WAED,qBAAYA,KAAZ,EAAoC;MAClC,KAAKE,QAAL,GAAgBF,KAAhB;IACD;;;WAED,qBAAYA,KAAZ,EAAoC;MAClC,KAAKE,QAAL,IAAiBF,KAAjB;IACD;;;WAED,yBAAgBA,KAAhB,EAAwC;MACtC,KAAKE,QAAL,IAAiBF,KAAjB;IACD;;;WAED,qBAAiC;MAC/B,OAAO,KAAKF,MAAZ;IACD;;;WAED,mBAAiBA,MAAjB,EAA6C;MAC3C,KAAKA,MAAL,GAAcA,MAAd;MAEA,OAAO,IAAP;IACD;;;WAED,uBAA+G;MAAA,gFAAV,EAAU;MAAA,IAA1FM,eAA0F,SAA1FA,eAA0F;MAAA,IAAzEC,OAAyE,SAAzEA,OAAyE;;MAC7G,KAAKC,YAAL,GAAoB,KAAKR,MAAzB;MACA,KAAKA,MAAL,GAAc,IAAIS,4BAAJ,CAAwB;QAAEC,KAAK,EAAE,IAAT;QAAeJ,eAAe,EAAfA,eAAf;QAAgCC,OAAO,EAAPA;MAAhC,CAAxB,CAAd;MAEA,OAAO,IAAP;IACD;;;WAED,wBAA4B;MAC1B,IAAI,KAAKC,YAAT,EAAuB;QACrB,KAAKG,SAAL,CAAe,KAAKH,YAApB;QACA,KAAKA,YAAL,GAAoBI,SAApB;MACD;;MAED,OAAO,IAAP;IACD;;;WAED,wBAA4B;MAC1B,KAAKZ,MAAL,CAAYa,YAAZ;MAEA,OAAO,IAAP;IACD;;;WAED,qBAAoC;MAClC,OAAO,KAAKZ,MAAZ;IACD;;;WAED,mBAAkBC,KAAlB,EAAmD;MACjD,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;QAC7BA,KAAK,GAAG,IAAAG,uBAAA,EAAcH,KAAd,CAAR;MACD;;MAED,OAAO,CAAC,KAAKE,QAAL,GAAgBF,KAAjB,MAA4B,CAAnC;IACD;;;WAED,aAAIY,OAAJ,EAA8CC,MAA9C,EAA4F;MAAA,IAA7BC,MAA6B,uEAApB,CAAoB;MAC1F,OAAO,KAAKhB,MAAL,CAAYiB,GAAZ,CAAgB,KAAKC,YAAL,CAAkBJ,OAAlB,EAA2BC,MAA3B,EAAmCC,MAAnC,CAAhB,CAAP;IACD;;;WAED,cAAKF,OAAL,EAA+CC,MAA/C,EAA6F;MAAA,IAA7BC,MAA6B,uEAApB,CAAoB;;MAC3F,IAAI,CAAC,KAAKG,SAAL,CAAeC,cAAf,CAAL,EAA2B;QACzB;MACD;;MAED,IAAMC,GAAG,GAAG,KAAKH,YAAL,CAAkBJ,OAAlB,EAA2BC,MAA3B,EAAmCC,MAAnC,CAAZ;MAEA,OAAO,KAAKhB,MAAL,CAAYsB,IAAZ,CAAiBD,GAAjB,CAAP;IACD;;;WAED,eAAMP,OAAN,EAAgDC,MAAhD,EAA8F;MAAA,IAA7BC,MAA6B,uEAApB,CAAoB;;MAC5F,IAAI,CAAC,KAAKG,SAAL,CAAeI,eAAf,CAAL,EAA4B;QAC1B;MACD;;MAED,OAAO,KAAKvB,MAAL,CAAYwB,KAAZ,CAAkB,KAAKN,YAAL,CAAkBJ,OAAlB,EAA2BC,MAA3B,EAAmCC,MAAnC,CAAlB,CAAP;IACD;;;WAED,eAAMF,OAAN,EAAgDC,MAAhD,EAA8F;MAAA,IAA7BC,MAA6B,uEAApB,CAAoB;;MAC5F,IAAI,CAAC,KAAKG,SAAL,CAAeM,eAAf,CAAL,EAA4B;QAC1B;MACD;;MAED,OAAO,KAAKzB,MAAL,CAAY0B,KAAZ,CAAkB,KAAKR,YAAL,CAAkBJ,OAAlB,EAA2BC,MAA3B,EAAmCC,MAAnC,CAAlB,CAAP;IACD;;;WAED,eAAMF,OAAN,EAAgDC,MAAhD,EAA8F;MAAA,IAA7BC,MAA6B,uEAApB,CAAoB;;MAC5F,IAAI,CAAC,KAAKG,SAAL,CAAeQ,eAAf,CAAL,EAA4B;QAC1B;MACD;;MAED,OAAO,KAAK3B,MAAL,CAAY4B,KAAZ,CAAkB,KAAKV,YAAL,CAAkBJ,OAAlB,EAA2BC,MAA3B,EAAmCC,MAAnC,CAAlB,CAAP;IACD;IAED;AACF;AACA;AACA;;;;WACE,eACEa,SADF,EAKmB;MAAA,gFAH0BC,MAAM,CAACC,MAAP,CAAc,IAAd,CAG1B;MAAA,IAHfC,OAGe,SAHfA,OAGe;MAAA,IAHNC,KAGM,SAHNA,KAGM;MAAA,IAHCjB,MAGD,SAHCA,MAGD;;MAAA,IAFjBkB,QAEiB;MAAA,IADjB9B,QACiB;;MACjB,IAAIA,QAAQ,IAAI,CAAC,KAAKe,SAAL,CAAef,QAAf,CAAjB,EAA2C;QACzC;MACD;;MAED,IAAMiB,GAAG,GAAGc,gBAAA,CAAQC,QAAR,CAAiBxB,SAAjB,EAA4B,KAAKX,MAAjC,EAAyCoC,SAAzC,CACVC,qBAAA,CAAaF,QAAb,CAAsBP,SAAtB,EAAiC;QAAE5B,MAAM,EAAE,KAAKA;MAAf,CAAjC,EACGsC,UADH,CACcP,OAAO,IAAI,OADzB,EAEGC,KAFH,CAESA,KAAK,IAAI,MAFlB,EAGGO,UAHH,CAGcxB,MAAM,IAAI,CAHxB,EAIGyB,YAJH,CAIgB,CAJhB,EAKGC,OALH,CAKW,CALX,EAKc,CALd,CADU,EAQVR,QAAQ,GAAGI,qBAAA,CAAaF,QAAb,CAAsBF,QAAtB,EAAgC;QAAEjC,MAAM,EAAE,KAAKA;MAAf,CAAhC,EAAyDuC,UAAzD,CAAoE,CAApE,CAAH,GAA4E,IAR1E,CAAZ;;MAWA,OAAO,KAAKxC,MAAL,CAAYiB,GAAZ,CAAgBI,GAAhB,CAAP;IACD;;;WAED,gBAAOjB,QAAP,EAAmF;MAAA;MAAA;;MAAA,kCAA7CuC,YAA6C;QAA7CA,YAA6C;MAAA;;MACjF,IAAI,CAACA,YAAY,CAACC,MAAd,IAAyBxC,QAAQ,IAAI,CAAC,KAAKe,SAAL,CAAef,QAAf,CAA1C,EAAqE;QACnE;MACD;;MAED,IAAMyC,MAAsB,GAAG,EAA/B;MACAF,YAAY,CAACG,OAAb,CAAqB,UAAAC,WAAW,EAAI;QAClC,IAAK,IAAAC,eAAA,EAASD,WAAT,KAAyBA,WAAW,KAAK,EAA1C,IAAkD,IAAAE,eAAA,EAASF,WAAT,KAAyB,CAAC,IAAAG,oBAAA,EAAcH,WAAd,CAAhF,EAA6G;UAC3GF,MAAM,CAACM,IAAP,CAAYb,qBAAA,CAAaF,QAAb,CAAsBW,WAAtB,EAAmC;YAAE9C,MAAM,EAAE,KAAI,CAACA;UAAf,CAAnC,CAAZ;QACD;MACF,CAJD;;MAMA,IAAI,CAAC4C,MAAM,CAACD,MAAZ,EAAoB;QAClB;MACD;;MAED,IAAMvB,GAAG,GAAG,qBAAAc,gBAAA,CAAQC,QAAR,IAAmBC,SAAnB,0BAAgCQ,MAAhC,CAAZ;;MAEA,OAAO,KAAK7C,MAAL,CAAYiB,GAAZ,CAAgBI,GAAhB,CAAP;IACD;;;WAED,sBAAqBP,OAArB,EAA+DC,MAA/D,EAA6G;MAAA,IAA7BC,MAA6B,uEAAZ,CAAY;;MAC3G,IAAIF,OAAO,YAAYqB,gBAAvB,EAAgC;QAC9B,OAAOrB,OAAP;MACD;;MAED,IAAMO,GAAG,GAAG,IAAIc,gBAAJ,CAAYvB,SAAZ,EAAuB,KAAKX,MAA5B,CAAZ;;MAEA,IAAIc,MAAJ,EAAY;QACV,IAAMqC,KAAK,GAAGd,qBAAA,CAAaF,QAAb,CAAsBrB,MAAtB,EAA8B;UAAEd,MAAM,EAAE,KAAKA;QAAf,CAA9B,EAAuDoD,WAAvD,CAAmE,CAAnE,CAAd;;QAEA,IAAIrC,MAAJ,EAAY;UACVoC,KAAK,CAACZ,UAAN,CAAiBxB,MAAjB;QACD;;QAEDK,GAAG,CAACgB,SAAJ,CAAce,KAAd;MACD;;MAED/B,GAAG,CAACgB,SAAJ,CAAcC,qBAAA,CAAaF,QAAb,CAAsBtB,OAAtB,EAA+B;QAAEb,MAAM,EAAE,KAAKA;MAAf,CAA/B,CAAd;MAEA,OAAOoB,GAAP;IACD;;;;;;eAGYtB,M"}