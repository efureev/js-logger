{"version":3,"sources":["../../src/Message.ts"],"names":["Message","text","Array","parse","blocks","block","push","length","pushBlock","MessageBlock","instance"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;IAEMA,O;AAGJ,mBAAYC,IAAZ,EAA0C;AAAA;;AAAA,oCAFJ,IAAIC,KAAJ,EAEI;;AACxC,SAAKC,KAAL,CAAWF,IAAX;AACD;;;;WAED,qBAAiC;AAC/B,aAAO,KAAKG,MAAZ;AACD;;;WAED,mBAAUC,KAAV,EAAqC;AACnC,WAAKD,MAAL,CAAYE,IAAZ,CAAiBD,KAAjB;AACD;;;WAED,iBAAQ;AACN,WAAKD,MAAL,GAAc,EAAd;AACD;;;WAED,iBAAgB;AACd,aAAO,KAAKA,MAAL,CAAYG,MAAnB;AACD;;;WAED,eAAcN,IAAd,EAAkD;AAChD,UAAIA,IAAJ,EAAU;AACR,aAAKO,SAAL,CAAeC,sBAAaC,QAAb,CAAsBT,IAAtB,CAAf;AACD;AACF;;;WAED,kBAAgBI,KAAhB,EAAiE;AAC/D,aAAOA,KAAK,YAAYL,OAAjB,GAA2BK,KAA3B,GAAmC,IAAIL,OAAJ,CAAYK,KAAZ,CAA1C;AACD;;;;;;eAGYL,O","sourcesContent":["import MessageBlock from './MessageBlock'\n\nclass Message {\n  private blocks: Array<MessageBlock> = new Array<MessageBlock>()\n\n  constructor(text?: MessageBlock | string) {\n    this.parse(text)\n  }\n\n  getBlocks(): Array<MessageBlock> {\n    return this.blocks\n  }\n\n  pushBlock(block: MessageBlock): void {\n    this.blocks.push(block)\n  }\n\n  clear() {\n    this.blocks = []\n  }\n\n  count(): number {\n    return this.blocks.length\n  }\n\n  private parse(text?: string | MessageBlock): void {\n    if (text) {\n      this.pushBlock(MessageBlock.instance(text))\n    }\n  }\n\n  static instance(block: Message | MessageBlock | string): Message {\n    return block instanceof Message ? block : new Message(block)\n  }\n}\n\nexport default Message\n"],"file":"Message.js"}