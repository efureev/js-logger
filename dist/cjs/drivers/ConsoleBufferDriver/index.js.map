{"version":3,"file":"index.js","names":["ConsoleBuffer","print","printFragmented","debugFn","output","dir","msg","type","buffer","ConsoleDriver","buildStrings","formatMessage","warn","result","performFragmented","_returnResult","length","fragments","split","slice","styles","error","log","forEach","fragment","idx"],"sources":["../../../../src/drivers/ConsoleBufferDriver/index.ts"],"sourcesContent":["import ConsoleDriver from '../ConsoleDriver'\nimport Message from '../../Message'\n\nexport interface ConsoleBufferConfig {\n  print?: boolean\n  printFragmented?: boolean\n  debugFn?: Function\n}\n\nexport default class ConsoleBuffer extends ConsoleDriver {\n  private readonly print: boolean = false\n  private readonly printFragmented: boolean = false\n  private readonly debugFn: Function\n\n  constructor({ print, printFragmented, debugFn }: ConsoleBufferConfig = {}) {\n    super()\n    this.print = print || false\n    this.printFragmented = printFragmented || false\n    this.debugFn = debugFn || this.output.dir\n  }\n\n  public buffer: string[] = []\n\n  protected perform(msg: Message, type: string): string[] | void {\n    this.buffer = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n    if (this.print) {\n      this.output.warn('--[debug] start')\n\n      const result = super.perform(msg, type)\n\n      this.debugFn(this.buffer)\n      if (this.printFragmented) {\n        this.performFragmented()\n      }\n      this.output.warn('--[debug] finish')\n      if (this._returnResult) {\n        return result\n      }\n    }\n  }\n\n  private performFragmented() {\n    if (!this.buffer.length) {\n      return\n    }\n\n    const fragments = this.buffer[0].split('%c').slice(1)\n    const styles = this.buffer.slice(1)\n\n    if (fragments.length != styles.length) {\n      this.output.error('data inconsistency error: fragments: %d, styles: %d', fragments.length, styles.length)\n      this.output.log('fragments', fragments)\n      this.output.log('styles', styles)\n    }\n\n    fragments.forEach((fragment, idx) => {\n      this.output.log(`${fragment}: ${styles[idx]}`)\n      this.output.log(`%c${fragment}`, styles[idx])\n    })\n  }\n\n  public clearBuffer() {\n    this.buffer = []\n  }\n}\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IASqBA,a;;;;;EAKnB,yBAA2E;IAAA;;IAAA,+EAAJ,EAAI;IAAA,IAA7DC,KAA6D,QAA7DA,KAA6D;IAAA,IAAtDC,eAAsD,QAAtDA,eAAsD;IAAA,IAArCC,OAAqC,QAArCA,OAAqC;;IAAA;;IACzE;;IADyE,wDAJzC,KAIyC;;IAAA,kEAH/B,KAG+B;;IAAA,yDAOjD,EAPiD;;IAEzE,MAAKF,KAAL,GAAaA,KAAK,IAAI,KAAtB;IACA,MAAKC,eAAL,GAAuBA,eAAe,IAAI,KAA1C;IACA,MAAKC,OAAL,GAAeA,OAAO,IAAI,MAAKC,MAAL,CAAYC,GAAtC;IAJyE;EAK1E;;;;WAID,iBAAkBC,GAAlB,EAAgCC,IAAhC,EAA+D;MAC7D,KAAKC,MAAL,GAAcC,uBAAA,CAAcC,YAAd,CAA2BD,uBAAA,CAAcE,aAAd,CAA4BL,GAA5B,CAA3B,CAAd;;MACA,IAAI,KAAKL,KAAT,EAAgB;QACd,KAAKG,MAAL,CAAYQ,IAAZ,CAAiB,iBAAjB;;QAEA,IAAMC,MAAM,8EAAiBP,GAAjB,EAAsBC,IAAtB,CAAZ;;QAEA,KAAKJ,OAAL,CAAa,KAAKK,MAAlB;;QACA,IAAI,KAAKN,eAAT,EAA0B;UACxB,KAAKY,iBAAL;QACD;;QACD,KAAKV,MAAL,CAAYQ,IAAZ,CAAiB,kBAAjB;;QACA,IAAI,KAAKG,aAAT,EAAwB;UACtB,OAAOF,MAAP;QACD;MACF;IACF;;;WAED,6BAA4B;MAAA;;MAC1B,IAAI,CAAC,KAAKL,MAAL,CAAYQ,MAAjB,EAAyB;QACvB;MACD;;MAED,IAAMC,SAAS,GAAG,KAAKT,MAAL,CAAY,CAAZ,EAAeU,KAAf,CAAqB,IAArB,EAA2BC,KAA3B,CAAiC,CAAjC,CAAlB;MACA,IAAMC,MAAM,GAAG,KAAKZ,MAAL,CAAYW,KAAZ,CAAkB,CAAlB,CAAf;;MAEA,IAAIF,SAAS,CAACD,MAAV,IAAoBI,MAAM,CAACJ,MAA/B,EAAuC;QACrC,KAAKZ,MAAL,CAAYiB,KAAZ,CAAkB,qDAAlB,EAAyEJ,SAAS,CAACD,MAAnF,EAA2FI,MAAM,CAACJ,MAAlG;QACA,KAAKZ,MAAL,CAAYkB,GAAZ,CAAgB,WAAhB,EAA6BL,SAA7B;QACA,KAAKb,MAAL,CAAYkB,GAAZ,CAAgB,QAAhB,EAA0BF,MAA1B;MACD;;MAEDH,SAAS,CAACM,OAAV,CAAkB,UAACC,QAAD,EAAWC,GAAX,EAAmB;QACnC,MAAI,CAACrB,MAAL,CAAYkB,GAAZ,WAAmBE,QAAnB,eAAgCJ,MAAM,CAACK,GAAD,CAAtC;;QACA,MAAI,CAACrB,MAAL,CAAYkB,GAAZ,aAAqBE,QAArB,GAAiCJ,MAAM,CAACK,GAAD,CAAvC;MACD,CAHD;IAID;;;WAED,uBAAqB;MACnB,KAAKjB,MAAL,GAAc,EAAd;IACD;;;;EAtDwCC,uB"}