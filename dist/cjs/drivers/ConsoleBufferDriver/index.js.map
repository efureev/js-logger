{"version":3,"file":"index.js","names":["ConsoleBuffer","print","printFragmented","debugFn","output","dir","msg","type","buffer","ConsoleDriver","buildStrings","formatMessage","warn","performFragmented","length","fragments","split","slice","styles","error","log","forEach","fragment","idx"],"sources":["../../../../src/drivers/ConsoleBufferDriver/index.ts"],"sourcesContent":["import ConsoleDriver from '../ConsoleDriver'\nimport Message from '../../Message'\n\nexport interface ConsoleBufferConfig {\n  print: boolean\n  printFragmented?: boolean\n  debugFn?: Function\n}\n\nexport default class ConsoleBuffer extends ConsoleDriver {\n  private readonly print: boolean = false\n  private readonly printFragmented: boolean = false\n  private readonly debugFn: Function\n\n  constructor({ print, printFragmented, debugFn }: ConsoleBufferConfig) {\n    super()\n    this.print = print\n    this.printFragmented = printFragmented || false\n    this.debugFn = debugFn || this.output.dir\n  }\n\n  public buffer: string[] = []\n\n  protected perform(msg: Message, type: string) {\n    this.buffer = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n    if (this.print) {\n      this.output.warn('--[debug] start')\n      super.perform(msg, type)\n      this.debugFn(this.buffer)\n      if (this.printFragmented) {\n        this.performFragmented()\n      }\n      this.output.warn('--[debug] finish')\n    }\n  }\n\n  private performFragmented() {\n    if (!this.buffer.length) {\n      return\n    }\n\n    const fragments = this.buffer[0].split('%c').slice(1)\n    const styles = this.buffer.slice(1)\n\n    if (fragments.length != styles.length) {\n      this.output.error('data inconsistency error: fragments: %d, styles: %d', fragments.length, styles.length)\n      this.output.log('fragments', fragments)\n      this.output.log('styles', styles)\n    }\n\n    fragments.forEach((fragment, idx) => {\n      this.output.log(`${fragment}: ${styles[idx]}`)\n      this.output.log(`%c${fragment}`, styles[idx])\n    })\n  }\n\n  public clearBuffer() {\n    this.buffer = []\n  }\n}\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IASqBA,a;;;;;EAKnB,6BAAsE;IAAA;;IAAA,IAAxDC,KAAwD,QAAxDA,KAAwD;IAAA,IAAjDC,eAAiD,QAAjDA,eAAiD;IAAA,IAAhCC,OAAgC,QAAhCA,OAAgC;;IAAA;;IACpE;;IADoE,wDAJpC,KAIoC;;IAAA,kEAH1B,KAG0B;;IAAA,yDAO5C,EAP4C;;IAEpE,MAAKF,KAAL,GAAaA,KAAb;IACA,MAAKC,eAAL,GAAuBA,eAAe,IAAI,KAA1C;IACA,MAAKC,OAAL,GAAeA,OAAO,IAAI,MAAKC,MAAL,CAAYC,GAAtC;IAJoE;EAKrE;;;;WAID,iBAAkBC,GAAlB,EAAgCC,IAAhC,EAA8C;MAC5C,KAAKC,MAAL,GAAcC,uBAAA,CAAcC,YAAd,CAA2BD,uBAAA,CAAcE,aAAd,CAA4BL,GAA5B,CAA3B,CAAd;;MACA,IAAI,KAAKL,KAAT,EAAgB;QACd,KAAKG,MAAL,CAAYQ,IAAZ,CAAiB,iBAAjB;;QACA,2EAAcN,GAAd,EAAmBC,IAAnB;;QACA,KAAKJ,OAAL,CAAa,KAAKK,MAAlB;;QACA,IAAI,KAAKN,eAAT,EAA0B;UACxB,KAAKW,iBAAL;QACD;;QACD,KAAKT,MAAL,CAAYQ,IAAZ,CAAiB,kBAAjB;MACD;IACF;;;WAED,6BAA4B;MAAA;;MAC1B,IAAI,CAAC,KAAKJ,MAAL,CAAYM,MAAjB,EAAyB;QACvB;MACD;;MAED,IAAMC,SAAS,GAAG,KAAKP,MAAL,CAAY,CAAZ,EAAeQ,KAAf,CAAqB,IAArB,EAA2BC,KAA3B,CAAiC,CAAjC,CAAlB;MACA,IAAMC,MAAM,GAAG,KAAKV,MAAL,CAAYS,KAAZ,CAAkB,CAAlB,CAAf;;MAEA,IAAIF,SAAS,CAACD,MAAV,IAAoBI,MAAM,CAACJ,MAA/B,EAAuC;QACrC,KAAKV,MAAL,CAAYe,KAAZ,CAAkB,qDAAlB,EAAyEJ,SAAS,CAACD,MAAnF,EAA2FI,MAAM,CAACJ,MAAlG;QACA,KAAKV,MAAL,CAAYgB,GAAZ,CAAgB,WAAhB,EAA6BL,SAA7B;QACA,KAAKX,MAAL,CAAYgB,GAAZ,CAAgB,QAAhB,EAA0BF,MAA1B;MACD;;MAEDH,SAAS,CAACM,OAAV,CAAkB,UAACC,QAAD,EAAWC,GAAX,EAAmB;QACnC,MAAI,CAACnB,MAAL,CAAYgB,GAAZ,WAAmBE,QAAnB,eAAgCJ,MAAM,CAACK,GAAD,CAAtC;;QACA,MAAI,CAACnB,MAAL,CAAYgB,GAAZ,aAAqBE,QAArB,GAAiCJ,MAAM,CAACK,GAAD,CAAvC;MACD,CAHD;IAID;;;WAED,uBAAqB;MACnB,KAAKf,MAAL,GAAc,EAAd;IACD;;;;EAjDwCC,uB"}