{"version":3,"file":"index.js","names":["ConsoleDriver","msg","perform","type","lines","buildStrings","formatMessage","console","fmt","fmtStr","fmtArgs","getBlocks","forEach","block","formatBlock","str","args","push","getText","strStyle","style","getStyle","keyStyle"],"sources":["../../../../src/drivers/ConsoleDriver/index.ts"],"sourcesContent":["import Message from '../../Message'\nimport MessageBlock from '../../MessageBlock'\nimport { LoggerDriver } from '../LoggerDriver'\n\n// import ColorCollection from '../../ColorCollection'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\n/*\n\nexport interface DriverConfig {\n  colorCollection: ColorCollection\n}\n*/\n\n\nclass ConsoleDriver implements LoggerDriver {\n  // private readonly colorCollection: ColorCollection\n  //\n  // constructor({ colorCollection }: DriverConfig) {\n  //   this.colorCollection = colorCollection\n  // }\n\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    console[type](...lines)\n    // console[msg.type ?? type](res[0], ...res[1])\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = `%c${block.getText()}`\n    const fmtArgs: Array<string> = []\n    let strStyle = ''\n\n    const style = block.getStyle()\n    for (const keyStyle in style) {\n      strStyle += `${keyStyle}:${style[keyStyle]};`\n    }\n    fmtArgs.push(strStyle)\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAOA;AACA;AACA;AACA;AACA;AACA;IAGMA,a;;;;;;;WACJ;IACA;IACA;IACA;IACA;IAEA,eAAMC,GAAN,EAA0B;MACxB,KAAKC,OAAL,CAAaD,GAAb,EAAkB,OAAlB;IACD;;;WAED,cAAKA,GAAL,EAAyB;MACvB,KAAKC,OAAL,CAAaD,GAAb,EAAkB,MAAlB;IACD;;;WAED,aAAIA,GAAJ,EAAwB;MACtB,KAAKC,OAAL,CAAaD,GAAb,EAAkB,KAAlB;IACD;;;WAED,eAAMA,GAAN,EAA0B;MACxB,KAAKC,OAAL,CAAaD,GAAb,EAAkB,OAAlB;IACD;;;WAED,eAAMA,GAAN,EAA0B;MACxB,KAAKC,OAAL,CAAaD,GAAb,EAAkB,OAAlB;IACD;;;WAED,iBAAkBA,GAAlB,EAAgCE,IAAhC,EAA8C;MAAA;;MAC5C,IAAMC,KAAK,GAAGJ,aAAa,CAACK,YAAd,CAA2BL,aAAa,CAACM,aAAd,CAA4BL,GAA5B,CAA3B,CAAd,CAD4C,CAG5C;;MACA,YAAAM,OAAO,EAACJ,IAAD,CAAP,oCAAiBC,KAAjB,GAJ4C,CAK5C;;IACD;;;WAED,sBAA8BI,GAA9B,EAAiE;MAC/D,QAAQA,GAAG,CAACC,MAAZ,4BAAuBD,GAAG,CAACE,OAA3B;IACD;;;WAED,uBAA+BT,GAA/B,EAA4D;MAC1D,IAAIQ,MAAc,GAAG,EAArB;MACA,IAAMC,OAAsB,GAAG,EAA/B;MAEAT,GAAG,CAACU,SAAJ,GAAgBC,OAAhB,CAAwB,UAAAC,KAAK,EAAI;QAC/B,4BAAuCb,aAAa,CAACc,WAAd,CAA0BD,KAA1B,CAAvC;QAAA,IAAgBE,GAAhB,yBAAQN,MAAR;QAAA,IAA8BO,IAA9B,yBAAqBN,OAArB;;QACAD,MAAM,IAAIM,GAAV;QACAL,OAAO,CAACO,IAAR,OAAAP,OAAO,qBAASM,IAAT,EAAP;MACD,CAJD;MAMA,OAAO;QAAEP,MAAM,EAANA,MAAF;QAAUC,OAAO,EAAPA;MAAV,CAAP;IACD;;;WAED,qBAA6BG,KAA7B,EAAiE;MAC/D,IAAIJ,MAAc,eAAQI,KAAK,CAACK,OAAN,EAAR,CAAlB;MACA,IAAMR,OAAsB,GAAG,EAA/B;MACA,IAAIS,QAAQ,GAAG,EAAf;MAEA,IAAMC,KAAK,GAAGP,KAAK,CAACQ,QAAN,EAAd;;MACA,KAAK,IAAMC,QAAX,IAAuBF,KAAvB,EAA8B;QAC5BD,QAAQ,cAAOG,QAAP,cAAmBF,KAAK,CAACE,QAAD,CAAxB,MAAR;MACD;;MACDZ,OAAO,CAACO,IAAR,CAAaE,QAAb;MAEA,OAAO;QAAEV,MAAM,EAANA,MAAF;QAAUC,OAAO,EAAPA;MAAV,CAAP;IACD;;;;;;eAGYV,a"}