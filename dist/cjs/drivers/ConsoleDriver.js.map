{"version":3,"sources":["../../../src/drivers/ConsoleDriver.ts"],"names":["ConsoleDriver","msg","perform","type","lines","buildStrings","formatMessage","console","fmt","fmtStr","fmtArgs","getBlocks","forEach","block","formatBlock","str","args","push","hasStyle","style","getStyle","strStyle","keyStyle","getText"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAWMA,a;;;;;;;WACJ,eAAMC,GAAN,EAA0B;AACxB,WAAKC,OAAL,CAAaD,GAAb,EAAkB,OAAlB;AACD;;;WAED,cAAKA,GAAL,EAAyB;AACvB,WAAKC,OAAL,CAAaD,GAAb,EAAkB,MAAlB;AACD;;;WAED,aAAIA,GAAJ,EAAwB;AACtB,WAAKC,OAAL,CAAaD,GAAb,EAAkB,KAAlB;AACD;;;WAED,eAAMA,GAAN,EAA0B;AACxB,WAAKC,OAAL,CAAaD,GAAb,EAAkB,OAAlB;AACD;;;WAED,eAAMA,GAAN,EAA0B;AACxB,WAAKC,OAAL,CAAaD,GAAb,EAAkB,OAAlB;AACD;;;WAED,iBAAkBA,GAAlB,EAAgCE,IAAhC,EAA8C;AAAA;;AAC5C,UAAMC,KAAK,GAAGJ,aAAa,CAACK,YAAd,CAA2BL,aAAa,CAACM,aAAd,CAA4BL,GAA5B,CAA3B,CAAd,CAD4C,CAG5C;;AACA,kBAAAM,OAAO,EAACJ,IAAD,CAAP,oCAAiBC,KAAjB,GAJ4C,CAK5C;;AACD;;;WAED,sBAA8BI,GAA9B,EAAiE;AAC/D,cAAQA,GAAG,CAACC,MAAZ,4BAAuBD,GAAG,CAACE,OAA3B;AACD;;;WAED,uBAA+BT,GAA/B,EAA4D;AAC1D,UAAIQ,MAAc,GAAG,EAArB;AACA,UAAMC,OAAsB,GAAG,EAA/B;AAEAT,MAAAA,GAAG,CAACU,SAAJ,GAAgBC,OAAhB,CAAwB,UAAAC,KAAK,EAAI;AAC/B,oCAAuCb,aAAa,CAACc,WAAd,CAA0BD,KAA1B,CAAvC;AAAA,YAAgBE,GAAhB,yBAAQN,MAAR;AAAA,YAA8BO,IAA9B,yBAAqBN,OAArB;;AACAD,QAAAA,MAAM,IAAIM,GAAV;AACAL,QAAAA,OAAO,CAACO,IAAR,OAAAP,OAAO,qBAASM,IAAT,EAAP;AACD,OAJD;AAMA,aAAO;AAAEP,QAAAA,MAAM,EAANA,MAAF;AAAUC,QAAAA,OAAO,EAAPA;AAAV,OAAP;AACD;;;WAED,qBAA6BG,KAA7B,EAAiE;AAC/D,UAAIJ,MAAc,GAAG,EAArB;AACA,UAAMC,OAAsB,GAAG,EAA/B;;AAEA,UAAIG,KAAK,CAACK,QAAN,EAAJ,EAAsB;AACpBT,QAAAA,MAAM,IAAI,IAAV;AAEA,YAAMU,KAAK,GAAGN,KAAK,CAACO,QAAN,EAAd;AACA,YAAIC,QAAQ,GAAG,EAAf;;AACA,aAAK,IAAMC,QAAX,IAAuBH,KAAvB,EAA8B;AAC5BE,UAAAA,QAAQ,cAAOC,QAAP,cAAmBH,KAAK,CAACG,QAAD,CAAxB,MAAR;AACD;;AACDZ,QAAAA,OAAO,CAACO,IAAR,CAAaI,QAAb;AACD;;AAEDZ,MAAAA,MAAM,IAAI,IAAV;AACAC,MAAAA,OAAO,CAACO,IAAR,CAAaJ,KAAK,CAACU,OAAN,EAAb;AAEA,aAAO;AAAEd,QAAAA,MAAM,EAANA,MAAF;AAAUC,QAAAA,OAAO,EAAPA;AAAV,OAAP;AACD;;;;;;eAGYV,a","sourcesContent":["/*\nexport const STYLE_INFO = 'color: white; background:blue; padding: 2px 5px;'\nexport const STYLE_PURPLE = 'color: white; background:purple; padding: 2px 5px;'\n\nexport const map = {\n  info: STYLE_INFO,\n  purple: STYLE_PURPLE,\n}\n*/\n\nimport Message from '../Message'\nimport MessageBlock from '../MessageBlock'\nimport { LoggerDriver } from './LoggerDriver'\n\nexport interface FormatConsole {\n  fmtStr: string\n  fmtArgs: Array<string>\n}\n\nclass ConsoleDriver implements LoggerDriver {\n  debug(msg: Message): void {\n    this.perform(msg, 'debug')\n  }\n\n  info(msg: Message): void {\n    this.perform(msg, 'info')\n  }\n\n  log(msg: Message): void {\n    this.perform(msg, 'log')\n  }\n\n  error(msg: Message): void {\n    this.perform(msg, 'error')\n  }\n\n  trace(msg: Message): void {\n    this.perform(msg, 'trace')\n  }\n\n  protected perform(msg: Message, type: string) {\n    const lines = ConsoleDriver.buildStrings(ConsoleDriver.formatMessage(msg))\n\n    // @ts-ignore\n    console[type](...lines)\n    // console[msg.type ?? type](res[0], ...res[1])\n  }\n\n  protected static buildStrings(fmt: FormatConsole): Array<string> {\n    return [fmt.fmtStr, ...fmt.fmtArgs]\n  }\n\n  protected static formatMessage(msg: Message): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    msg.getBlocks().forEach(block => {\n      const { fmtStr: str, fmtArgs: args } = ConsoleDriver.formatBlock(block)\n      fmtStr += str\n      fmtArgs.push(...args)\n    })\n\n    return { fmtStr, fmtArgs }\n  }\n\n  protected static formatBlock(block: MessageBlock): FormatConsole {\n    let fmtStr: string = ''\n    const fmtArgs: Array<string> = []\n\n    if (block.hasStyle()) {\n      fmtStr += '%c'\n\n      const style = block.getStyle()\n      let strStyle = ''\n      for (const keyStyle in style) {\n        strStyle += `${keyStyle}:${style[keyStyle]};`\n      }\n      fmtArgs.push(strStyle)\n    }\n\n    fmtStr += '%s'\n    fmtArgs.push(block.getText())\n\n    return { fmtStr, fmtArgs }\n  }\n}\n\nexport default ConsoleDriver\n"],"file":"ConsoleDriver.js"}