{"version":3,"sources":["../../src/MessageBlock.ts"],"names":["MessageBlock","text","Object","_text","key","value","style","push","marginLeft","JSON","stringify","block"],"mappings":";;;;;;;AAEA;;;;;;;;;;IASMA,Y;AAIJ,wBAAYC,IAAZ,EAA0B;AAAA;;AAAA,mCAFS,IAAIC,MAAJ,CAAW,IAAX,CAET;;AACxB,SAAKC,KAAL,GAAaF,IAAb,CADwB,CAExB;AACD;;;;WAED,cAAKG,GAAL,EAAkBC,KAAlB,EAAuC;AACrC,WAAKC,KAAL,CAAWF,GAAX,IAAkBC,KAAlB;AAEA,aAAO,IAAP;AACD;;;WAED,eAAMA,KAAN,EAA2B;AACzB,aAAO,KAAKE,IAAL,CAAU,OAAV,EAAmBF,KAAnB,CAAP;AACD;;;WAED,oBAAWA,KAAX,EAAgC;AAC9B,aAAO,KAAKE,IAAL,CAAU,YAAV,EAAwBF,KAAxB,CAAP;AACD;;;WAED,oBAAWA,KAAX,EAAgC;AAC9B,aAAO,KAAKE,IAAL,CAAU,aAAV,YAA4BF,KAA5B,QAAP;AACD;;;WAED,qBAAYA,KAAZ,EAAiC;AAC/B,aAAO,KAAKG,UAAL,CAAgBH,KAAK,GAAG,EAAxB,CAAP;AACD;;;WAED,cAAKA,KAAL,EAA0B;AACxB,WAAKF,KAAL,GAAaE,KAAb;AAEA,aAAO,IAAP;AACD;;;WAED,mBAAkB;AAChB,aAAO,KAAKF,KAAZ;AACD;;;WAED,oBAA8B;AAC5B,aAAO,KAAKG,KAAZ;AACD;;;WAED,oBAAoB;AAClB,aAAO,CAAC,0BAAc,KAAKA,KAAnB,CAAR;AACD;;;WAED,sBAAmB;AACjB,WAAKA,KAAL,GAAa,IAAIJ,MAAJ,CAAW,IAAX,CAAb;AAEA,aAAO,IAAP;AACD;;;WAED,kBAAiB;AACf,aAAOO,IAAI,CAACC,SAAL,CAAe;AACpBP,QAAAA,KAAK,EAAE,KAAKA,KADQ;AAEpBG,QAAAA,KAAK,EAAE,KAAKA;AAFQ,OAAf,CAAP;AAID;;;WAED,kBAAgBK,KAAhB,EAA4D;AAC1D,aAAOA,KAAK,YAAYX,YAAjB,GAAgCW,KAAhC,GAAwC,IAAIX,YAAJ,CAAiBW,KAAjB,CAA/C;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;eAMeX,Y","sourcesContent":["// export interface MessageBlockStyle extends {[index: string]:any}\n\nimport {isEmptyObject} from \"./utils\";\n\nexport interface MessageBlockStyle {\n  [index: string]: any\n\n  color?: string\n  background?: string\n}\n\nclass MessageBlock {\n  private _text: string;\n  private style: MessageBlockStyle = new Object(null);\n\n  constructor(text: string) {\n    this._text = text\n    // this.parse(block)\n  }\n\n  push(key: string, value: string): this {\n    this.style[key] = value\n\n    return this\n  }\n\n  color(value: string): this {\n    return this.push('color', value)\n  }\n\n  background(value: string): this {\n    return this.push('background', value)\n  }\n\n  marginLeft(value: number): this {\n    return this.push('margin-left', `${value}px`)\n  }\n\n  paddingLeft(value: number): this {\n    return this.marginLeft(value * 10)\n  }\n\n  text(value: string): this {\n    this._text = value\n\n    return this\n  }\n\n  getText(): string {\n    return this._text\n  }\n\n  getStyle(): MessageBlockStyle {\n    return this.style\n  }\n\n  hasStyle(): boolean {\n    return !isEmptyObject(this.style)\n  }\n\n  clearStyle(): this {\n    this.style = new Object(null)\n\n    return this;\n  }\n\n  toJSON(): string {\n    return JSON.stringify({\n      _text: this._text,\n      style: this.style\n    });\n  }\n\n  static instance(block: MessageBlock | string): MessageBlock {\n    return block instanceof MessageBlock ? block : new MessageBlock(block)\n  }\n\n  /*  getStyleString(): string {\n      let str = ''\n\n      for (const key in this.style) {\n        const v = this.style[key]\n\n        str += `${key}:${v};`\n      }\n\n      return str\n    }*/\n\n  /*\n    parse(block) {\n      if (isString(block)) {\n        this.text = block\n        return\n      }\n\n      if (isObject(block)) {\n        if (!block.text) {\n          throw new Error('Invalid MessageBlock config')\n        }\n\n        this.text = block.text\n        // this.style = block.type || null\n        return\n      }\n\n      throw new Error('Invalid MessageBlock config')\n    }*/\n}\n\nexport default MessageBlock\n"],"file":"MessageBlock.js"}